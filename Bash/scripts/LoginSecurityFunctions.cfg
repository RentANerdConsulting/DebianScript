# Function to change SSH port to 1022
switchSSH()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/switchSSH.txt ]; then
		echo "0" > $PWD/flags/switchSSH.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/switchSSH.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		echo " "
		echo "#################################################"
		echo "!!!!!!!!!!!!!!        STOP         !!!!!!!!!!!!!!"
		echo "#################################################"
		echo " "
		echo " "
		echo "STOP RIGHT NOW, AND VERIFY THAT YOU HAVE PORT FORWARDING"
		echo "CONFIGURED FOR BOTH PORT 22 AND 1022!!!!"
		echo " "
		echo "YOU CAN LOCK YOURSELF OUT OF THIS SYSTEM IF THIS IS NOT CORRECT."
		echo " "
		echo "After the change, you can disable forwarding for port 22,"
		echo "after you've logged out and logged in using port 1022."
		echo " "
		echo "Be absolutely certain this works before disabling forwarding for port 22."
		echo " "
		read -p "Press enter to continue when you're ready:"

		# Change Fail2ban port watch in .local
		filestoreplace[$filecount]=/etc/fail2ban/jail.local
                sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		local count=0
		until [ "$count" == 2 ]; do
			sudo sed -i 's/port    = ssh/port    = 1022/' /etc/fail2ban/jail.local || error_exit "$LINENO: File edit failed."
                	count=$(($count+1))
		done
		filecount=$((filecount+1))

		# Change SSH port config
		filestoreplace[$filecount]=/etc/ssh/sshd_config
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i 's/Port 22/Port 1022/' /etc/ssh/sshd_config || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		echo " "
		echo "############ Switching SSH firewall rules ############"
		echo "######################################################"

		# backup IPv4 firewall ruleset, then add firewall rules for service
		filestoreplace[$filecount]=/etc/iptables/rules.v4
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/\\-A OUTPUT \\-o $nicname \\-p tcp \\-\\-sport 22 \\-m conntrack \\-\\-ctstate ESTABLISHED \\-j ACCEPT/\\-A OUTPUT \\-o $nicname \\-p tcp \\-\\-sport 1022 \\-m conntrack \\-\\-ctstate ESTABLISHED \\-j ACCEPT/" /etc/iptables/rules.v4 || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/\\-A INPUT \\-i $nicname \\-p tcp \\-\\-dport 22 \\-m conntrack \\-\\-ctstate NEW\\,ESTABLISHED \\-j ACCEPT/\\-A INPUT \\-i $nicname \\-p tcp \\-\\-dport 1022 \\-m conntrack \\-\\-ctstate NEW\\,ESTABLISHED \\-j ACCEPT/" /etc/iptables/rules.v4 || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/\\-A INPUT \\-p tcp \\-m multiport \\-\\-dports 22 \\-j f2b\\-sshd/\\-A INPUT \\-p tcp \\-m multiport \\-\\-dports 1022 \\-j f2b\\-sshd/" /etc/iptables/rules.v4 || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# backup IPv6 firewall ruleset, then add firewall rules for service
		filestoreplace[$filecount]=/etc/iptables/rules.v6
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/\\-A OUTPUT \\-o $nicname \\-p tcp \\-\\-sport 22 \\-m conntrack \\-\\-ctstate ESTABLISHED \\-j ACCEPT/\\-A OUTPUT \\-o $nicname \\-p tcp \\-\\-sport 1022 \\-m conntrack \\-\\-ctstate ESTABLISHED \\-j ACCEPT/" /etc/iptables/rules.v6 || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/\\-A INPUT \\-i $nicname \\-p tcp \\-\\-dport 22 \\-m conntrack \\-\\-ctstate NEW\\,ESTABLISHED \\-j ACCEPT/\\-A INPUT \\-i $nicname \\-p tcp \\-\\-dport 1022 \\-m conntrack \\-\\-ctstate NEW\\,ESTABLISHED \\-j ACCEPT/" /etc/iptables/rules.v6 || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Restart firewall with new ruleset
		sudo service netfilter-persistent restart && sudo systemctl restart fail2ban && sudo systemctl restart sshd || error_exit "$LINENO: Service restart failed."

		beenrun=1
		echo $beenrun > $PWD/flags/switchSSH.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


# Function to generate SSH RSA keys locally using ssh-keygen
sshKeyGen()
{
	return
}


# Function to walk user through creation of SSH RSA keys in PuTTYgen
puttyGen()
{
	local anykey=""
	correct="y"
	local user=""
	local userdirectory=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "###### Generate RSA keys for SSH using PuTTY ######"
		echo "###################################################"
		echo " "
		echo " "
		echo "Would you like to generate new RSA keys for SSH authentication,"
		read -p "to use them to improve security while accessing this system remotely? y/n: " correct
		if [ "$correct" == "y" ]; then

			# determine user and user directory
			echo " "
			read -p "Are you creating keys for the user you're currently logged into, $currentuser? y/n: " correct
			if [ "$correct" == "n" ]; then
				echo " "
				read -p "Please enter the username for the user the keys are for, in lowercase: " user
				user="$(translateToLowerCase $user)"
				echo " "
				read -p "Is this correct? $user y/n: " correct
				if [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ]; then
					userdirectory="/home/$user/.ssh"

				elif [ "$correct" == "y" ] && [ "$(userExists $user)" != 0 ]; then
					echo "$user is not a valid user on this system."
					echo " "
					echo "If you would like to create a standard user for $user, type user at the prompt."
					echo " "
					echo "If you would like to create an administrator user for $user, type admin at the prompt."
					echo " "
					echo "If you made a mistake and want to try again, type oops at the prompt."
					echo " "
					read -p "Please enter your selection. user/admin/oops: " correct
					case $correct in

						# Create standard user and return to initial prompt
						user ) addAdditionalUsers
							correct="n";;

						# Create admin user and return to initial prompt
						admin ) addAdditionalAdmins
							correct="n";;

						# Return to initial prompt
						oops ) errorTracking;;

						# Return to initial prompt, because someone isn't awake today
						* ) correct="n"
							errorTracking;;
					esac
				else
					errorTracking;
				fi
			elif [ "$correct" == "y" ]; then
				user="$currentuser"
				userdirectory="/home/$user/.ssh"
			else
				errorTracking;
			fi

			if [ "$correct" == "y" ]; then

				# create directory if it doesn't exist
				if [ ! -e "$userdirectory" ]; then
					sudo mkdir -p $userdirectory || error_exit "$LINENO: Folder creation failed."
				fi

				# Walk user through preparing KeePass to store key info
				echo "Open your KeePass database, or create a new one if these keys will be for someone else."
				echo "They can import the information into their own."
				echo " "
				echo "Create new entries in KeePass for your public and private keys,"
				echo "named RSA private key - $user and RSA public key - $user."
				echo " "
				echo "Enter $user as the user name, and let keepass generate a new password"
				echo "for RSA private key - $user. Delete the password for RSA public key - $user."
				echo " "
				echo "Save the database, but leave KeePass open."
				read -p "Press enter when finished." anykey

				# walk user through creating the keys in PuTTYgen
				echo " "
				echo " "
				echo "Open PuTTYgen."
				echo " "
				echo "At the bottom of the window, select the button labeled SSH-2 RSA."
				echo " "
				echo "In the bottom right corner, replace 2048 with 4096."
				echo " "
				echo "Now click the generate button. Randomly move your mouse around just"
				echo "below the top progress bar as PuTTYgen instructs."
				echo " "
				echo "Now that the keys are generated, in the comment field, replace rsa-key"
				echo "with $user or their email address, if you'd prefer. Choose a method, and"
				echo "use this same method for each new set of keys created."
				echo " "
				echo "Now go back to KeePass, and right click on the RSA private key - $user entry."
				echo " "
				echo "Select 'Copy Password', then quickly go back to PuTTYgen and right click in the"
				echo "'Key passphrase' text box. Select paste, and repeat the process for the"
				echo "'Confirm passphrase' text box. You'll have about 15-20 seconds to do this"
				echo "before KeePass clears the password and you'll have to re-copy it."
				echo " "
				read -p "Press enter when finished." anykey

				# walk user through saving the keys and transferring them to the remote system
				echo " "
				echo " "
				echo "Now, using the buttons in PuTTYgen, save the public key and private key,"
				echo "in a new folder on your desktop, as ${user}_rsa (the private key will have extension .ppk)."
				echo " "
				echo "In the 'Public key for pasting into OpenSSH authorized_keys file' field"
				echo "at the top of the PuTTYgen window, right click the text and select 'Copy'"
				echo " "
				echo "Create a new text file in the same folder as the keys, paste the text into it,"
				echo "and save the file as ${user}_rsa.openssh. Make sure the text is all on a single line, in order."
				echo "If it isn't, correct this and re-save the file. Make sure the text begins with 'ssh-rsa',"
				echo '[THIS IS VERY IMPORTANT, AS PuTTY USES DIFFERENT FORMATING FOR ITS KEYS]'
				echo "then select all of the text again, right click, and select copy."
				echo " "
				echo "If it doesn't already exist, a new file to store public keys in will be created"
				echo "in $userdirectory, named 'authorized_keys'. This will be done automatically."
				echo " "
				echo "A text editor will open in the PuTTY window. Before pasting the key into this file,"
				echo "make sure the key cursor is on an empty new line, using the arrow keys. Then, simply"
				echo "right click the location of the key cursor, and the key will be placed in the file."
				echo "Once that's done, press 'ctrl+x', then 'y' to exit the text editor and save the file."
				echo " "
				read -p "Press enter when ready to continue." anykey

				sudo nano $userdirectory/authorized_keys
				wait

				# assign permissions to key files
				sudo chown $user:$user $userdirectory/authorized_keys || error_exit "$LINENO: Setting ownership failed."
				sudo chmod 600 $userdirectory/authorized_keys || error_exit "$LINENO: Setting permissions failed."

				# Walk user through storing the keys in KeePass
				echo " "
				echo " "
				echo "Back in KeePass, right click the entry for the public key, and select 'Edit/View Entry'."
				echo "Open the Advanced tab, then click the 'Attach' button in the 'File Attachments' section near the bottom."
				echo "Select 'Attach file(s)'."
				echo " "
				echo "In the window that opens, select both ${user}_rsa and ${user}_rsa.openssh, then click the 'open' button."
				echo " "
				echo "Repeat this process for the private key, selecting and attaching ${user}_rsa.ppk"
				echo "to the private key entry in KeePass."
				echo " "
				echo "Save the KeePass database, but keep it open."
				echo " "
				read -p "Press enter when ready to continue." anykey

				# Warn user of ssh reload and test to ensure key works before disabling password login, if they wish to do so
				echo " "
				echo " "
				echo "The SSH service will be reloaded to put the keys into effect. You'll need to test the keys."
				echo " "
				echo "Navigate to the folder containing the keys on your local system, not the system you're currently"
				echo "logged into through PuTTY. If they keys are attached and stored in KeePass properly, delete"
				echo "${user}_rsa and ${user}_rsa.openssh, BUT NOT ${user}_rsa.ppk."
				echo " "
				echo "Now, open a new PuTTY window, and load the stored connection to this remote system. In the left 'Category'"
				echo "section, click on the plus sign next to 'SSH', then select 'Auth'."
				echo " "
				echo "Click the button labeled 'Browse', just beside the empty text box on the right side."
				echo "Navigate to the folder that contains ${user}_rsa.ppk, select it, then click 'open'."
				echo " "
				echo "Back in the 'Category' section, scroll back up to the 'Session' option, and click it."
				echo "Stop here. Do not click anything else in the new PuTTY window yet."
				echo " "
				echo "If you're disconnected from the first/original PuTTY window, keep it open for reference if possible."
				echo "Wait 5-10 seconds, then click the 'open' button in the new PuTTY window you opened. You'll be prompted for"
				echo "the user name, and the password for the private key. In KeePass, copy the password as you did before, and"
				echo "right click next to the prompt in PuTTY. You'll then press enter. If everything worked, you'll be logged in."
				echo "If something went wrong, you'll be asked for ${user}'s account password, not the password for the key."
				echo " "
				echo "After everything has tested good, and the keys are working, use the menu option in this script labeled"
				echo "'Disable SSH password login', to require SSH users to have and use RSA keys and passwords for them."
				echo " "
				echo "If this process has been for your account, continue on and repeat the above steps in PuTTY to use the keys,"
				echo "saving the changes this time."
				echo " "
				echo "If this has been for another user, make sure they receive the KeePass database you created for them,"
				echo "and can import it into their own."
				echo " "
				read -p "When you're ready to test the keys, press enter." anykey

				# reload sshd
				sudo systemctl reload sshd
			else
				correct="y"
			fi
		else
			errorTracking;
		fi
	done

	return
}


# Function to disable password login via SSH
disableSSHPass()
{
	correct="n"
	echo " "
	echo "######## Disable SSH Password Login ########"
	echo "############################################"
	echo " "
	echo " "
	echo "Are you ABSOLUTELY SURE you want to disable password login via SSH?"
	echo " "
	echo "You could lock the system out and prevent remote access, if keys are not already created and distributed."
	echo " "
	read -p "If you're certain you wish to do this, type continue: " correct
	if [ "$correct" == "continue" ]; then

		# backup sshd configuration, then turn off password login via ssh
		filestoreplace[$filecount]=/etc/ssh/sshd_config
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# reload SSH
		sudo systemctl reload sshd

		# Remove backed up file before moving on
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}
