# Function to verify Guest Additions ISO is inserted, and install it
installGuestAdditions()
{
	correct="n"
	until [ "$correct" == "y" ] ; do

		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "VirtualBox Guest Additions" --yesno "Insert the Guest Additions ISO into the VM CD-ROM drive.\n\nDo this by using the menus on the active VirtualBox VM window.\n\nSelect 'Devices' -> 'Insert Guest Additions CD Image'.\n\nOR, 'Machine' -> 'Settings' -> 'Storage', then selecting the empty optical drive.\nUnder attributes, click the image of a CD next to the listing of the optical drive.\nUse VBoxGuestAdditions.iso if this is available. If it is not, you'll need to select\nChoose Virtual Optical Disc Image, and browse to the VirtualBox installation folder\nwhere the iso is located.\n\nIs the Guest Additions ISO inserted?" 0 0
			case $? in
				0 ) clear
					correct="y"

					# Mounting VirtualBox Guest Additions ISO
					sudo mount /dev/cdrom /mnt || error_exit "$LINENO: mount failed."
					wait

					# Installing VirtualBox Guest Additions
					sudo /mnt/VBoxLinuxAdditions.run
					wait;;

				1 ) clear
					errorTracking;;
			esac
	done

	return
}


# Function to check if being installed on a VirtualBox VM
checkIfVirtualBox()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/checkIfVirtualBoxVM.txt ] && [ "$physicalsystem" == "0" ]; then
		echo "0" > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
		beenrun=0

		# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
		read beenrun < $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: Read failed."
		if [ "$beenrun" != 1 ]; then
			correct="n"
			until [ "$correct" == "y" ] ; do

				dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "VirtualBox VM?" --yesno "Is this OS installed on a VirtualBox VM?" 0 0
					case $? in
						0 ) clear
							correct="y"
							virtualbox="1";;

						1 ) clear
							correct="y"
							virtualbox="0";;
					esac
			done

			beenrun=1
			echo $beenrun > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
			echo $virtualbox > $PWD/flags/virtualboxvm.txt || error_exit "$LINENO: File creation failed."
		fi
	elif [ ! -e $PWD/flags/checkIfVirtualBoxVM.txt ] && [ "$physicalsystem" == "1" ]; then
		echo "1" > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
		echo "0" > $PWD/flags/virtualboxvm.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to install VirtualBox and PHPVirtualBox
installVirtualBox()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installVirtualBox.txt ]; then
		echo "0" > $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Make directory for VMs
		if [ ! -e $PWD/flags/vmdir.txt ]; then
			correct="n"
			until [ "$correct" == "y" ]; do
				dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Install VirtualBox" --inputbox "Please enter the parent directory structure to create\nfor the VMs, starting from root, ie: /VMs\n\nThis would create directory /VMs and apply permissions.\n\nYou could then create all virtual machines and their\nvirtual drives under this parent directory." 0 0 0> vmdir
					dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Install VirtualBox" --yesno "Is this correct? $vmdir" 0 0
						case $? in
							0 ) clear
								correct="y"
								echo "$vmdir" > $PWD/flags/vmdir.txt || error_exit "$LINENO: File creation failed.";;

							1 ) clear
								errorTracking;;
						esac
			done
		fi

		# Create VM Parent Directory
		sudo mkdir -p $vmdir || error_exit "$LINENO: Folder creation failed ."

		### Oracle version
		# Add Oracle VirtualBox repo
		filestoreplace[$filecount]=/etc/apt/sources.list
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "/deb-src http\:\/\/security.ubuntu.com\/ubuntu xenial-security multiverse/ a \\\ndeb http\:\/\/download.virtualbox.org\/virtualbox\/debian xenial contrib" /etc/apt/sources.list || error_exit "$LINENO: Sources list edit failed."
		filecount=$((filecount+1))

		# Add repo key
		wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - || error_exit "$LINENO: Key add failed."

		# Install Virtualbox
		sudo apt update && sudo apt -y install virtualbox-5.1 php7.0-soap php-pear || error_exit "$LINENO: Installation failed."

		# Install Extension Pack
		wget http://download.virtualbox.org/virtualbox/5.1.20/Oracle_VM_VirtualBox_Extension_Pack-5.1.20-114628.vbox-extpack || error_exit "$LINENO: File download failed."
		sudo VBoxManage extpack install --accept-license=715c7246dc0f779ceab39446812362b2f9bf64a55ed5d3a905f053cfab36da9e Oracle_VM_VirtualBox_Extension_Pack-5.1.20-114628.vbox-extpack || error_exit "$LINENO: Installation failed."

		### Ubuntu Version
		# Install VirtualBox
		#sudo apt update && sudo apt -y install virtualbox virtualbox-ext-pack virtualbox-guest-additions-iso php7.0-soap php-pear || error_exit "$LINENO: Installation failed."

		# restart apache2 with new mods and features enabled
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."

		# Apply file and folder permissions
		sudo chmod -R 770 $vmdir || error_exit "$LINENO: Setting folder permisions failed."
		sudo chown -R root:vboxusers $vmdir || error_exit "$LINENO: Setting folder ownership failed."

		# add current user to vboxusers
		sudo adduser $currentuser vboxusers || error_exit "$LINENO: User group add failed."

		# add vbox user to vboxusers
		sudo useradd vbox || error_exit "$LINENO: User group add failed."
		sudo usermod -a -G vboxusers vbox || error_exit "$LINENO: User group add failed."

		# add vbox to cdrom group for loading guest additions to vms
		sudo usermod -a -G cdrom vbox || error_exit "$LINENO: User group add failed."

		# set vbox account password
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "vbox user password" --inputbox "Generate random password for VirtualBox user vbox using Keepass2. \
			\n\nLog this password as $clientname -> $hostname -> VirtualBox -> vbox,\nwith user name vbox, as it may be needed later for maintenance.\n\nYou will be prompted to enter this password three times.\nOnce, just below, to store temporarily to enter for the site configuration,\nand twice when setting it for the vbox user account.\n\nYou may copy and paste it into the PuTTY window from Keepass.\n\nEnter VirtualBox user vbox password below:" 0 0 0> vboxuserpass
				dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "vbox user password" --yesno "Is this correct? $vboxuserpass" 0 0
					case $? in
						0 ) clear
							correct="y"
							echo $vboxuserpass > $PWD/flags/vboxuserpass.txt || error_exit "$LINENO: File edit failed.";;

						1 ) clear
							errorTracking;;
					esac
		done

		sudo passwd vbox || error_exit "$LINENO: Password creation failed."

		# Edit VirtualBox service configuration
		filestoreplace[$filecount]=/etc/default/virtualbox
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i '0,/SHUTDOWN_USERS=""/s//SHUTDOWN_USERS="all"/' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '0,/SHUTDOWN=poweroff/s//SHUTDOWN=acpibutton/' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '/SHUTDOWN=acpibutton/aVBOXWEB_USER=vbox' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '/VBOXWEB\_USER\=vbox/aVBOXAUTOSTART_DB=/etc/vbox' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '/VBOXAUTOSTART\_DB\=\/etc\/vbox/aVBOXAUTOSTART_CONFIG=/etc/vbox/autostart.cfg' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '/VBOXAUTOSTART\_CONFIG\=\/etc\/vbox\/autostart.cfg/aVBOXAUTOSTART_STOP_DELAY=15' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Create autostart config folder
		sudo mkdir -p /etc/vbox || error_exit "$LINENO: Folder creation failed."

		# Create autostart config file
		sudo echo '# Default policy is to deny starting a VM, the other option is "allow".' | sudo tee /etc/vbox/autostart.cfg || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/vbox/autostart.cfg || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\ndefault_policy = deny" >> /etc/vbox/autostart.cfg || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nexception_list = vbox" >> /etc/vbox/autostart.cfg || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nvbox = {\nallow = true\n}" >> /etc/vbox/autostart.cfg || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/vbox/autostart.cfg || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# Set Autostart file and folder permissions
		sudo chgrp vboxusers /etc/vbox || error_exit "$LINENO: Setting file permisions failed."
		sudo chmod 1775 /etc/vbox || error_exit "$LINENO: Setting file permisions failed."
		sudo echo 1 > /etc/vbox/vbox.start || error_exit "$LINENO: File creation failed."
		sudo echo 1 > /etc/vbox/vbox.stop || error_exit "$LINENO: File creation failed."
		sudo chown vbox:vbox /etc/vbox/vbox.start /etc/vbox/vbox.stop || error_exit "$LINENO: Setting file permisions failed."
		sudo su vbox
		VBoxManage setproperty autostartdbpath /etc/vbox
		exit
		sudo systemctl enable vboxautostart-service || error_exit "$LINENO: Service registry failed."

		# Enable vboxweb service
		sudo systemctl enable vboxweb.service || error_exit "$LINENO: Service registry failed."

		# Start vboxweb service
		sudo systemctl start vboxweb.service || error_exit "$LINENO: Service restart failed."

		# Download phpvirtualbox
		sudo wget -P /tmp/ http://downloads.sourceforge.net/project/phpvirtualbox/phpvirtualbox-5.0-5.zip || error_exit "$LINENO: File download failed."

		# Extract phpvirtualbox
		sudo unzip /tmp/phpvirtualbox-5.0-5.zip -d /tmp/ || error_exit "$LINENO: File decompression failed."

		# Move phpvirtualbox to it's install path
		sudo mv /tmp/phpvirtualbox-5.0-5 /var/www/html/phpvirtualbox || error_exit "$LINENO: Folder move failed."

		# Remove download file
		sudo rm /tmp/phpvirtualbox-5.0-5.zip

		# Copy configuration example file to config file
		sudo cp /var/www/html/phpvirtualbox/config.php-example /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File copy failed."

		# Edit phpvb configuration file
		filestoreplace[$filecount]=/var/www/html/phpvirtualbox/config.php
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/var \$password = 'pass';/var \$password = '$vboxuserpass';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/var \$location = 'http:\/\/127.0.0.1:18083\/';/var \$location = 'http:\/\/localhost:18083\/';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/var \$vrdeports = '9000-9100';/var \$vrdeports = '9000-9020';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $enableGuestAdditionsVersionDisplay = true;/var $enableGuestAdditionsVersionDisplay = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $enableAdvancedConfig = true;/var $enableAdvancedConfig = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $vmMemoryStartLimitWarn = true;/var $vmMemoryStartLimitWarn = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $vmMemoryOffset = 100;/var $vmMemoryOffset = 100;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


# Function to add new users to access the PHPVirtualBox website
addPHPVirtualBoxSiteUser()
{
	# prompt for user to enable for site
	correct="n"
	until [ "$correct" == "y" ]; do
		local phpvirtualboxuser=""
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --yesno "Will this username and password be for the current user?" 0 0
			case $? in
				0 ) clear
					phpvirtualboxuser="$currentuser"
					correct="y";;

				1 ) clear
					dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --inputbox "Please enter the username of the user this is for:" 0 0 0> phpvirtualboxuser
					phpvirtualboxuser="$(translateToLowerCase $phpvirtualboxuser)"

					# Verify other admin is supposed to have access
					if [ "$(userExists $phpvirtualboxuser)" == 0 ] && [ "$(verifyMemberofGroup $phpvirtualboxuser admin)" == 0 ]; then
						dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --yesno "This login and password will be for the admin $phpvirtualboxuser, correct?" 0 0
							case $? in
								0 ) clear
									correct="y";;

								1 ) clear
									correct="n"
									errorTracking;;
							esac

					# Make sure non admin user is correctly being given access
					elif [ "$(userExists $phpvirtualboxuser)" == 0 ] && [ "$(verifyMemberofGroup $phpvirtualboxuser admin)" != 0 ]; then
						dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --yesno "$phpvirtualboxuser is not an administrator.\n\nAre you certain you want to give them access?" 0 0
							case $? in
								0 ) clear
									correct="y";;

								1 ) clear
									correct="n"
									errorTracking;;
							esac

					# Fix non existent user situation
					elif [ "$(userExists $phpvirtualboxuser)" != 0]; then
						local userselection
						dialog --cr-wrap --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --menu "$phpvirtualboxuser is not a valid user on this system.\n\nYou can create a new Standard User, Administrator,\nor return to the first user selection prompt:" 0 0 0 \
							1 "Standard User" \
							2 "Administrator" \
							3 "Return" 2>"${INPUT}"

						userselection=$(<"${INPUT}")

						case $userselection in
							# Create standard user and return to initial prompt
							1 ) addAdditionalUsers
								wait
								correct="y";;

							# Create admin user and return to initial prompt
							2 ) addAdditionalAdmins
								wait
								correct="y";;

							# Return to initial prompt
							3 ) errorTracking
								correct="n";;
						esac
					fi
			esac
	done

	# have user generate login password
	dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox user & password" --msgbox "Generate random password for $phpvirtualboxuser\nto log into the PHPVirtualBox site using Keepass2. \
	\n\nLog this password as $clientname -> $hostname -> PHPVirtualBox -> $phpvirtualboxuser.\n\nYou will be prompted for this password shortly.\n\nPlease be ready to type it in,\nor copy and paste it from keepass into PuTTY." 0 0
	clear

	if [ ! -e /etc/apache2/phpvirtualbox/.htpasswd ]; then
		sudo mkdir -p /etc/apache2/phpvirtualbox || error_exit "$LINENO: Folder creation failed."

		# set password for login
		sudo htpasswd -c /etc/apache2/phpvirtualbox/.htpasswd $phpvirtualboxuser || error_exit "$LINENO: Password creation failed."

	else
		# set password for login
		sudo htpasswd /etc/apache2/phpvirtualbox/.htpasswd $phpvirtualboxuser || error_exit "$LINENO: Password creation failed."
	fi
}


# Function to configure phpvb website
phpvbWebConfig()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/phpvbWebConfig.txt ]; then
		echo "0" > $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# disable default site configs
		sudo a2dissite 0-default
		sudo a2dissite 1-default-ssl

		# create phpvb website configuation
		sudo echo '<VirtualHost *:80>' | sudo tee /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\n\tServerName $phpvbhostname.$domainname" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /var/www/html/phpvirtualbox" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ "$exthttpsport" != "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpvbhostname.$domainname:$exthttpsport/\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		elif [ "$exthttpsport" == "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpvbhostname.$domainname/\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpvb-error.log" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpvb-access.log combined" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n<VirtualHost *:443>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerName $phpvbhostname.$domainname" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /var/www/html/phpvirtualbox" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpvb-error.log" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpvb-access.log combined" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tSSLEngine on" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateFile\t\t/etc/ssl/certs/$clientcertificate" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateKeyFile\t\t/etc/ssl/private/$clientkey" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			sudo printf "\n\tSSLCertificateChainFile\t\t/etc/ssl/certs/$clientcachain" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\t<FilesMatch \"\.(cgi|shtml|phtml|php)$\">" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Location />" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthType Basic" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthName \"Protected site\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthUserFile /etc/apache2/phpvirtualbox/.htpasswd" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tRequire valid-user" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tOrder deny,allow" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAllow from all" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Location>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</FilesMatch>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /usr/lib/cgi-bin>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tBrowserMatch \"MSIE [2-6]\" \\" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tnokeepalive ssl-unclean-shutdown \\" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tdowngrade-1.0 force-response-1.0" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: Setting file permisions failed."

		# enable new phpvirtualbox site
		sudo a2ensite 4-phpvirtualbox-ssl || error_exit "$LINENO: Site activation failed."

		# Restart services
		sudo systemctl restart apache2.service && sudo systemctl restart vboxweb.service || error_exit "$LINENO: Services restart failed."

		# prompt for user to enable for site
		addPHPVirtualBoxSiteUser;
		wait

		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "PHPVirtualBox First Use" --msgbox "When you first log into your PHPVirtualBox website, you will be prompted for your username \
		\nand password that you just created. You may add more users later. The default login to the\nactual application served by the site will be username: admin and password: admin. \
		\n\nImmediately after you first login using the admin username and password combo, go to\nFile -> Preferences -> Users and add a new administrator. \
		\nName the account client-nameadmin, ${clientname}admin, for example, or whatever you'd like.\nMake sure the account is an administrator account, specified by (Admin user) beside the name. \
		\n\nGenerate random password for this administrator account to log into the PHPVirtualBox site using Keepass2.\n\nLog this password as $clientname -> $hostname -> PHPVirtualBox -> the name you chose. \
		\n\nThen go to File -> Log out. Log back in with your new administrator account, and remove the\ndefault admin account entirely. Don't change the password, just remove the account. \
		\n\nContinue when ready:" 0 0
		clear

		beenrun=1
		echo $beenrun > $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: File edit failed."

	else
		return
	fi

	return
}


# List existing VMs
vmList()
{
	local vmlist=""
	vmlist=$(sudo ls "$1" | sort)
	echo "$vmlist"
}


# Function to add VM to AutoStart script
addAutoStartVM()
{
	if [ -e $PWD/flags/VirtualBox.txt ]; then

		# prompt for VM name
		correct=""
		until [ "$correct" == "n" ]; do
			local vmname=""

			echo " "
			echo "############ Select virtual machine to start at system boot ############"
			echo "########################################################################"
			echo " "
			read -p "Would you like to add an existing virtual machine to the AutoStart script? y/n: " correct
			if [ "$correct" == "y" ]; then
				echo " "
				echo "A list of existing VMs in the directory you specified at installation will be displayed."
				echo " "
				echo "Copy the name of the VM you wish to have start at system boot, and paste it at the prompt."
				echo " "
				read -p "Press enter when ready: "
				vmList $vmdir;
				echo " "
				read -p "Please enter the name of the VM: " vmname
				echo " "
				read -p "Is $vmname correct? y/n: " correct
				if [ "$correct" == "y" ]; then



				else
					errorTracking;
				fi
			fi
		done
	else
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "VM AutoStart" --msgbox "VirtualBox is not installed." 0 0
	fi

	return
}
