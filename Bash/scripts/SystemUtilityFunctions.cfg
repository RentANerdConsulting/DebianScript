# Function to update Tripwire database
updateTripwire()
{
	echo "############################################"
	echo "#######  Updating Tripwire database  #######"
	echo " "
	echo "Tripwire will run and open a report of all changed files."
	echo " "
	echo "If it all seems good, leave the boxes checked and press ctrl+x"
	echo " "
	echo "Tripwire will update it's database with the changes,"
	echo "then you should return to the utilities menu."
	echo " "
	read -p "Press enter to continue. "
	sudo tripwire --check --interactive

	return
}


# Function to upgrade ownCloud install after package update
ownCloudUpgrade()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		correct=n
		echo " "
		echo "############ Upgrading ownCloud ############"
		echo "############################################"
		echo " "
		echo "!!!!!!!! System clean up will be run automatically after upgrade !!!!!!!!"
		echo " "
		read -p "Type continue to upgrade ownCloud. Anything else will return you to the menu. : " correct
		if [ "$correct" == "continue" ]; then

			# Run script to change file permissions for owncloud folders and files to prevent permisions issues during update or upgrade
			sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
			wait

			# Upgrade ownCloud
			sudo -u www-data php /var/www/owncloud/occ upgrade || error_exit "$LINENO: ownCloud upgrade failed."
			wait

			# Turn off maintenance mode
			sudo -u www-data php /var/www/owncloud/occ maintenance:mode --off || error_exit "$LINENO: Setting ownCloud maintenance mode to off failed."

			# Run script to reapply secure settings for owncloud folders and files
			sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
			wait

			# Restart Apache2
			sudo service apache2 restart || error_exit "$LINENO: service restart failed."

			# Remove old packages
			systemCleanUp;
			wait
		else
			errorTracking;
		fi
	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi

	return
}


# Function to enable secure ownCloud permissions
ownCloudSetPerms()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		echo " "
		echo "############ Applying secure ownCloud Permissions ############"
		echo "##############################################################"

		# Run script to reapply secure settings for owncloud folders and files
		sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait

		# Restart Apache2
		sudo service apache2 restart || error_exit "$LINENO: service restart failed."

	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi

	return
}


# Function to enable secure ownCloud permissions
ownCloudUnSetPerms()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		echo " "
		echo "############ Removing secure ownCloud Permissions ############"
		echo "##############################################################"

		# Run script to reapply secure settings for owncloud folders and files
		sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait

		# Restart Apache2
		sudo service apache2 restart || error_exit "$LINENO: service restart failed."

	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi

	return
}


# Function to enable secure ownCloud permissions
ownCloudSetMaint()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		echo " "
		echo "############  Applying ownCloud Maintenance Mode  ############"
		echo "############ Removing secure ownCloud Permissions ############"
		echo "##############################################################"

		# Run script to reapply secure settings for owncloud folders and files
		sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait

		# Turn on maintenance mode
		sudo -u www-data php /var/www/owncloud/occ maintenance:mode --on || error_exit "$LINENO: Setting ownCloud maintenance mode to off failed."

		# Restart Apache2
		sudo service apache2 restart || error_exit "$LINENO: service restart failed."

	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi

	return
}


# Function to enable secure ownCloud permissions
ownCloudUnSetMaint()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		echo " "
		echo "############  Applying ownCloud Maintenance Mode  ############"
		echo "############ Applying secure ownCloud Permissions ############"
		echo "##############################################################"

		# Turn off maintenance mode
		sudo -u www-data php /var/www/owncloud/occ maintenance:mode --off || error_exit "$LINENO: Setting ownCloud maintenance mode to off failed."

		# Run script to reapply secure settings for owncloud folders and files
		sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait

		# Restart Apache2
		sudo service apache2 restart || error_exit "$LINENO: service restart failed."

	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi

	return
}


# Function to update software
systemUpdateAndUpgrade()
{
	# Run script to change file permissions for owncloud folders and files to prevent permisions issues during update or upgrade
	if [ -e $PWD/flags/ownCloud.txt ]; then
		sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait
	fi

	# Update existing and in use system
	sudo apt-get update && sudo apt-get -y dist-upgrade || error_exit "$LINENO: update failed."
	wait

	# Restart LXD container service to prevent error message
	sudo service lxd restart || error_exit "$LINENO: service restart failed."
	wait

	# Run script to reapply secure settings for owncloud folders and files
	if [ -e $PWD/flags/ownCloud.txt ]; then
		sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
		wait
	fi

	updateTripwire;

	return
}


# Function to clean out old software and packages
systemCleanUp()
{
	echo " "
	echo "############ Removing obsolete files and software ############"
	echo "##############################################################"
	echo " "

	# Search for out of date kernels and headers, then purge if they exist
	dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p' | xargs sudo apt-get -y purge || error_exit "$LINENO: search for outdated kernels failed."

	# Update info. Purge and remove out of date packages and settings files
	sudo apt-get update && sudo apt-get -y --purge autoremove || error_exit "$LINENO: autoremove operation failed."
	wait

	# Attempt to find and remove anything left behind by previous commands
	sudo apt-get autoclean || error_exit "$LINENO: cleaning operation failed."
	wait

	# Ditto
	sudo apt-get clean || error_exit "$LINENO: cleaning operation failed."
	wait

	# Rebuild kernel images with new info and remove links to old images
	sudo update-initramfs -c -k all || error_exit "$LINENO: image update failed."
	wait

	# Update boot menu to reflect new kernel images
	sudo update-grub || error_exit "$LINENO: grub update failed."
	wait

	return
}


# Function to exit and reboot
exitAndReboot()
{
	correct="n"
	read -p "Are you certain you wish to exit this program and reboot the system? y/n: " correct
	if [ "$correct" == "y" ]; then
		sudo reboot
	else
		return
	fi
}


# Function to show configured cron jobs
showCron()
{
	sudo $PWD/showcron.sh || error_exit "$LINENO: Cron display failed."
	wait

	return
}
