# Function to list get ZFS disk/pool info
getZFS()
{
	#read existing ZFS disks/pools into file
        getzfsnames=($(sudo zfs list | awk '{print $1}' | grep -v 'NAME' | sort))

        echo "${getzfsnames[@]}" > $PWD/flags/zfsnames.txt
}


# Function to build dynamic menu
buildZFSMenu()
{
	#import zfs list into array structure dialog can use for dynamic menu
        local i=1 #Index counter for adding to array
        local j=1 #Option menu value generator

        while IFS="\n" read line ; do
        	#Dynamic dialogs require an array that has a staggered structure
        	#array[1]=1
        	#array[2]=First_Menu_Option
        	#array[3]=2
        	#array[4]=Second_Menu_Option

                zfsnames[ $i ]=$j
                (( j++ ))
                zfsnames[ ($i + 1) ]=$line
                (( i=($i+2) ))

        done < <(cat $PWD/flags/zfsnames.txt) #consume file

        ##uncomment for debug
        #printf '%s\n' "${zfsnames[@]}"
        #read -rsp "Press any key to continue..." -n1 key
}


# Function to scrub ZFS pool
scrubZFSpool()
{
	if [ -e $PWD/flags/ZFS.txt ]; then

		#get zfs list
		getZFS;

        	#import zfs list into array structure dialog can use for dynamic menu
		buildZFSMenu;

		correct="y"
		until [ "$correct" == "n" ]; do

			#verify operation
                        dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Scrub ZFS disk/pool" --yesno "Would you like to scrub a ZFS disk or pool?" 0 0
                                case $? in
                                        0 ) clear
						#Build the menu
        					dialog --cr-wrap --clear --no-ok  --backtitle "Linux Configuration Utility" --title "Scrub ZFS disk/pool" --menu "Choose a disk/pool to scrub:" 0 0 0 \
                					"${zfsnames[@]}" 2>"${INPUT}"

						menuselection=$(<"${INPUT}")

        					case $menuselection in

                					#verify the selection
                					* ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Scrub ZFS disk/pool" --yesno "Is ${zfsnames[($menuselection +$menuselection)]} the ZFS disk/pool you want to scrub?" 0 0
								case $? in
									0 ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Scrub ZFS disk/pool" --yesno "Are you certain?" 0 0
										case $? in
											0 ) clear
												sudo zpool scrub ${zfsnames[($menuselection +$menuselection)]};;

											1 ) clear
												errorTracking;;
										esac

									1 ) clear
										errorTracking;;
								esac

        					esac;;

					1 ) clear
						correct="n";;
				esac
		done

		rm $PWD/flags/zfsnames.txt

	else
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Scrub ZFS disk/pool" --msgbox "ZFS is not installed." 0 0
	fi

	return
}


# Function to create ZFS pool
createZFSpool()
{
	return
}


# Function to export ZFS pool --- not done
exportZFSpool()
{
	if [ -e $PWD/flags/ZFS.txt ]; then

		#get zfs list
		getZFS;

        	#import zfs list into array structure dialog can use for dynamic menu
		buildZFSMenu;

		correct="y"
		until [ "$correct" == "n" ]; do

			#verify operation
                        dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Export ZFS disk/pool" --yesno "Would you like to export a ZFS disk or pool?" 0 0
                                case $? in
                                        0 ) clear
						#Build the menu
        					dialog --cr-wrap --clear --no-ok  --backtitle "Linux Configuration Utility" --title "Export ZFS disk/pool" --menu "Choose a disk/pool to export:" 0 0 0 \
                					"${zfsnames[@]}" 2>"${INPUT}"

						menuselection=$(<"${INPUT}")

        					case $menuselection in

                					#verify the selection
                					* ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Export ZFS disk/pool" --yesno "Is ${zfsnames[($menuselection +$menuselection)]} the ZFS disk/pool you want to export?" 0 0
								case $? in
									0 ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Export ZFS disk/pool" --yesno "Are you certain?" 0 0
										case $? in
											0 ) clear
												sudo zpool import -f -d /dev/disk/by-id ${zfsnames[($menuselection +$menuselection)]};;

											1 ) clear
												errorTracking;;
										esac

									1 ) clear
										errorTracking;;
								esac

        					esac;;

					1 ) clear
						correct="n";;
				esac
		done

		rm $PWD/flags/zfsnames.txt

	else
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Export ZFS disk/pool" --msgbox "ZFS is not installed." 0 0
	fi

	return
}


# Function to import ZFS pool
importZFSpool()
{
	if [ -e $PWD/flags/ZFS.txt ]; then

		#get zfs list
		getZFS;

        	#import zfs list into array structure dialog can use for dynamic menu
		buildZFSMenu;

		correct="y"
		until [ "$correct" == "n" ]; do

			#verify operation
                        dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --yesno "Would you like to import a ZFS disk or pool?" 0 0
                                case $? in
                                        0 ) clear
						#Build the menu
        					dialog --cr-wrap --clear --no-ok  --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --menu "Choose a disk/pool to import:" 0 0 0 \
                					"${zfsnames[@]}" 2>"${INPUT}"

						menuselection=$(<"${INPUT}")

        					case $menuselection in

                					#verify the selection
                					* ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --yesno "Is ${zfsnames[($menuselection +$menuselection)]} the ZFS disk/pool you want to import?" 0 0
								case $? in
									0 ) dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --yesno "Would you like to change the name?" 0 0
										case $? in
											0 ) clear
												dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --inputbox "Please enter the new name for the disk/pool:" 0 0 0> zfspoolname
													dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --yesno "Is $zfspoolname correct?" 0 0
														case $? in
															0 ) clear
																sudo zpool import -f -d /dev/disk/by-id ${zfsnames[($menuselection +$menuselection)]} $zfspoolname;;

															1 ) clear
																errorTracking;;
														esac

											1 ) clear
												sudo zpool import -f -d /dev/disk/by-id ${zfsnames[($menuselection +$menuselection)]};;
										esac

									1 ) clear
										errorTracking;;
								esac

        					esac;;

					1 ) clear
						correct="n";;
				esac
		done

		rm $PWD/flags/zfsnames.txt

	else
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Import ZFS disk/pool" --msgbox "ZFS is not installed." 0 0
	fi

	return
}


# Function to list ZFS pools
listZFSPools()
{
	if [ -e $PWD/flags/ZFS.txt ]; then

		#get zfs list
		getZFS;

        	#import zfs list into array structure dialog can use for dynamic menu
		buildZFSMenu;

		correct="y"
		until [ "$correct" == "n" ]; do

			#Build the menu
        		dialog --cr-wrap --clear --no-ok  --backtitle "Linux Configuration Utility" --title "List ZFS disks/pools" --menu "Existing disks/pools:" 0 0 0 \
                		"${zfsnames[@]}" 2>"${INPUT}"

			menuselection=$(<"${INPUT}")

        		case $menuselection in

                		* ) clear
					correct="n";;
			esac
		done

		rm $PWD/flags/zfsnames.txt

	else
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "List ZFS disks/pools" --msgbox "ZFS is not installed." 0 0
	fi

	return
}


# Function to install ZFS
installZFS()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/ZFS.txt ]; then
		echo "0" > $PWD/flags/ZFS.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/ZFS.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Install ZFS
		sudo apt update && sudo apt install zfs zfsutils-linux zfs-initramfs || error_exit "$LINENO: Install failed."
		sudo modprobe zfs || error_exit "$LINENO: Module load failed."

		# Configure hourly status checks, email if non-healthy status returned
		sudo echo '#!/bin/bash' | sudo tee /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\n" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf 'STATUS=$(zpool status -x | grep ' >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "['all pools are healthy'])" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\nEMAIL_ADD=$smtplogin" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf 'if [ "$STATUS" != ' >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "'all pools are healthy' ]; then" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tdate > /tmp/zfs.stat" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\techo >> /tmp/zfs.stat" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\thostname >> /tmp/zfs.stat" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\techo >> /tmp/zfs.stat" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tzpool status -x >> /tmp/zfs.stat" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf 'cat /tmp/zfs.stat | mail -s "Disk failure in server : `hostname -f`" $EMAIL_ADD' >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo printf "\nfi" >> /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: Setting file permisions failed."
		sudo chmod +x /etc/cron.hourly/zpoolstatus || error_exit "$LINENO: Permissions edit failed."

		

		beenrun=1
		echo $beenrun > $PWD/flags/ZFS.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}
