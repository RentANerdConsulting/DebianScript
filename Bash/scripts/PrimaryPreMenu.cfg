# Function to update system to baseline configuration
baseLine()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/baseLine.txt ]; then
		echo "0" > $PWD/flags/baseLine.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/baseLine.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# edit grub config to display boot info
		filestoreplace[$filecount]=/etc/default/grub
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/GRUB_HIDDEN_TIMEOUT_QUIET=true/#GRUB_HIDDEN_TIMEOUT_QUIET=true/" /etc/default/grub || error_exit "$LINENO: Grub edit failed."
		#sudo sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=\"\"/GRUB_CMDLINE_LINUX_DEFAULT=\"text\"/" /etc/default/grub || error_exit "$LINENO: Grub edit failed."
		filecount=$((filecount+1))

		serverOrDesktop;

		# set command line as default interface
		sudo systemctl set-default multi-user.target || error_exit "$LINENO: Multi-user default setting failed."

		# allow source code to be downloaded for building packages if necessary
		filestoreplace[$filecount]=/etc/apt/sources.list
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/# deb http/deb http/" /etc/apt/sources.list || error_exit "$LINENO: Sources list edit failed."
		sudo sed -i "s/# deb-src http/deb-src http/" /etc/apt/sources.list || error_exit "$LINENO: Sources list edit failed."
		filecount=$((filecount+1))

		# update currently installed packages
		systemUpdateAndUpgrade;
		wait

		# install baseline required software
		sudo apt-get update && sudo apt-get -y install python dkms zlib1g-dev gcc make git traceroute autoconf autogen automake build-essential pkg-config curl ipset iprange plymouth-themes plymouth-label libsys-cpu-perl libsys-meminfo-perl clamav clamav-daemon apparmor-profiles apparmor-utils nmap rkhunter chkrootkit ntp sysstat lm-sensors hddtemp htop || error_exit "$LINENO: Installation failed."
		wait

		# call function to check if vm or physical system
		checkPhysicalSystem;
		wait

		# call function to install VirtualBox Guest Additions if installed on a VBox VM
		checkIfVirtualBox;
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/baseLine.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait

		# reboot if Guest Additions were installed
		if [ "$virtualbox" == 1 ]; then
			echo " "
			read -p "The system needs to be rebooted. Press enter to reboot."
			sudo reboot
		fi
	else
		return
	fi

	return
}


# Function to preconfigure system for installation of features
preInstall()
{
	echo " "
	echo "############ Checking prerequisites ############"
	echo "################################################"
	getExistingConfig;
	baseLine;
	setTimeZone;
	parseTimeZone;
	getClientName;
	getNewHostname;
	setNewHostname;
	setRootPass;
	getNetworkInterface;
	getSubnetInfo;
	hardenOperatingSystem;
	getFQDN;
	getEmailData;
	setEmail;
	installSecurity;
	systemLogs;
	enablePrimaryFirewall;

	return
}


# function to update to current version of script
versionUpdate()
{
	# Run updates required for script to function properly
	until [ "$installedversion" == "$currentversion" ]; do
		read installedversion < $PWD/flags/installedversion.txt || error_exit "$LINENO: Read failed."

		case $installedversion in
			# Version 1.0 to 1.1
			1.0 ) local pmsfw=""
				local ocfw=""

				# Move scripts
				if [ -e $PWD/ownCloudPermissionsLock.sh ]; then
					mv $PWD/ownCloudPermissionsLock.sh $PWD/scripts/ || error_exit "$LINENO: File move failed."
				fi

				if [ -e $PWD/ownCloudPermissionsUnlock.sh ]; then
					mv $PWD/ownCloudPermissionsUnlock.sh $PWD/scripts/ || error_exit "$LINENO: File move failed."
				fi

				# Add on/off flags for Webmin
				echo "on" > $PWD/flags/WEBMIN.txt || error_exit "$LINENO: File creation failed."

				# Read current installation status and add on/off flag files if ownCloud is installed.
				if [ -e $PWD/flags/setOwnCloudFirewall.txt ]; then
					read ocfw < $PWD/flags/setOwnCloudFirewall.txt || error_exit "$LINENO: Read failed."
					if [ "$ocfw" == 1 ] && [ ! -e $PWD/flags/ownCloudfw.txt ]; then
						echo "on" > $PWD/flags/ownCloudfw.txt || error_exit "$LINENO: File edit failed."
					fi
				fi

				# Read current installation status and add on/off flag files if Apache is installed.
				if [ -e $PWD/flags/setApacheFirewall.txt ]; then
					read ocfw < $PWD/flags/setApacheFirewall.txt || error_exit "$LINENO: Read failed."
					if [ "$ocfw" == 1 ] && [ ! -e $PWD/flags/WEBSERVER.txt ]; then
						echo "on" > $PWD/flags/WEBSERVER.txt || error_exit "$LINENO: File edit failed."
					fi
				fi

				# Read current installation status and add on/off flag files if Plex is installed.
				if [ -e $PWD/flags/setPlexFirewall.txt ]; then
					read pmsfw < $PWD/flags/setPlexFirewall.txt || error_exit "$LINENO: Read failed."
					if [ "$pmsfw" == 1 ] && [ ! -e $PWD/flags/PLEXFW.txt ]; then
						echo "on" > $PWD/flags/PLEXFW.txt || error_exit "$LINENO: File edit failed."
					fi
				fi

				# Add or toggle fail2ban Apache rules if necessary
				fail2banChange;

				# Update version flag
				echo "1.1" > $PWD/flags/installedversion.txt || error_exit "$LINENO: Read failed."

				# Make sure permissions are applied
				sudo chmod -R 770 $PWD || error_exit "$LINENO: File permissions edit failed."

				# Remove old script
				rm Install.sh;;

			# version 1.1 to 1.1.1
			1.1 ) # Fix on/off flags for Webmin
				local wm=""
				if [ -e $PWD/flags/WEBMIN.txt ]; then
					read wm < $PWD/flags/WEBMIN.txt || error_exit "$LINENO: Read failed."
					if [ "$wm" == "on" ]; then
						mv $PWD/flags/WEBMIN.txt $PWD/flags/WEBMINFW.txt || error_exit "$LINENO: File move failed."
						echo "1" > $PWD/flags/webmin.txt || error_exit "$LINENO: File creation failed."
						echo "1" > $PWD/flags/setWebminFirewall.txt || error_exit "$LINENO: File creation failed."
						echo "1" > $PWD/flags/webminInstall.txt || error_exit "$LINENO: File creation failed."
					fi
				fi
				
				# Update version flag
				echo "1.1.1" > $PWD/flags/installedversion.txt || error_exit "$LINENO: Read failed."

				# Make sure permissions are applied
				sudo chmod -R 770 $PWD || error_exit "$LINENO: File permissions edit failed.";;

			# version 1.1.1 to 1.1.2
			1.1.1 )	# Change VirtualBox flags and recheck VirtualBox install because I had a bad day
				# Check for physical server or VM
				if [ ! -e $PWD/flags/checkPhysicalSystem.txt ]; then
					local hosted=""
					read hosted < $PWD/flags/hostedserver.txt || error_exit "$LINENO: Read failed."
					if [ "$hosted" == "1" ] || [ "$virtualbox" == "1" ]; then
						physicalsystem=0
						echo $physicalsystem > $PWD/flags/physicalsystem.txt || error_exit "$LINENO: File creation failed."
						echo "1" > $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: File creation failed."
					else
						checkPhysicalSystem;
					fi
				fi

				if [ -e $PWD/flags/checkIfVirtualBox.txt ]; then
					mv $PWD/flags/checkIfVirtualBox.txt $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File move failed."
					local crct="n"
					until [ "$crct" == "y" ] ; do
						local vbox=""
						echo " "
						read -p "Is this OS installed on a VirtualBox VM? y/n : " vbox
						if [ "$vbox" == "y" ]; then
							crct="y"
							virtualbox="1"

						elif [ "$vbox" == "n" ]; then
							crct="y"
							virtualbox="0"

						else
							errorTracking;
						fi
					done
					echo $virtualbox > $PWD/flags/virtualboxvm.txt || error_exit "$LINENO: File creation failed."
				fi

				# check for HTTP port info
				if [ -e $PWD/flags/installApache.txt ] && [ ! -e $PWD/flags/getHTTPPorts.txt ]; then
					getHTTPPorts;

				# check if server or desktop
				

				# Update version flag
				echo "1.1.2" > $PWD/flags/installedversion.txt || error_exit "$LINENO: Read failed."

				# Make sure permissions are applied
				sudo chmod -R 770 $PWD || error_exit "$LINENO: File permissions edit failed.";;

			1.1.2 ) return;;

		esac
	done

	return
}


# function to ensure system is up to date and matches current version of the script
versionCheck()
{
	# Check to see if version file exists. If not, create it.
	if [ ! -e $PWD/flags ]; then
		mkdir -p $PWD/flags || error_exit "$LINENO: Folder creation failed."
	fi

	if [ -e $PWD/alreadyrun ]; then
		cp -R -a $PWD/alreadyrun/. $PWD/flags/ || error_exit "$LINENO: File copy failed."
		wait
		rm -R $PWD/alreadyrun
	fi

	if [ ! -e $PWD/flags/installedversion.txt ]; then
		echo "$currentversion" > $PWD/flags/installedversion.txt || error_exit "$LINENO: File creation failed."
	fi

	# Determine installed version of script
	read installedversion < $PWD/flags/installedversion.txt || error_exit "$LINENO: Read failed."
	if [ "$installedversion" == "$currentversion" ]; then
		return
	else
		versionUpdate;
	fi

	return
}
