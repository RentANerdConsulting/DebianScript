# Function to get primary network interface
getNetworkInterface()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNetworkInterface.txt ]; then
		echo "0" > $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Pull name of primary network interface for use in firewall rules
		nicname=$(ip route get 8.8.8.8 | awk '{print $5}') || error_exit "$LINENO: interface info read failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: File creation failed."
		echo $nicname > $PWD/flags/networkInterface.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to check if this is a vm or physical system
checkPhysicalSystem()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/checkPhysicalSystem.txt ]; then
		echo "0" > $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# check to see if system is vm or physical system
		until [ "$physicalsystem" == "1" ] || [ "$physicalsystem" == "0" ]; do
			dialog --cr-wrap --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Baseline Installation" --menu "Is this a VM or physical system?" 0 0 0 \
				1 "VM" \
				2 "Physical System" 2>"${INPUT}"

			menuselection=$(<"${INPUT}")

			case $menuselection in
				1 ) # set flag to vm state
					clear
					physicalsystem=0
					virttype="none";;

				2 ) # set flag to physical state
					physicalsystem=1
					dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Baseline Installation" --yesno "Is this system going to be used to host virtual machines?" 0 0
                                		case $? in
                                        		0 ) clear
								local cpu_virt_raw_1=$(cat /proc/cpuinfo | grep -a "flags" | grep -a -o "vmx" | sed 's/vmx/Yes/' | head --lines=1 | tail --lines=1)
								local cpu_virt_raw_2=$(cat /proc/cpuinfo | grep -a "flags" | grep -a -o "svm" | sed 's/svm/Yes/' | head --lines=1 | tail --lines=1)
								if [[ "$cpu_virt_raw_1" == "Yes" ]]; then
									virttype="Intel"

								elif [[ "$cpu_virt_raw_2" == "Yes" ]]; then
									virttype="AMD"

								else
									virttype="none"
								fi;;

                                        		1 ) clear
								virttype="none";;
                                		esac

				* ) errorTracking;;
			esac
		done

		# Store physical system flag
		echo $physicalsystem > $PWD/flags/physicalsystem.txt || error_exit "$LINENO: File edit failed."
		echo $virttype > $PWD/flags/virttype.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to get subnet info
getSubnetInfo()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getSubnetInfo.txt ]; then
		echo "0" > $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Pull primary network interface IP Address/subnet info assigned by DHCP
		local subnetmasktemp=$(ip -o -f inet addr show $nicname | awk '{print $4}') || error_exit "$LINENO: network info read failed."

		# split ip/subnet into two variables, subnetip and subnetmask
		local IFS=/
		set $subnetmasktemp
		subnetip=$1
		subnetmask=$2
		local IFS=

		if [ "$physicalsystem" == "0" ]; then
			# check to see if server is hosted by third party
			until [ "$hostedserver" == "0" ] || [ "$hostedserver" == "1" ]; do
				dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Baseline Installation" --menu "Is this a VM / server hosted by a third party,\nsuch as Amazon or Google?" 0 0 0 \
					1 "Self Hosted" \
					2 "Hosted by Third Party" 2>"${INPUT}"

				menuselection=$(<"${INPUT}")

				case $menuselection in
					1 ) hostedserver=0
						baseip=0

						# parse ipaddress and subnet info and output appropriate info for client subnet
						if [ "$subnetmask" -le 31 ] && [ "$subnetmask" -ge 24 ]; then
        						baseip=`echo $subnetip | cut -d"." -f1-3`
							subnetip=($baseip".0")
							netclassipv4="c"

						elif [ "$subnetmask" -le 23 ] && [ "$subnetmask" -ge 16 ]; then
        						baseip=`echo $subnetip | cut -d"." -f1-2`
							subnetip=($baseip".0.0")
							netclassipv4="b"

						elif [ "$subnetmask" -le 15 ] && [ "$subnetmask" -ge 8 ]; then
        						baseip=`echo $subnetip | cut -d"." -f1`
							subnetip=($baseip".0.0.0")
							netclassipv4="a"
						fi
						clear;;

					2 ) # flag set to prevent use of firewall rules and services for local lans
						hostedserver=1
						baseip=0

						# parse ipaddress and subnet info and output appropriate info for client subnet
						if [ "$subnetmask" == 32 ]; then
							baseip="$subnetip"
						fi
						clear;;

					* ) errorTracking;;
				esac
			done

		elif [ "$physicalsystem" == "1" ]; then
			hostedserver=0
			baseip=0

			# parse ipaddress and subnet info and output appropriate info for client subnet
			if [ "$subnetmask" -le 31 ] && [ "$subnetmask" -ge 24 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1-3`
				subnetip=($baseip".0")
				netclassipv4="c"

			elif [ "$subnetmask" -le 23 ] && [ "$subnetmask" -ge 16 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1-2`
				subnetip=($baseip".0.0")
				netclassipv4="b"

			elif [ "$subnetmask" -le 15 ] && [ "$subnetmask" -ge 8 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1`
				subnetip=($baseip".0.0.0")
				netclassipv4="a"
			fi
		fi

		# Store subnet adjusted IP address, CIDR netmask, base ip, and hosted flag
		echo $subnetip > $PWD/flags/subnetip.txt || error_exit "$LINENO: File edit failed."
		echo $subnetmask > $PWD/flags/subnetmask.txt || error_exit "$LINENO: File edit failed."
		echo $hostedserver > $PWD/flags/hostedserver.txt || error_exit "$LINENO: File edit failed."
		echo $baseip > $PWD/flags/baseip.txt || error_exit "$LINENO: File edit failed."
		echo $netclassipv4 > $PWD/flags/netclassipv4.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to get current ip address
getCurrentIP()
{
	# Pull name of primary network interface for use in firewall rules
	local nic=""
	nic=$(ip route get 8.8.8.8 | awk '{print $5}') || error_exit "$LINENO: interface info read failed."

	# Pull primary network interface IP Address/subnet info assigned by DHCP
	local subnetmasktemp=$(ip -o -f inet addr show $nic | awk '{print $4}') || error_exit "$LINENO: network info read failed."
	local tempip=""
	local tempmask=""

	# split ip/subnet into two variables, subnetip and subnetmask
	local IFS=/
	set $subnetmasktemp
	tempip=$1
	tempmask=$2
	local IFS=
	currentip="$tempip"
}
