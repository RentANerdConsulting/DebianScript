# Function to get primary network interface
getNetworkInterface()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNetworkInterface.txt ]; then
		echo "0" > $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Pull name of primary network interface for use in firewall rules
		nicname=$(ip route get 8.8.8.8 | awk '{print $5}') || error_exit "$LINENO: interface info read failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/getNetworkInterface.txt || error_exit "$LINENO: File creation failed."
		echo $nicname > $PWD/flags/networkInterface.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to check if this is a vm or physical system
checkPhysicalSystem()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/checkPhysicalSystem.txt ]; then
		echo "0" > $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# check to see if server is hosted by third party
		local psvm=""
		until [ "$psvm" == "vm" ] || [ "$psvm" == "physical" ]; do
			echo " "
			echo "Is this a VM or physical system?"
			echo " "
			read -p "Type vm or physical respectively: " psvm
			if [ "$psvm" == "vm" ]; then
				# set flag to vm state
				physicalsystem=0

			elif [ "$psvm" == "physical" ]; then
				# set flag to physical state
				physicalsystem=1

			else
				errorTracking;
			fi
		done

		# Store physical system flag
		echo $physicalsystem > $PWD/flags/physicalsystem.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/checkPhysicalSystem.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to get subnet info
getSubnetInfo()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getSubnetInfo.txt ]; then
		echo "0" > $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Pull primary network interface IP Address/subnet info assigned by DHCP
		local subnetmasktemp=$(ip -o -f inet addr show $nicname | awk '{print $4}') || error_exit "$LINENO: network info read failed."

		# split ip/subnet into two variables, subnetip and subnetmask
		local IFS=/
		set $subnetmasktemp
		subnetip=$1
		subnetmask=$2
		local IFS=

		if [ "$physicalsystem" == "0" ]; then
			# check to see if server is hosted by third party
			local hosted=""
			until [ "$hosted" == "y" ] || [ "$hosted" == "n" ]; do
				echo " "
				read -p "Is this a VM / server hosted by a third party, such as Amazon or Google? y/n: " hosted
				if [ "$hosted" == "y" ]; then
					# flag set to prevent use of firewall rules and services for local lans
					hostedserver=1

				elif [ "$hosted" == "n" ]; then
					hostedserver=0
					local baseip=0

					# parse ipaddress and subnet info and output appropriate info for client subnet
					if [ "$subnetmask" -le 31 ] && [ "$subnetmask" -ge 24 ]; then
        					baseip=`echo $subnetip | cut -d"." -f1-3`
						subnetip=($baseip".0")

					elif [ "$subnetmask" -le 23 ] && [ "$subnetmask" -ge 16 ]; then
        					baseip=`echo $subnetip | cut -d"." -f1-2`
						subnetip=($baseip".0.0")

					elif [ "$subnetmask" -le 15 ] && [ "$subnetmask" -ge 8 ]; then
        					baseip=`echo $subnetip | cut -d"." -f1`
						subnetip=($baseip".0.0.0")
					fi
				else
					errorTracking;
				fi
			done

		elif [ "$physicalsystem" == "1" ]; then
			hostedserver=0
			local baseip=0

			# parse ipaddress and subnet info and output appropriate info for client subnet
			if [ "$subnetmask" -le 31 ] && [ "$subnetmask" -ge 24 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1-3`
				subnetip=($baseip".0")

			elif [ "$subnetmask" -le 23 ] && [ "$subnetmask" -ge 16 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1-2`
				subnetip=($baseip".0.0")

			elif [ "$subnetmask" -le 15 ] && [ "$subnetmask" -ge 8 ]; then
        			baseip=`echo $subnetip | cut -d"." -f1`
				subnetip=($baseip".0.0.0")
			fi
		fi

		# Store subnet adjusted IP address, CIDR netmask, and hosted flag
		echo $subnetip > $PWD/flags/subnetip.txt || error_exit "$LINENO: File edit failed."
		echo $subnetmask > $PWD/flags/subnetmask.txt || error_exit "$LINENO: File edit failed."
		echo $hostedserver > $PWD/flags/hostedserver.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/getSubnetInfo.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}
