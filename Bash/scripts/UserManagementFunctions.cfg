# Function to display current GUI Sessions
showGUISessions()
{
	local sessions=""
	sessions=$(w | grep -e " tty[7-9]* " | sort)
	echo "$sessions"
}


# Function to display human non system users
showHumans()
{
	local humans=""
	humans=$(awk -F: '($3>=1000)&&($1!="nobody")&&($1!="vbox")&&($1!="libvirt-qemu"){print $1}' /etc/passwd)
	echo "$humans"
}


# Function to display existing users in group
showUsersInGroup()
{
	local userlist=""
        touch list.txt
        local str=$(cat /etc/group | grep -w $1 | cut -d : -f 4)
        local IFS=','
        read -ra usrgrp <<< "$str"
        for i in "${usrgrp[@]}"; do
                echo "$i" >> list.txt
        done
        userlist=$(cat list.txt)
        rm list.txt
        echo "$userlist"
}


# Function to display groups a user is in
showGroupsForUser()
{
	local grouplist=""
	grouplist=$(cat /etc/group | grep -w "$1" | cut -d : -f 1)
	echo "$grouplist"
}


# Function to feed group and user to showUsersInGroup and showGroupsForUser
userGroupInput()
{
	local user=""
	local group=""
	correct="n"

	case $1 in
		usersingroup ) echo " "
				read -p "Please enter the name of the group: " group
				group="$(translateToLowerCase $group)"
				echo " "
				read -p "You're searching for all users in $group, correct? y/n: " correct
				if [ "$correct" == "y" ]; then
					if [ "$(groupExists $group)" == 0 ]; then
						showUsersInGroup $group
					else
						errorTracking;
					fi
				else
					errorTracking;
				fi;;

		groupsforuser ) echo " "
				read -p "Please enter the name of the user: " user
				user="$(translateToLowerCase $user)"
				echo " "
				read -p "You're searching for all groups $user is a member of, correct? y/n: " correct
				if [ "$correct" == "y" ]; then
					if [ "$(userExists $user)" == 0 ]; then
						showGroupsForUser $user
					else
						errorTracking;
					fi
				else
					errorTracking;
				fi;;
	esac

	return
}


# Function to display users
showUsers()
{
	local sysuser=""

	case $userchoice in
		user-full ) sysuser=$(awk -F: '($3>=1000)&&($1!="nobody")' /etc/passwd);;

		user-name ) sysuser=$(awk -F: '($3>=1000)&&($1!="nobody"){print $1}' /etc/passwd);;

		system-full ) sysuser=$(awk -F: '($3<1000)' /etc/passwd);;

		system-name ) sysuser=$(awk -F: '($3<1000){print $1}' /etc/passwd);;

	esac

	userchoice=""

	echo "$sysuser"
}


# Function to display groups
showGroups()
{
	local sysgroup=""

	case $userchoice in
		group-full ) sysuser=$(cat /etc/group);;

		group-name ) sysuser=$(cut -d : -f 1 /etc/group);;

		group-share ) sysuser=$(cut -d : -f 1 /etc/group | grep -e '-share');;
	esac

	userchoice=""

	echo "$sysgroup"
}


# Function to check if user exists from menu
user_check()
{
	local user=""
	echo " "
	read -p "Enter the user you wish to verify exists: " user
	user="$(translateToLowerCase $user)"
	echo " "	
	case "$(userExists $user)" in
		0 ) if [ "$(verifyMemberofGroup $user sudo)" == 0 ] && [ "$(verifyMemberofGroup $user admin)" == 0 ]; then
				echo "$user is a valid administrator user."
			else
				echo "$user is a valid standard user."
			fi;;

		* ) echo "$user is not a valid user.";;
	esac

	echo " "
	read -p "Press enter to return to the menu. "
	return
}


# Function to check if group exists from menu
group_check()
{
	local group=""
	echo " "
	read -p "Enter the group you wish to verify exists: " group
	group="$(translateToLowerCase $group)"
	echo " "	
	case "$(groupExists $group)" in
		0 ) echo "$group is a valid group.";;

		* ) echo "$group is not a valid group.";;
	esac

	echo " "
	read -p "Press enter to return to the menu. "
	return
}


# Function to check if user is a member of specific group from menu
user_group_check()
{
	local user=""
	local group=""
	echo " "
	read -p "Enter the user you wish to check: " user
	user="$(translateToLowerCase $user)"
	echo " "
	read -p "Enter the group you wish to check if $user is a member of: " group
	group="$(translateToLowerCase $group)"
	echo " "	
	case "$(verifyMemberofGroup $user $group)" in
		0 ) echo "$user is a valid user and is a member of $group.";;

		1 ) echo "$user is a valid user, but is not a valid member of the valid group $group.";;

		user ) echo "$user is not a valid user, but $group is a valid group.";;

		group ) echo "$user is a valid user, but $group is not a valid group.";;

		both ) echo "$user is not a valid user, and $group is not a valid group.";;

		* ) echo "error";;
	esac

	echo " "
	read -p "Press enter to return to the menu. "
	return
}


# Function to add additional administrators
addAdditionalAdmins()
{
	local anykey=0
	correct="y"
	local sudousername=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add additional administrator accounts ############"
		echo "###############################################################"
		echo " "
		read -p "Would you like to add another administrator account? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			echo "List of current Administrators:"
			echo " "
			showUsersInGroup admin;
			echo " "
			echo "List of current human users. Cyborgs, Androids, AIs, and other artificial lifeforms are not included."
			echo "To include these other lifeforms, please see the menu selections titled 'Display non system users':"
			echo " "
			showHumans;
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " sudousername
			sudousername="$(translateToLowerCase $sudousername)"
			echo " "
			read -p "Is this correct? $sudousername y/n: " correct

			# verify user is not already an admin
			if [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $sudousername sudo)" != 0 ] && [ "$(verifyMemberofGroup $sudousername admin)" != 0 ]; then

				# Create passwords in keepass
				if [ "$(userExists $sudousername)" != 0 ]; then
					echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
					echo " "
					echo "Log the user password as $clientname -> $hostname -> $sudousername, with user name $sudousername, as it may be needed later for maintenance."
        				echo " "
				fi
				
				lastuser="$sudousername"

				if [ "$(userExists $sudousername)" != 0 ]; then
					# create user
					sudo adduser $sudousername || error_exit "$LINENO: adduser failed."
				fi

				# add user to sudo group
				sudo adduser $sudousername sudo || error_exit "$LINENO: adduser sudo failed."

				# add user to Admin group
				sudo usermod -a -G admin $sudousername || error_exit "$LINENO: adduser admin failed."
				lastuser=""

			# Fix broken admin group... admin
			elif [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $sudousername sudo)" == 0 ] && [ "$(verifyMemberofGroup $sudousername admin)" != 0 ]; then
				errorTracking;
				local fix=""
				echo " "
				echo "The account you're attempting to add is already an administrator account, but only a member of the sudo group."
				echo " "
				read -p "Type f to fix (add $sudousername to admin group), anything else to leave it as is. f/x: " fix
				if [ "$fix" == "f" ]; then
					# add user to Admin group
					sudo usermod -a -G admin $sudousername || error_exit "$LINENO: adduser admin failed."
				fi

			# Fix broken sudo group admin
			elif [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $sudousername sudo)" != 0 ] && [ "$(verifyMemberofGroup $sudousername admin)" == 0 ]; then
				errorTracking;
				local fix=""
				echo " "
				echo "The account you're attempting to add is already an administrator account, but only a member of the admin group."
				echo " "
				read -p "Type f to fix (add $sudousername to sudo group), anything else to leave it as is. f/x: " fix
				if [ "$fix" == "f" ]; then
					# add user to sudo group
					sudo adduser $sudousername sudo || error_exit "$LINENO: adduser sudo failed."
				fi

			# Admin is having a bad day
			elif [ "$correct" == "y" ] && [ "$sudousername" == "$currentuser" ]; then
				errorTracking;
				echo " "
				echo "The account you're attempting to add is the account you're currently"
				echo "using, and is already an administrator account."
				echo " "
				read -p "Take a moment to think that over, and press enter when you're ready to try again. " anykey

			# User is already an admin
			elif [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $sudousername sudo)" == 0 ] && [ "$(verifyMemberofGroup $sudousername admin)" == 0 ]; then
				errorTracking;
				echo " "
				echo "The account you're attempting to add is already a properly configured administrator account."
				read -p "Take a moment to think that over, and press enter when you're ready to try again. " anykey

			else
				errorTracking;
			fi

		else
			echo " "
		fi
	done

	return
}


# Function to add additional users
addAdditionalUsers()
{
	correct="y"
	local user=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add additional user accounts ############"
		echo "######################################################"
		echo " "
		read -p "Would you like to add another user account? y/n: " correct
		if [ "$correct" == "y" ]; then
			if [ "$createsambauser" == 1 ]; then
				echo " "
				echo "List of current Samba users:"
				echo " "
				showUsersInGroup smbgrp;
			fi
			echo " "
			echo "List of current human users. Cyborgs, Androids, AIs, and other artificial lifeforms are not included."
			echo "To include these other lifeforms, please see the menu selections titled 'Display non system users':"
			echo " "
			showHumans;
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " user
			user="$(translateToLowerCase $user)"
			echo " "
			read -p "Is this correct? $user y/n: " correct

			# create standard user
			if [ "$correct" == "y" ] && [ "$createsambauser" != 1 ] && [ "$(userExists $user)" != 0 ]; then
				echo " "
				echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
        			echo " "
        			echo "Log this password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				read -p "When the password is saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					lastuser="$user"

					# create user
					sudo adduser $user || error_exit "$LINENO: adduser failed."
					lastuser=""
				else
					errorTracking;
				fi

			# Admin is asleep
			elif [ "$correct" == "y" ] && [ "$createsambauser" != 1 ] && [ "$user" == "$currentuser" ]; then
				errorTracking;
				echo " "
				echo "You're trying to add yourself as a new user..."
				echo " "
				echo "Let's try that again, m'kay?"

			# Admin didn't do his homework
			elif [ "$correct" == "y" ] && [ "$createsambauser" != 1 ] && [ "$(userExists $user)" == 0 ]; then
				errorTracking;
				echo " "
				echo "User already exists."

			# Create new user and/or samba profile
			elif [ "$correct" == "y" ] && [ -e $PWD/flags/samba.txt ] && [ "$createsambauser" == 1 ] && [ "$(verifyMemberofGroup $user smbgrp)" != 0 ]; then
				echo " "

				# if user doesn't exist, create a password
				if [ "$(userExists $user)" != 0 ]; then
					echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
					echo " "
					echo "Log the user password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
        				echo " "
					echo "$user will be created first, then added to the Samba group. Please copy and paste the appropriate passwords when prompted."
					echo " "
				fi

				# generate password for samba user profile
				echo "Generate random password for the new Samba group user account, or save the one supplied by the user, using Keepass2."
				echo " "
        			echo "Log the Samba group user password as $clientname -> $hostname -> Samba -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				echo "$user will be added to the Samba group. Please copy and paste the appropriate passwords when prompted."
				echo " "
				read -p "When the password/s is/are saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					local sambadirectory=""
					lastuser="$user"
					
					# add new standard user
					if [ "$(userExists $user)" != 0 ]; then
						sudo adduser $user || error_exit "$LINENO: adduser failed."
					fi

					# Add user to samba group
					sudo adduser $user smbgrp || error_exit "$LINENO: adduser failed."

					# create samba password for user
					sudo smbpasswd -a $user || error_exit "$LINENO: Setting Samba password failed."

					lastuser=""

					# check to see if samba directory has been created
					if [ ! -e $PWD/flags/sambaDir.txt ]; then
						correct="n"
						until [ "$correct" == "y" ]; do
							echo " "
							echo "Please enter the parent directory structure to create for the new Samba user, starting from root,"
							echo "ie: /StorageArray/SambaShares"
							echo " "
							echo "This would create directory /StorageArray/SambaShares/$user and apply permissions."
							echo " "
							read -p "Please enter the parent directory structure: " sambadirectory
							echo " "
							read -p "Is this correct? $sambadirectory/$user y/n: " correct
							if [ "$correct" == "y" ]; then
								echo "$sambadirectory" > $PWD/flags/sambaDir.txt || error_exit "$LINENO: File creation failed."
								sambadir="$sambadirectory"
							else
								errorTracking;
							fi
						done

					elif [ -e $PWD/flags/sambaDir.txt ]; then
						sambadirectory="$sambadir"
					fi

					# Create Samba parent and user folders
					sudo mkdir -p $sambadirectory/$user || error_exit "$LINENO: Folder creation failed ."

					# Apply file and folder permissions
					sudo chmod -R 755 $sambadirectory/$user || error_exit "$LINENO: Setting folder permisions failed."

					# Apply file and folder ownership
					sudo chown $user:smbgrp $sambadirectory/$user || error_exit "$LINENO: Setting folder ownership failed."

					# backup samba conf file, then append user and share info to the end of the file
					filestoreplace[$filecount]=/etc/samba/smb.conf
					sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
					sudo chmod 777 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
					sudo printf "\n\n[$user]" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\npath = $sambadirectory/$user" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nvalid users = $user @smbgrp" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nguest ok = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nread only = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nbrowsable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nwritable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\ncreate mask = 0755" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\ndirectory mask = 0755" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo chmod 644 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
					filecount=$((filecount+1))

					# Remove backed up file before moving on
					cleanUpSuccessful;
					wait
				else
					errorTracking;
				fi

			# User already a member
			elif [ "$correct" == "y" ] && [ -e $PWD/flags/samba.txt ] && [ "$createsambauser" == 1 ] && [ "$(verifyMemberofGroup $user smbgrp)" == 0 ]; then
				errorTracking;
				echo " "
				echo "$user is already a member of the Samba group."

			# Samba not installed
			elif [ "$correct" == "y" ] && [ ! -e $PWD/flags/samba.txt ] && [ "$createsambauser" == 1 ]; then
				errorTracking;
				echo " "
				echo "Samba is not installed."
				echo " "
				echo "Please install Samba from the main menu."
			else
				correct="y"
				errorTracking;
			fi
		fi
	done

	useraddoops=0
	return
}


# Add group
addGroup()
{
	correct="y"
	local group=""
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Create new group ############"
		echo "##########################################"
		echo " "
		read -p "Would you like to create a new group? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			echo "List of current groups:"
			echo " "
			userchoice="group-name"
			showGroups;
			echo " "
			echo " "
			read -p "Please enter the name of the group you wish to create, in lowercase: " group
			group="$(translateToLowerCase $group)"
			echo " "
			read -p "Is this correct? $group y/n: " correct
			# Good to go
			if [ "$correct" == "y" ] && [ "$(groupExists $group)" != 0 ]; then
				# create group
				sudo addgroup $group || error_exit "$LINENO: addgroup failed."

			# Admin didn't do his homework
			elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ]; then
				errorTracking;
				echo " "
				echo "$group already exists."
				echo " "
			else
				errorTracking;
			fi
		else
			echo " "
		fi
	done

	return
}


# Add user to group
addUserToGroup()
{
	correct="y"
	local user=""
	local group=""
	local next=""
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add user to existing group ############"
		echo "####################################################"
		echo " "
		read -p "Would you like to add a user to a group? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			echo "List of current human users. Cyborgs, Androids, AIs, and other artificial lifeforms are not included."
			echo "To include these other lifeforms, please see the menu selections titled 'Display non system users':"
			echo " "
			showHumans;
			echo " "
			read -p "Please enter the username of the user you wish to add to a group, in lowercase: " user
			user="$(translateToLowerCase $user)"
			echo " "
			read -p "Is this correct? $user y/n: " correct
			# Good to go
			if [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ]; then
				echo " "
				echo "Let's select a group, then."
				next="y"

			# Admin didn't do his homework
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" != 0 ]; then
				errorTracking;
				echo " "
				echo "User does not exist."
				echo " "
				read -p "Would you like to create a new user? y/n: " correct
				if [ "$correct" == "y" ]; then
					echo " "
					echo "To create an administrator user, type admin at the prompt."
					echo " "
					echo "To create an standard user, type user at the prompt."
					echo " "
					echo " "
					read -p "Would you like to create an admin or standard user? admin/user: " correct
					if [ "$correct" == "admin" ]; then
						addAdditionalAdmins;
						correct="y"
						next="y"
					elif [ "$correct" == "user" ]; then
						addAdditionalUsers;
						correct="y"
						next="y"
					else
						errorTracking;
					fi
				else
					errorTracking;
				fi
			else
				errorTracking;
			fi
		else
			echo " "
		fi

		# Select a group, now that the user has been verified or created
		if [ "$next" == "y" ] && [ "$(userExists $user)" == 0 ]; then
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "List of current groups:"
				echo " "
				userchoice="group-name"
				showGroups;
				echo " "
				echo " "
				read -p "Please enter the name of the group you wish to add the user to, in lowercase: " group
				group="$(translateToLowerCase $group)"
				echo " "
				read -p "Is this correct? $group y/n: " correct
				# Good to go
				if [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(groupExists $group)" == 0 ] && [ "$(verifyMemberofGroup $user $group)" != 0 ]; then
					# Add user to group
					sudo adduser $user $group || error_exit "$LINENO: adduser failed."

				# Group doesn't exist
				elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(groupExists $group)" != 0 ]; then
					errorTracking;
					echo " "
					echo "Group does not exist."
					echo " "
					read -p "Would you like to create a new group? y/n: " correct
					if [ "$correct" == "y" ]; then
						addGroup;
						correct="y"
					else
						errorTracking;
					fi

				# Admin didn't do his homework
				elif [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $user $group)" == 0 ]; then
					errorTracking;
					echo " "
					echo "$user is already a member of $group."
				else
					errorTracking;
				fi
			done
		fi
	next=""

	done

	return
}


# Function to remove users
removeUser()
{
	correct="y"
	local imsure=""
	local user=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Remove user account ############"
		echo "#############################################"
		echo " "
		read -p "Would you like to remove a user account? y/n: " correct
		if [ "$correct" == "y" ]; then
			# Determine user to remove
			echo " "
			echo "List of current human users. Cyborgs, Androids, AIs, and other artificial lifeforms are not included."
			echo "To include these other lifeforms, please see the menu selections titled 'Display non system users':"
			echo " "
			showHumans;
			echo " "
			echo " "
			read -p "Please enter the user you wish to remove: " user
			user="$(translateToLowerCase $user)"
			echo " "
			read -p "Is this correct? $user y/n: " correct

			# Make sure user is valid
			if [ "$correct" == "y" ] && [ "$(userExists $user)" != 0 ]; then
				echo " "
				echo "$user is not a valid user."

			# If valid user but is system user
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(cat $PWD/Scripts/SystemUserList | grep -w $user | cut -d : -f 1)" == "$user" ]; then
				echo " "
				echo "$user is a system configured user or a user created for an application to work."
				echo " "
				echo "If you really need to remove this user, you need to either remove the application it's for,"
				echo "or remove the user manually, and at your own risk."

			# If valid user and not system user
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(cat $PWD/Scripts/SystemUserList | grep -w $user | cut -d : -f 1)" != "$user" ]; then

				# Make sure user is not current user
				if [ "$user" != "$currentuser" ]; then
					
					# Derp detection
					echo " "
					echo "Are you absolutely sure you want to remove $user?"
					echo " "
					echo "Doing this will remove all files, home folders, etc for $user"
					echo " "
					echo "If you're sure you want to delete $user's account and files, type imsure."
					echo " "
					echo "If you only wish to remove the user, and leave the files intact, type useronly."
					echo " "
					read -p "Typing anything else will return you to the first prompt. :" imsure
					if [ "$imsure" == "imsure" ]; then
						# remove user files and user
						sudo deluser --remove-home $user
					elif [ "$imsure" == "useronly" ]; then
						# remove user only, leave files intact
						sudo deluser $user
					else
						errorTracking;
						echo " "
						echo "Whew! Close call."
					fi

				# Dumb admin detection
				elif [ "$user" == "$currentuser" ]; then
					errorTracking;
					echo " "
					echo "No can do, Buckaroo."
					echo " "
					echo "You're not ghosting yourself on my watch."

				fi
			else
				errorTracking;
			fi
		fi
	done

	return
}


# Remove user from group
removeUserFromGroup()
{
	correct="y"
	local user=""
	local group=""
	local next=""
	local sure=""
	local killitwithfire=""
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Remove user from an existing group ############"
		echo "############################################################"
		echo " "
		read -p "Would you like to remove a user from a group? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			echo "List of current human users. Cyborgs, Androids, AIs, and other artificial lifeforms are not included."
			echo "To include these other lifeforms, please see the menu selections titled 'Display non system users':"
			echo " "
			showHumans;
			echo " "
			read -p "Please enter the username of the user you wish to remove from a group, in lowercase: " user
			user="$(translateToLowerCase $user)"
			echo " "
			read -p "Is this correct? $user y/n: " correct

			# Admin didn't do his homework
			if [ "$correct" == "y" ] && [ "$(userExists $user)" != 0 ]; then
				errorTracking;
				echo " "
				echo "$user is not a valid user."
				next="n"

			# If valid user but is system user
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(cat $PWD/Scripts/SystemUserList | grep -w $user | cut -d : -f 1)" == "$user" ]; then
				echo " "
				echo "$user is a system configured user or a user created for an application to work."
				echo "It is likely assigned to a group as part of a standard configuration."
				echo " "
				echo "If you really need to remove this user from a group, you likely need to either remove"
				echo "the application it's for, or remove the user manually, and at your own risk."
				next="n"

			# If user is current user
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$user" == "$currentuser" ]; then
				echo " "
				read -p "Are you absolutely certain you want to remove yourself from a group? y/n: " sure
				if [ "$sure" == "y" ]; then
					echo " "
					echo "Let's select a group, then."
					next="y"
				else
					next="n"
				fi

			# Good to go
			elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$user" != "$currentuser" ] && [ "$(cat $PWD/Scripts/SystemUserList | grep -w $user | cut -d : -f 1)" != "$user" ]; then
				echo " "
				echo "Let's select a group, then."
				next="y"

			else
				errorTracking;
			fi
		fi

		# Select a group, now that the user has been verified or created
		if [ "$next" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(cat $PWD/Scripts/SystemUserList | grep -w $user | cut -d : -f 1)" != "$user" ]; then
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "List of current groups:"
				echo " "
				userchoice="group-name"
				showGroups;
				echo " "
				echo " "
				read -p "Please enter the name of the group you wish to add the user to, in lowercase: " group
				group="$(translateToLowerCase $group)"
				echo " "
				read -p "Is this correct? $group y/n: " correct

				# Group doesn't exist
				if [ "$correct" == "y" ] && [ "$(groupExists $group)" != 0 ]; then
					errorTracking;
					echo " "
					echo "Group does not exist."
					correct="n"
					killitwithfire=0

				# Admin didn't do his homework
				elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ] && [ "$(verifyMemberofGroup $user $group)" != 0 ]; then
					errorTracking;
					echo " "
					echo "$user is not a member of $group."
					killitwithfire=0

				# Group is a system group
				elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ] && [ "$(cat $PWD/Scripts/SystemGroupList | grep -w $group | cut -d : -f 1)" == "$group" ]; then
					errorTracking;
					echo " "
					echo "$group is a system configured group, or a group created by an application to work."
					echo "$user was likely assigned to $group as part of a configuration by an admin."
					echo " "
					read -p "Are you absolutely certain you want to remove $user from $group? y/n: " sure
					if [ "$sure" == "y" ]; then
						killitwithfire=1
					else
						killitwithfire=0
					fi

				# Good to go
				elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ] && [ "$(cat $PWD/Scripts/SystemGroupList | grep -w $group | cut -d : -f 1)" != "$group" ]; then
					echo " "
					read -p "Are you absolutely certain you want to remove $user from $group? y/n: " sure
					if [ "$sure" == "y" ]; then
						killitwithfire=1
					else
						killitwithfire=0
					fi

				else
					errorTracking;
				fi
			done
		fi

		if [ "$correct" == "y" ] && [ "$next" == "y" ] && [ "$sure" == "y" ] && [ "$killitwithfire" == 1 ]; then
			sudo deluser $user $group || error_exit "$LINENO: Removal of user from group failed."
		fi

	killitwithfire=0
	next=""

	done

	return
}


# Remove group
removeGroup()
{
	correct="y"
	local group=""
	local killitwithfire=""
	local groupdisplay=$(showGroups)
	userchoice="group-name"
	until [ "$correct" == "n" ]; do
		dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --yesno "Would you like to remove an existing group?" 0 0

		case $? in
			0 ) dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --inputbox "List of current groups:\n$groupdisplay\n\nPlease enter the name of the group you wish to remove, in lowercase: " 0 0 2>"${INPUT}"

               			group=$(<"${INPUT}")
				group=$(translateToLowerCase $group)

				dialog --cr-wrap --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --yesno "Is this correct? : $group" 0 0

				case $? in
					0 ) # Group doesn't exist
						if [ "$(groupExists $group)" != 0 ]; then
							dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --msgbox "$group does not exist." 0 0
							errorTracking;

						# check group for users and/or if system group
						elif [ "$(groupExists $group)" == 0 ]; then
							touch $PWD/list.txt
							local str=$(cat /etc/group | grep -w $group | cut -d : -f 4)
							local IFS=','
							read -ra usrgrp <<< "$str"
							for i in "${usrgrp[@]}"; do
								echo "$i" >> $PWD/list.txt
							done

							# If group is a system group
       							if [ "$(cat $PWD/Scripts/SystemGroupList | grep -w $group | cut -d : -f 1)" == "$group" ]; then
								killitwithfire=0
								dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --msgbox "You're trying to remove a system group, dingbat.\nTry again." 0 0

							# If group has users and is not a system group
							elif [ -s $PWD/list.txt ] && [ "$(cat $PWD/Scripts/SystemGroupList | grep -w $group | cut -d : -f 1)" != "$group" ]; then

								local readlist="$(cat $PWD/list.txt)"
								dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --yesno "$group has users in it.\n\nUsers in $group:\n$readlist\n\nAre you absolutely certain you want to remove $group?" 0 0
									case $? in
										0 ) killitwithfire=1
											dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --yesno "Would you like to save the list of users for referrence,\nbefore removing $group?" 0 0
												case $? in
													0 ) cp $PWD/list.txt $PWD/$group-userlist.txt || error_exit "$LINENO: File copy failed."
														dialog --cr-wrap --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --msgbox "File saved as $PWD/$group-userlist.txt" 0 0;;
													1 ) ;;
												esac
										1 ) killitwithfire=0;;
									esac

							# If group is empty and not a system group
       							elif [ ! -s $PWD/list.txt ] && [ "$(cat /etc/group | grep -w $group | cut -d : -f 1)" == "$group" ] && [ "$(cat $PWD/Scripts/SystemGroupList | grep -w $group | cut -d : -f 1)" != "$group" ]; then

								dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Remove Existing Group" --yesno "$group is empty.\n\nAre you absolutely certain you want to remove $group?" 0 0
									case $? in
										0 ) killitwithfire=1;;
										1 ) killitwithfire=0;;
									esac
       							else
               							errorTracking;
       							fi

							rm $PWD/list.txt

							if [ "$killitwithfire" == 1 ]; then
								sudo delgroup $group || error_exit "$LINENO: Removal of group failed."
							fi

						else
               						errorTracking;
       						fi

					1 ) errorTracking;;
				esac

			1 ) correct="n";;
		esac
	done
}
