# Function to gather info about administrator email configuration
getEmailData()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getEmailData.txt ]; then
		echo "0" > $PWD/flags/getEmailData.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getEmailData.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input administrator email information ############"
			echo "###############################################################"
			echo " "
			read -p "Enter administrator email address, ie: somecallme.tim@gmail.com: " smtplogin
			echo " "
			echo "Email address: $smtplogin"
			smtplogin="$(translateToLowerCase $smtplogin)"
			echo " "
			read -p "Is this correct? y/n: " correct
			if [ "$correct" == "y" ]; then
				echo " "
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getEmailData.txt || error_exit "$LINENO: File edit failed."
		echo $smtplogin > $PWD/flags/AdminEmail.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to check if site hostnames are already used
checkSubDomainDKIM()
{
	local exists=""
	# Verify Apache is installed
	if [ -e $PWD/flags/installApache.txt ] && [ -e $PWD/flags/installDKIM.txt ]; then
		exists="$(grep -w $1 /etc/opendkim/key.table > /dev/null 2>&1; echo $?)"
	fi

	echo "$exists"
}


# Function to add subdomains to DKIM
addSubDomainDKIM()
{
	# Verify Apache is installed
	if [ -e $PWD/flags/installApache.txt ] && [ -e $PWD/flags/installDKIM.txt ] && [ "$(checkSubDomainDKIM $1)" != 0 ]; then

		# insert new hostname into key table
		filestoreplace[$filecount]=/etc/opendkim/key.table
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "3 a\\$hostname.\_domainkey.$2   $1.$2\:$hostname\:\/etc\/opendkim\/keys\/$2\/$hostname.private" /etc/opendkim/key.table || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# insert new hostname into signing table
		filestoreplace[$filecount]=/etc/opendkim/signing.table
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "3 a\\*\@$1.$2 $hostname.\_domainkey.$2" /etc/opendkim/signing.table || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait

	else
		return
	fi

	return
}


# Function to install and configure DKIM e-mail verification
installDKIM()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installDKIM.txt ]; then
		echo "0" > $PWD/flags/installDKIM.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installDKIM.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "###### DKIM and SPF configuration to prevent e-mail spam filtering ######"
		echo "#########################################################################"
		echo " "

		# install software
		sudo apt-get update && sudo apt-get install -y opendkim opendkim-tools || error_exit "$LINENO: Installation failed."

		# add postfix user to opendkim group
		sudo usermod -a -G opendkim postfix || error_exit "$LINENO: User mod failed."

		# create directories and assign privileges
		sudo mkdir -p /etc/opendkim/keys/$domainname || error_exit "$LINENO: Folder creation failed."
		sudo chown -R opendkim:opendkim /etc/opendkim || error_exit "$LINENO: Permissions edit failed."
		sudo chmod go-rw /etc/opendkim/keys || error_exit "$LINENO: Permissions edit failed."

		sudo mkdir /var/spool/postfix/opendkim || error_exit "$LINENO: Folder creation failed."
		sudo chown opendkim:postfix /var/spool/postfix/opendkim || error_exit "$LINENO: Permissions edit failed."

		# edit opendkim configuration file
		filestoreplace[$filecount]=/etc/opendkim.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.orig || error_exit "$LINENO: File backup failed."
		sudo chmod 777 /etc/opendkim.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo truncate -s 0 /etc/opendkim.conf || error_exit "$LINENO: truncate file failed."
		sudo printf "Syslog\t\t\tyes" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nUMask\t\t\t002" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nCanonicalization\trelaxed/simple" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nMode\t\t\tsv" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSubDomains\t\tyes" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nAutoRestart\t\tyes" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nAutoRestartRate\t\t10/1H" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nBackground\t\tyes" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nDNSTimeout\t\t5" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSignatureAlgorithm\trsa-sha256" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nOversignHeaders\t\tFrom" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nTrustAnchorFile\t\t/usr/share/dns/root.key" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nUserID\t\t\topendkim" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nKeyTable\t\t/etc/opendkim/key.table" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSigningTable\t\trefile:/etc/opendkim/signing.table" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nExternalIgnoreList\t/etc/opendkim/trusted.hosts" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nInternalHosts\t\t/etc/opendkim/trusted.hosts" >> /etc/opendkim.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/opendkim.conf || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# Create signing table
		sudo echo '#starthere' | sudo tee /etc/opendkim/signing.table || error_exit "$LINENO: File creation failed."
		sudo sed -i "s/\#starthere/\*\@$domainname $hostname.\_domainkey.$domainname/" /etc/opendkim/signing.table || error_exit "$LINENO: File edit failed."
		sudo sed -i "/\\*\\@$domainname $hostname.\\_domainkey.$domainname/a\\*\\@$hostname.$domainname $hostname.\\_domainkey.$domainname" /etc/opendkim/signing.table || error_exit "$LINENO: File edit failed."

		# Create key file
		sudo echo '#starthere' | sudo tee /etc/opendkim/key.table || error_exit "$LINENO: File creation failed."
		sudo sed -i "s/\#starthere/$hostname.\_domainkey.$domainname	$domainname\:$hostname\:\/etc\/opendkim\/keys\/$domainname\/$hostname.private/" /etc/opendkim/key.table || error_exit "$LINENO: File edit failed."
		sudo sed -i "/$hostname.\\_domainkey.$domainname	$domainname\\:$hostname\\:\\/etc\\/opendkim\\/keys\\/$domainname\\/$hostname.private/a$hostname.\\_domainkey.$domainname	$hostname.$domainname\\:$hostname\\:\\/etc\\/opendkim\\/keys\\/$domainname\\/$hostname.private" /etc/opendkim/key.table || error_exit "$LINENO: File edit failed."

		# Create trusted hosts file
		sudo echo '127.0.0.1' | sudo tee /etc/opendkim/trusted.hosts || error_exit "$LINENO: File creation failed."
		sudo sed -i "/127.0.0.1/alocalhost" /etc/opendkim/trusted.hosts || error_exit "$LINENO: File edit failed."
		sudo sed -i "/localhost/a\\\n\\*.$domainname" /etc/opendkim/trusted.hosts || error_exit "$LINENO: File edit failed."

		# Generate key pair
		sudo opendkim-genkey -b 2048 -d $domainname -D /etc/opendkim/keys/$domainname -s $hostname -v || error_exit "$LINENO: Key creation failed."
		sudo chown opendkim:opendkim /etc/opendkim/keys/$domainname/$hostname.private || error_exit "$LINENO: Permissions edit failed."

		echo " "
		echo "The public key will be displayed on the screen."
		echo " "
		echo "$(sudo cat /etc/opendkim/keys/$domainname/$hostname.txt)"
		echo " "
		echo "Copy and paste everything between the parentheses into a text file, then remove"
		echo "all double quotes and white spaces. It should look something like this:"
		echo " "
		echo "v=DKIM1; k=rsa; p=key text (gibberish)"
		echo " "
		echo "Go to your DNS providers site and enter the reformatted key according the their instructions"
		echo "using '$hostname' or '$hostname._domainkey' as the selector, depending on the instructions."
		echo " "
		echo "DO NOT FORGET THE STEP ABOVE, OR DKIM SIGNING WILL NOT WORK!!!"
		echo " "
		echo "Also, take a moment to check the SPF record, and ensure it is correct."
		echo "They vary, but should look something like this: 'v=spf1 a mx ptr -all'"
		echo " "
		echo "When you're sure you've got it all configured properly, continue to the next steps."
		echo " "
		read -p "Press enter to continue: "

		# Test keys
		sudo opendkim-testkey -d $domainname -s $hostname -vvv || error_exit "$LINENO: key test failed."
		echo " "
		read -p "If 'key OK' is the last line displayed by the test above, press enter to continue: "

		# Finish setting up socket
		filestoreplace[$filecount]=/etc/default/opendkim
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/SOCKET\=\"local\:\/var\/run\/opendkim\/opendkim.sock\"/SOCKET\=\"local\:\/var\/spool\/postfix\/opendkim\/opendkim.sock\"/" /etc/default/opendkim || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Configure Postfix
		filestoreplace[$filecount]=/etc/postfix/main.cf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i '$ a # Milter configuration' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i '$ a # OpenDKIM' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i '$ a milter_default_action = accept' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i '$ a milter_protocol = 2' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i '$ a smtpd_milters = local:/opendkim/opendkim.sock' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i '$ a non_smtpd_milters = local:/opendkim/opendkim.sock' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Restart services
		sudo systemctl restart opendkim && sudo systemctl restart postfix

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/installDKIM.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to set email forwarding for root and webmaster system messages
setEmail()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/setEmail.txt ]; then
		echo "0" > $PWD/flags/setEmail.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/setEmail.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Enabling system administrator email forwarding ############"
		echo "########################################################################"
		echo " "

		# install logwatch and postfix for system monitoring emails to admins
		sudo apt-get -y install postfix mailutils logwatch libdate-manip-perl p7zip-full mutt swaks || error_exit "$LINENO: Installation failed."
		wait

		# Setting hostname (sender) info
		filestoreplace[$filecount]=/etc/postfix/main.cf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo chmod 777 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
		sudo sed -i "s/myhostname = *.*/myhostname = $fqdn/" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo printf "\nsmtp_use_tls=yes" >> /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/inet_interfaces = all/inet_interfaces = localhost/' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/relayhost =/#relayhost =/' /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo printf "\nmessage_size_limit=25600000" >> /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# Set aliases for email forwarding from system accounts
		filestoreplace[$filecount]=/etc/aliases
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo chmod 777 /etc/aliases || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\nroot: "$smtplogin"" >> /etc/aliases || error_exit "$LINENO: File edit failed."
		sudo printf "\nwebmaster: "$smtplogin"" >> /etc/aliases || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/aliases || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# activate aliases
		sudo newaliases || error_exit "$LINENO: Aliases activation failed."
		wait

		# restart postfix with new config
		sudo systemctl restart postfix.service || error_exit "$LINENO: Postfix restart failed."
		wait

		# test email by sending initial logwatch info
		sudo logwatch --detail Low --mailto $smtplogin --service all --range today || error_exit "$LINENO: email test failed."

		beenrun=1
		echo $beenrun > $PWD/flags/setEmail.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		if [ -e $PWD/flags/installApache.txt ]; then
			# Check to see if beenrun file exists. If not, create it.
			if [ ! -e $PWD/flags/setApacheEmail.txt ]; then
				echo "0" > $PWD/flags/setApacheEmail.txt || error_exit "$LINENO: File creation failed."
			fi
			local beenrun2=0

			# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
			read beenrun2 < $PWD/flags/setApacheEmail.txt || error_exit "$LINENO: Read failed."
			if [ "$beenrun2" != 1 ]; then

				# add directories to logwatch log path information
				filestoreplace[$filecount]=/usr/share/logwatch/default.conf/logwatch.conf
				sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
				sudo sed -i "/LogDir = \\/var\\/log/ a LogDir = \\/var\\/log\\/apache2" /usr/share/logwatch/default.conf/logwatch.conf || error_exit "$LINENO: File edit failed."
				filecount=$((filecount+1))

				# Setting security info and disable compatibility mode in postfix
				filestoreplace[$filecount]=/etc/postfix/main.cf
				sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
				sudo chmod 777 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
				sudo sed -i "s/ssl-cert-snakeoil.pem/$clientcertificate/" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
				sudo sed -i "s/ssl-cert-snakeoil.key/$clientkey/" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
				if [ -e $PWD/flags/cachainname.txt ]; then
					sudo sed -i "/$clientkey/asmtpd\\_tls\\_CAfile\\=\\/etc\\/ssl\\/certs\\/$clientcachain" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
				fi
				sudo printf "\ncompatibility_level=2" >> /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
				sudo chmod 644 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
				filecount=$((filecount+1))

				# restart postfix with new config
				sudo systemctl restart postfix.service || error_exit "$LINENO: Postfix restart failed."
				wait

				# test email by sending initial logwatch info
				sudo logwatch --detail Low --mailto $smtplogin --service all --range today || error_exit "$LINENO: email test failed."

				# Remove backed up files after complete
				cleanUpSuccessful;
				wait

				beenrun2=1
				echo $beenrun2 > $PWD/flags/setApacheEmail.txt || error_exit "$LINENO: File edit failed."

			else
				return
			fi

		fi

		return
	fi

	return
}

