# Function to input new hostname
getNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNewHostname.txt ]; then
		echo "0" > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Input New Hostname" --inputbox "Please choose a new appropriate hostname for the system.\n\nIt may be no more than 15 characters long, with letters, numbers,\nand no special characters except - or _ in order to be compatible\nwith NetBios naming schemes. It must be all lowercase.\n\nCreate a new group in KeePass in the systems primary group,\nusing this format: $clientname -> name_of_system, so name_of_system matches this hostname.\n\nAll password entries for this system will be placed inside this group.\n\nEnter new hostname, ie: ubuntu-server:" 0 0 2>"${INPUT}"
                		hostname=$(<"${INPUT}")
				hostname="$(translateToLowerCase $hostname)"
                        	dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Input New Hostname" --yesno "Is this correct? : $hostname" 0 0
                                	case $? in
                                       		0 ) clear
							correct="y"
							# Store translated hostname
							echo $hostname > $PWD/flags/hostname.txt  || error_exit "$LINENO: File creation failed.";;

                                        	1 ) correct="n";;

						* ) correct="n"
							errorTracking;;
                                	esac
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File edit failed."
	else
		# Check to see if file exists. If not, create it.
		if [ ! -e $PWD/flags/readHostName.txt ]; then
			echo "0" > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi

		beenrun=0

		# Read beenrun file. Run update cleanup if not run before, skip if it has been run already.
		read beenrun < $PWD/flags/readHostName.txt || error_exit "$LINENO: Read failed."
		if [ "$beenrun" != 1 ]; then
			systemCleanUp;
			wait

			beenrun=1
			echo $beenrun > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi
	fi

	return
}


# Function to set new hostname
setNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/setNewHostname.txt ]; then
		echo "0" > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0
	local oldhostname=""

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/setNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		read oldhostname < /etc/hostname || error_exit "$LINENO: Read failed."

		# Update system hostname file
		filestoreplace[$filecount]=/etc/hostname
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hostname || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Update hosts file with new hostname
		filestoreplace[$filecount]=/etc/hosts
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hosts || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files if completed succesfully
		cleanUpSuccessful;
		wait
		dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Setting New Hostname" --msgbox "Reboot is required. Press enter to continue." 0 0
		clear
		sudo reboot
	else
		return
	fi

	return
}


# function to display currently enabled hostnames
displayHostnames()
{
	local names="$(grep -w 127.0.1.1 /etc/hosts | cut -d ' ' -f 2)"

	echo "$names"
}


# Function to check if site hostnames are already used
checkSiteHostnames()
{
	local exists="$(grep -w $1 /etc/hosts > /dev/null 2>&1; echo $?)"
	
	echo "$exists"
}


# Function to set site hostnames
setSiteHostnames()
{
	# Verify Apache is installed
	if [ -e $PWD/flags/installApache.txt ] && [ "$(checkSiteHostnames $1)" != 0 ]; then
        	local textcomp="0"
        	local runtimes=0
        	local line1=""
        	local line2=""
        	until [ "$textcomp" == "" ]; do
                	runtimes=$(($runtimes+1))

                	# determine line number of localhost entry (this should always be the first entry)
                	line1=$(sed -n "/127.0.0.1/=" /etc/hosts)

			# determine next cumulative line number
			line2=$(($line1+$runtimes))

                	# read total lines after localhost
                	textcomp=$(sed -n "$line2"p /etc/hosts)

                	if [ "$textcomp" == "" ]; then
				sudo sed -i "${runtimes} a\127.0.1.1\t$1.$2 $1" /etc/hosts
			fi
		done
	else
		return
	fi

	return
}


# Function to get hostname for ownCloud virtualhost
getOwnCloudHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getOwnCloudHostname.txt ]; then
		echo "0" > $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		local displaynames="$(displayHostnames)"
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Input ownCloud Hostname" --inputbox "Please choose a new appropriate hostname for the ownCloud website.\n\nIt must be all lowercase, and not listed below.\n\n$displaynames\n\nIt will be used and displayed in reference to the site, and to access it.\nEG, owncloud.$domainname.\n\nEnter new hostname, ie: owncloud:" 0 0 2>"${INPUT}"
                		ochostname=$(<"${INPUT}")
				# Translate user input to all lower case to prevent ID10T errors
				ochostname="$(translateToLowerCase $ochostname)"
                        	dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Input ownCloud Hostname" --yesno "Is this correct? : $ochostname" 0 0
                                	case $? in
                                       		0 ) clear
							# make sure the hostname isn't already in use
							if [ "$(checkSiteHostnames $ochostname)" != 0 ]; then
								# Store translated hostname if not already in use
								correct="y"
								echo $ochostname > $PWD/flags/ochostname.txt  || error_exit "$LINENO: File creation failed."
							else
								dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Input ownCloud Hostname" --msgbox "$ochostname is already in use. Please select another hostname." 0 0
								correct="n"
								errorTracking;
							fi;;

                                        	1 ) correct="n";;

						* ) correct="n"
							errorTracking;;
                                	esac
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get hostname for phpvirtualbox virtualhost
getphpvbHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getphpvbHostname.txt ]; then
		echo "0" > $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		local displaynames="$(displayHostnames)"
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Input phpvirtualbox Hostname" --inputbox "Please choose a new appropriate hostname for the phpvirtualbox website.\n\nIt must be all lowercase, and not listed below.\n\n$displaynames\n\nIt will be used and displayed in reference to the site, and to access it.\nEG, phpvb.$domainname.\n\nEnter new hostname, ie: phpvb:" 0 0 2>"${INPUT}"
                		phpvbhostname=$(<"${INPUT}")
				# Translate user input to all lower case to prevent ID10T errors
				phpvbhostname="$(translateToLowerCase $phpvbhostname)"
                        	dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Input phpvirtualbox Hostname" --yesno "Is this correct? : $phpvbhostname" 0 0
                                	case $? in
                                       		0 ) clear
							# make sure the hostname isn't already in use
							if [ "$(checkSiteHostnames $phpvbhostname)" != 0 ]; then
								# Store translated hostname if not already in use
								correct="y"
								echo $phpvbhostname > $PWD/flags/phpvbhostname.txt  || error_exit "$LINENO: File creation failed."
							else
								dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Input phpvirtualbox Hostname" --msgbox "$phpvbhostname is already in use. Please select another hostname." 0 0
								correct="n"
								errorTracking;
							fi;;

                                        	1 ) correct="n";;

						* ) correct="n"
							errorTracking;;
                                	esac
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get/set hostname for Netdata virtualhost
getNetdataHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNetdataHostname.txt ]; then
		echo "0" > $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		local displaynames="$(displayHostnames)"
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Input Netdata Hostname" --inputbox "Please choose a new appropriate hostname for the netdata website.\n\nIt must be all lowercase, and not listed below.\n\n$displaynames\n\nIt will be used and displayed in reference to the site, and to access it.\nEG, netdata.$domainname.\n\nEnter new hostname, ie: netdata:" 0 0 2>"${INPUT}"
                		ndhostname=$(<"${INPUT}")
				# Translate user input to all lower case to prevent ID10T errors
				ndhostname="$(translateToLowerCase $ndhostname)"
                        	dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Input Netdata Hostname" --yesno "Is this correct? : $ndhostname" 0 0
                                	case $? in
                                       		0 ) clear
							# make sure the hostname isn't already in use
							if [ "$(checkSiteHostnames $ndhostname)" != 0 ]; then
								# Store translated hostname if not already in use
								correct="y"
								echo $ndhostname > $PWD/flags/ndhostname.txt  || error_exit "$LINENO: File creation failed."
							else
								dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Input Netdata Hostname" --msgbox "$ndhostname is already in use. Please select another hostname." 0 0
								correct="n"
								errorTracking;
							fi;;

                                        	1 ) correct="n";;

						* ) correct="n"
							errorTracking;;
                                	esac
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get/set hostname for PHPMyAdmin virtualhost
getPHPMyAdminHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getPHPMyAdminHostname.txt ]; then
		echo "0" > $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		local displaynames="$(displayHostnames)"
		correct="n"
		until [ "$correct" == "y" ]; do
			dialog --cr-wrap --clear --no-ok --no-cancel --backtitle "Linux Configuration Utility" --title "Input PHPMyAdmin Hostname" --inputbox "Please choose a new appropriate hostname for the PHPMyAdmin website.\n\nIt must be all lowercase, and not listed below.\n\n$displaynames\n\nIt will be used and displayed in reference to the site, and to access it.\nEG, phpma.$domainname.\n\nEnter new hostname, ie: phpma:" 0 0 2>"${INPUT}"
                		phpmahostname=$(<"${INPUT}")
				# Translate user input to all lower case to prevent ID10T errors
				phpmahostname="$(translateToLowerCase $phpmahostname)"
                        	dialog --cr-wrap --clear --backtitle "Linux Configuration Utility" --title "Input PHPMyAdmin Hostname" --yesno "Is this correct? : $phpmahostname" 0 0
                                	case $? in
                                       		0 ) clear
							# make sure the hostname isn't already in use
							if [ "$(checkSiteHostnames $phpmahostname)" != 0 ]; then
								# Store translated hostname if not already in use
								correct="y"
								echo $phpmahostname > $PWD/flags/phpmahostname.txt  || error_exit "$LINENO: File creation failed."
							else
								dialog --cr-wrap --clear --no-cancel --backtitle "Linux Configuration Utility" --title "Input PHPMyAdmin Hostname" --msgbox "$phpmahostname is already in use. Please select another hostname." 0 0
								correct="n"
								errorTracking;
							fi;;

                                        	1 ) correct="n";;

						* ) correct="n"
							errorTracking;;
                                	esac
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}
