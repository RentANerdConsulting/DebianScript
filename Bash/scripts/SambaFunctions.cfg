# Function to download and install Samba
downInstSamba()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/downInstSamba.txt ]; then
		echo "0" > $PWD/flags/downInstSamba.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/downInstSamba.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# install samba and requirements
		sudo apt-get update && sudo apt-get install -y samba samba-common python-glade2 system-config-samba || error_exit "$LINENO: Installation failed."
		wait

		# Set user samba control file if GUI installed
		if [ "$guiorcli" == "gui" ]; then
			sudo touch /etc/libuser.conf || error_exit "$LINENO: File creation failed."
		fi

		# create samba user group
		sudo addgroup smbgrp || error_exit "$LINENO: addgroup failed."

		# set basic samba configuration
		filestoreplace[$filecount]=/etc/samba/smb.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo chmod 777 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo cat /dev/null > /etc/samba/smb.conf || error_exit "$LINENO: File truncate failed."
		sudo echo '# Global parameters' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo '[global]' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo "interfaces = $subnetip/$subnetmask" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'workgroup = WORKGROUP' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo "netbios name = $hostname" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'server string = Samba Server %v' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'security = user' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'map to guest = bad user' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'dns proxy = no' >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/downInstSamba.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


# Function to add users to Samba group and create their folders
sambaAddUsers()
{
	createsambauser=1
	useraddoops=1

	# call function to add samba users
	until [ "$useraddoops" == "0" ]; do
		addAdditionalUsers;
		wait
	done

	# restart samba
	sudo service smbd reload || error_exit "$LINENO: Service reload failed."
	wait

	# test and display configuration
	sudo testparm || error_exit "$LINENO: samba parameter test failed."
	createsambauser=0

	# Remove backed up files after complete
	cleanUpSuccessful;
	wait

	return
}


# Create Samba share group
addSambaShareGroup()
{
	if [ -e $PWD/flags/samba.txt ]; then	
		correct="y"
		local group=""
		until [ "$correct" == "n" ]; do
			echo " "
			echo "############ Create a new group for a group Samba share ############"
			echo "####################################################################"
			echo " "
			read -p "Would you like to create a new Samba share group? y/n: " correct
			if [ "$correct" == "y" ]; then
				echo " "
				echo "List of current Samba share groups:"
				echo " "
				userchoice="group-share"
				showGroups;
				echo " "
				echo "-share will be appended to the end of the group name you provide."
				echo " "
				echo "Eg: human-resources would become human-resources-share."
				echo " "
				echo "This allows us to search for and only display existing share groups, and also helps"
				echo "to prevent confusion between normal groups and share groups by using a standard naming scheme."
				echo " "
				echo " "
				read -p "Please enter the name of the group you wish to create, in lowercase: " group
				group="$(translateToLowerCase $group)-share"
				echo " "
				read -p "Is this correct? $group y/n: " correct
				# Good to go
				if [ "$correct" == "y" ] && [ "$(groupExists $group)" != 0 ]; then
					# create group
					sudo addgroup $group || error_exit "$LINENO: addgroup failed."

				# Admin didn't do his homework
				elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ]; then
					errorTracking;
					echo " "
					echo "$group already exists."
					echo " "
				else
					correct="y"
					errorTracking;
				fi
			else
				echo " "
			fi
		done

	elif [ ! -e $PWD/flags/samba.txt ]; then
		errorTracking;
		echo " "
		echo "Samba is not installed."
		echo " "
		echo "Please install Samba from the main menu."
	fi

	return
}


# Add users to custom Samba share groups
addUsersSambaGroupShare()
{
	if [ -e $PWD/flags/samba.txt ]; then
		correct="y"
		local user=""
		local group=""
		local next=""
		until [ "$correct" == "n" ]; do
			echo " "
			echo "###### Add existing Samba user to existing Samba share group ######"
			echo "###################################################################"
			echo " "
			read -p "Would you like to add an existing Samba user to a share group? y/n: " correct
			if [ "$correct" == "y" ]; then
				echo " "
				echo "List of current Samba users."
				echo " "
				showUsersInGroup smbgrp;
				echo " "
				read -p "Please enter the username of the Samba user you wish to add to a share group, in lowercase: " user
				user="$(translateToLowerCase $user)"
				echo " "
				read -p "Is this correct? $user y/n: " correct

				# Admin didn't do his homework
				if [ "$correct" == "y" ] && [ "$(userExists $user)" != 0 ]; then
					errorTracking;
					echo " "
					echo "$user does not exist."
					echo " "
					read -p "Would you like to create a new user? y/n: " correct
					if [ "$correct" == "y" ]; then
						echo " "
						echo "To create an administrator user, type admin at the prompt."
						echo " "
						echo "To create an standard user, type user at the prompt."
						echo " "
						echo " "
						read -p "Would you like to create an admin or standard user? admin/user: " correct
						if [ "$correct" == "admin" ]; then
							addAdditionalAdmins;
							sambaAddUsers;
							next="y"
						elif [ "$correct" == "user" ]; then
							sambaAddUsers;
							next="y"
						else
							errorTracking;
						fi
					else
						errorTracking;
					fi

				# Admin didn't do his homework
				elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(verifyMemberofGroup $user smbgrp)" != 0 ]; then
					errorTracking;
					echo " "
					echo "$user exists, but is not a current Samba user."
					echo " "
					read -p "Would you like to add $user to the Samba group? y/n: " correct
					if [ "$correct" == "y" ]; then
						sambaAddUsers;
						next="y"
					else
						errorTracking;
					fi

				# Good to go
				elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(verifyMemberofGroup $user smbgrp)" == 0 ]; then
					echo " "
					echo "Let's select a group, then."
					next="y"
				else
					errorTracking;
				fi
			else
				echo " "
			fi

			# Select a group, now that the user has been verified or created
			if [ "$next" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(verifyMemberofGroup $user smbgrp)" == 0 ]; then
				correct="n"
				until [ "$correct" == "y" ]; do
					echo " "
					echo "List of current sharegroups:"
					echo " "
					userchoice="group-share"
					showGroups;
					echo " "
					echo " "
					read -p "Please enter the name of the sharegroup you wish to add the user to, in lowercase: " group
					group="$(translateToLowerCase $group)"
					echo " "
					read -p "Is this correct? $group y/n: " correct
					
					# Good to go
					if [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(groupExists $group)" == 0 ] && [ "$(verifyMemberofGroup $user $group)" != 0 ]; then
					
						# Add user to group
						sudo adduser $user $group || error_exit "$LINENO: adduser failed."

					# Group doesn't exist
					elif [ "$correct" == "y" ] && [ "$(userExists $user)" == 0 ] && [ "$(groupExists $group)" != 0 ]; then
						errorTracking;
						echo " "
						echo "$group does not exist."
						echo " "
						read -p "Would you like to create a new group? y/n: " correct
						if [ "$correct" == "y" ]; then
							addSambaShareGroup;
							correct="y"
						else
							errorTracking;
						fi

					# Admin didn't do his homework
					elif [ "$correct" == "y" ] && [ "$(verifyMemberofGroup $user $group)" == 0 ]; then
						errorTracking;
						echo " "
						echo "$user is already a member of $group."
					else
						errorTracking;
					fi
				done
			fi
		next=""

		done

	elif [ ! -e $PWD/flags/samba.txt ]; then
		errorTracking;
		echo " "
		echo "Samba is not installed."
		echo " "
		echo "Please install Samba from the main menu."
	fi

	return
}


# Function to add group shares
sambaAddGroupShare()
{
	if [ -e $PWD/flags/samba.txt ]; then
		correct="n"
		local next=""
		local sambashare=""
		until [ "$correct" == "y" ]; do
			echo " "
			echo "Please enter the name of the groupshare to create, eg: Accounting"
			echo ""
			echo " "
			echo "This would create directory $sambadir/Accounting and apply the permissions you selected."
			echo " "
			read -p "Please enter the groupshare to create: " sambashare
			echo " "
			read -p "Is this correct? $sambadir/$sambashare y/n: " correct
			if [ "$correct" == "y" ]; then

				# Select a sharegroup to assign the folder to
				correct="n"
				until [ "$correct" == "y" ]; do
					echo " "
					echo "List of current sharegroups:"
					echo " "
					userchoice="group-share"
					showGroups;
					echo " "
					echo "It is recommended to use $sambashare-share if it exists, to avoid confusion."
					echo "If the group does not yet exist, you will be given the choice to add it soon."
					echo " "
					echo "If you create a new sharegroup, -share will be appended to the name you provide."
					echo "That means to create $sambashare-share, you would only type $sambashare."
					echo " "
					read -p "Please enter the name of the sharegroup you wish to assign the folder to, in lowercase: " group
					group="$(translateToLowerCase $group)-share"
					echo " "
					read -p "Is this correct? $group y/n: " correct

					# Group doesn't exist
					if [ "$correct" == "y" ] && [ "$(groupExists $group)" != 0 ]; then
						errorTracking;
						echo " "
						echo "$group does not exist."
						echo " "
						read -p "Would you like to create a new group? y/n: " correct
						if [ "$correct" == "y" ]; then
							addSambaShareGroup;
							correct="y"
							next="y"
						else
							errorTracking;
						fi

					# Good to go
					elif [ "$correct" == "y" ] && [ "$(groupExists $group)" == 0 ]; then
						echo " "
						echo "Proceeding"
						next="y"
					else
						errorTracking;
					fi
				done

				if [ "$next" == "y" ] && [ "$(groupExists $group)" == 0 ]; then
					# Create Samba parent and user folders
					sudo mkdir -p $sambadir/$sambashare || error_exit "$LINENO: Folder creation failed ."

					# Apply file and folder permissions
					if [ "$1" == "ro" ]; then
						sudo chmod -R 755 $sambadir/$sambashare || error_exit "$LINENO: Setting folder permisions failed."
					elif [ "$1" == "rw" ]; then
						sudo chmod -R 775 $sambadir/$sambashare || error_exit "$LINENO: Setting folder permisions failed."
					fi

					# Apply file and folder ownership
					sudo chown root:$group $sambadir/$sambashare || error_exit "$LINENO: Setting folder ownership failed."

					# backup samba conf file, then append user and share info to the end of the file
					filestoreplace[$filecount]=/etc/samba/smb.conf
					sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
					sudo chmod 777 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
					sudo printf "\n\n[$sambashare]" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\npath = $sambadir/$sambashare" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nvalid users = @$group" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nguest ok = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nread only = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nbrowsable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					sudo printf "\nwritable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					if [ "$1" == "ro" ]; then
						sudo printf "\ncreate mask = 0755" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\ndirectory mask = 0755" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					elif [ "$1" == "rw" ]; then
						sudo printf "\ncreate mask = 0775" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\ndirectory mask = 0775" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
					fi
					sudo chmod 644 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
					filecount=$((filecount+1))

					# Remove backed up file before moving on
					cleanUpSuccessful;
					wait
				else
					errorTracking;
				fi
			else
				errorTracking;
			fi
		next="y"

		done

	elif [ ! -e $PWD/flags/samba.txt ]; then
		errorTracking;
		echo " "
		echo "Samba is not installed."
		echo " "
		echo "Please install Samba from the main menu."
	fi

	return
}
