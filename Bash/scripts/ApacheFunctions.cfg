# Function to install Apache2
installApache()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installApache.txt ]; then
		echo "0" > $PWD/flags/installApache.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installApache.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Installing Apache2 ############"
		echo "############################################"
		echo " "

		# install apache2
		sudo apt-get update && sudo apt-get -y install apache2 libnet-ssleay-perl libauthen-pam-perl libio-pty-perl || error_exit "$LINENO: Installation failed."
		wait

		# rebuild kernel images
		sudo update-initramfs -c -k all || error_exit "$LINENO: kernel image update failed."
		wait

		# update boot menu for new kernel images
		sudo update-grub || error_exit "$LINENO: grub update failed."
		wait

		# enable mods for apache2 security and required features
		sudo a2enmod ssl rewrite setenvif headers env dir mime || error_exit "$LINENO: Module activation failed."

		# restart apache2 with new mods and features enabled
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."

		# configure initial http site
		filestoreplace[$filecount]=/etc/apache2/sites-available/000-default.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/\#ServerName www.example.com/ServerName $fqdn/" /etc/apache2/sites-available/000-default.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "/\/html/ a \\\tRedirect permanent \"/\" \"https://$fqdn\"" /etc/apache2/sites-available/000-default.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# configure initial https site
		filestoreplace[$filecount]=/etc/apache2/sites-available/default-ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "/ServerAdmin webmaster@localhost/ a \\\t\tServerName $fqdn" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/installApache.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi
}


# Function to import client certificates or generate new self-signed certificates
getCertificateData()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getCertificateData.txt ]; then
		echo "0" > $PWD/flags/getCertificateData.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getCertificateData.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############### Input SSL certificate info ################"
			echo "###########################################################"
			echo " "
			echo "Enter the filename of the SSL certificate, including file extension."
			read -p "Type none to generate a self-signed certificate: " clientcertificate
			echo " "
			echo "Enter the filename of the SSL key, including file extension."
			read -p "Type none to generate a self-signed key: " clientkey
			echo " "
			echo " "
			echo "SSL certificate filename: $clientcertificate"
			echo " "
			echo "SSL key filename: $clientkey"
			echo " "
			read -p "Is this correct? y/n: " correct
			if [ "$correct" == "y" ]; then
				if [ "$clientcertificate" == "none" ] && [ "$clientkey" == "none" ]; then

					# ssl key generation menu, allows user to select self-signed or verified letsencrypt. Letsencrypt requires proper dns or ddns service.
					generatecertificate=1
					until [ "$menuselection" = "0" ]; do
						echo " "
						echo "###### Please select a SSL Certificate solution from the list below: ######"
						echo "###########################################################################"
						echo " "
						echo "${certificatemenu[0]}"
						echo " "
						echo "${certificatemenu[1]}"
						echo " "
						echo " "
						read -p "Enter your selection here: " menuselection
						echo " "
						case $menuselection in

							# sets options for self-signed certs and sets filenames
							1 ) letsencrypt=0
								clientcertificate="apache-selfsigned.crt"
								clientkey="apache-selfsigned.key"
								menuselection=0;;

							# sets options for letsencrypt verified certs, and sets filenames
							2 ) letsencrypt=1
								combinedcert=1
								clientcertificate="fullchain.pem"
								clientkey="privkey.pem"
								clientcachain="chain.pem"
								echo $clientcachain > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
								menuselection=0;;
							* ) errorTracking
								menuselection=1;;
						esac
					done
				elif [ "$clientcertificate" != "none" ] && [ "$clientkey" != "none" ]; then
					correct="n"
					generatecertificate=0

					# Prompts user to copy and paste contents of paid SSL certs into new files on the system.
					local anykey
					echo "###########   READ THIS CAREFULLY AND FOLLOW THE INSTRUCTIONS!!!   ##########"
					echo " "
					echo "You will be prompted to paste the contents of your SSL certificate and your private key, in that order."
					echo " "
					echo "Simply open your certificate in any text editor (notepad, gedit), and copy and paste the contents"
					echo "into the new empty files. After you've copied and pasted your certificate info into the new file,"
					echo "Press ctrl+x to save, y at the prompt to save the changes, and enter to finally save. A new window"
					echo "will open for your private key. Repeat the process that you used for the certificate."
					echo " "
					read -p "Press enter to continue: " anykey
					sudo nano /etc/ssl/certs/$clientcertificate || error_exit "$LINENO: File creation failed."
					sudo nano /etc/ssl/private/$clientkey || error_exit "$LINENO: File creation failed."
					local combo="n"
					until [ "$combo" == "y" ]; do

						# prompts to ask user if CA Chain is included in the certificate
						echo " "
						read -p "Are the CA Chain and Certificate combined into a single PEM file? y/n: " combo
						if [ "$combo" == "y" ]; then
							combinedcert=1
							echo $clientcertificate > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
						else
							until [ "$correct" == "y" ]; do

								# create CA Chain file if necessary
								echo " "
								read -p "Enter the filename of the SSL certificate chain file, including file extension." clientcachain
								echo " "
								echo "SSL certificate chain filename: $clientcachain"
								echo " "
								read -p "Is this correct? y/n: " correct
								if [ "$correct" == "y" ]; then
									sudo nano /etc/ssl/certs/$clientcachain || error_exit "$LINENO: File creation failed."
									combo="y"
									echo $clientcachain > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
								else
									errorTracking;
								fi
							done
						fi
					done
				else
					errorTracking;
					correct="n"
				fi
			else
				errorTracking;
			fi
		done

		echo $generatecertificate > $PWD/flags/generatecertificate.txt || error_exit "$LINENO: File creation failed."
		echo $clientcertificate > $PWD/flags/certname.txt || error_exit "$LINENO: File creation failed."
		echo $clientkey > $PWD/flags/keyname.txt || error_exit "$LINENO: File creation failed."
		echo $combinedcert > $PWD/flags/combinedcert.txt || error_exit "$LINENO: File creation failed."
		echo $letsencrypt > $PWD/flags/letsencrypt.txt || error_exit "$LINENO: File creation failed."

		menuselection=1
		beenrun=1
		echo $beenrun > $PWD/flags/getCertificateData.txt || error_exit "$LINENO: File edit failed."
	else
		read combinedcert < $PWD/flags/combinedcert.txt || error_exit "$LINENO: File creation failed."
		read letsencrypt < $PWD/flags/letsencrypt.txt || error_exit "$LINENO: File creation failed."
		read generatecertificate < $PWD/flags/generatecertificate.txt || error_exit "$LINENO: Read failed."
		read clientcertificate < $PWD/flags/certname.txt || error_exit "$LINENO: Read failed."
		read clientkey < $PWD/flags/keyname.txt || error_exit "$LINENO: Read failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			read clientcachain < $PWD/flags/cachainname.txt || error_exit "$LINENO: Read failed."
		fi
	fi
}


# Generate self signed certificates
generateSelfSignedCert()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/generateSelfSignedCert.txt ]; then
		echo "0" > $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		if [ "$generatecertificate" == 1 ] && [ "$letsencrypt" == 0 ]; then

			# prompts user to start self-signed certificate generation process
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "############### Generating temporary SSL certificates ################"
				echo "######################################################################"
				echo " "
				echo "Please answer all questions CAREFULLY in the following prompts."
				echo " "
				read -p "Are you ready to begin certificate generation? y/n: " correct
				if [ "$correct" == "y" ]; then

					# generates a certificate good for one year, RSA2048
					sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt || error_exit "$LINENO: certificate creation failed."
					wait
				else
					errorTracking;
				fi
			done
		elif [ "$generatecertificate" == 1 ] && [ "$letsencrypt" == 1 ]; then

			# begins process to apply for a fast verified certificate from lets-encrypt
			local anykey=0
			echo " "
			echo "Ready to begin Let'sEncrypt installation and configuration."
			echo " "
			read -p "Press enter to proceed: " anykey

			# installs letsencrypt package, and verification and update tools
			sudo apt-get update && sudo apt-get install -y python-letsencrypt-apache || error_exit "$LINENO: Installation failed."
			wait

			# applies for certificate, without attempting to install it. Certificate requires stapling, which is enabled in this configuration.
			sudo letsencrypt --apache certonly --hsts || error_exit "$LINENO: certificate application failed."
			wait

			# links standard cert/key locations to folder where letsencrypt stores certs and keys
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientcertificate /etc/ssl/certs/$clientcertificate || error_exit "$LINENO: link creation failed."
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientkey /etc/ssl/private/$clientkey || error_exit "$LINENO: link creation failed."
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientcachain /etc/ssl/certs/$clientcachain || error_exit "$LINENO: link creation failed."
		else
			echo " "
			echo "Skipping self signed certificate generation."
		fi

		# generates del...delete... DH Group file
		sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 || error_exit "$LINENO: File creation failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi
}


# Function to add or toggle Apache fail2ban rules
fail2banChange()
{
	if [ -e /etc/fail2ban/jail.conf ]; then
        	local line1=""
        	local line2=""
        	local textcomp=""
        	if [ -e installApache.txt ]; then
        		line1=$(sed -n '/\[apache-badbots]/=' jail.conf)
                	line2=$(($line1+1))
                	textcomp=$(sed -n "$line2"p jail.conf)
                	if [ "$textcomp" != "enabled = true" ] && [ "$textcomp" != "#enabled = true" ]; then
                		sed -i "${line1} a\enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
                	elif [ "$textcomp" == "#enabled = true" ]; then
                		sed -i "${line2} c\enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
                	fi

                	line1=$(sed -n '/\[apache-auth]/=' jail.conf)
                	line2=$(($line1+1))
                	textcomp=$(sed -n "$line2"p jail.conf)
                	if [ "$textcomp" != "enabled = true" ] && [ "$textcomp" != "#enabled = true" ]; then
                        	sed -i "${line1} a\enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
                	elif [ "$textcomp" == "#enabled = true" ]; then
                        	sed -i "${line2} c\enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
			fi

		elif [ ! -e installApache.txt ]; then
	        	line1=$(sed -n '/\[apache-badbots]/=' jail.conf)
                	line2=$(($line1+1))
                	textcomp=$(sed -n "$line2"p jail.conf)
                	if [ "$textcomp" == "enabled = true" ]; then
                        	sed -i "${line2} c\\#enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
                	fi

                	line1=$(sed -n '/\[apache-auth]/=' jail.conf)
                	line2=$(($line1+1))
                	textcomp=$(sed -n "$line2"p jail.conf)
                	if [ "$textcomp" == "enabled = true" ]; then
                        	sed -i "${line2} c\\#enabled = true" jail.conf || error_exit "$LINENO: File edit failed."
                	fi
		fi

		# restart fail2ban
        	sudo service fail2ban restart || error_exit "$LINENO: Service restart failed."
        	wait

	else
		return
	fi
}


# Function to configure SSL and Apache
secureApache()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/secureApache.txt ]; then
		echo "0" > $PWD/flags/secureApache.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/secureApache.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Securing Apache2 webserver and configuring SSL ############"
		echo "########################################################################"

		# Configure standard SSL settings to be used across all enabled sites
		if [ ! -e /etc/apache2/conf-available/ssl-params.conf ]; then
			sudo echo "SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH" | sudo tee /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File creation failed."
			sudo chmod 777 /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: Setting file permisions failed."
			sudo printf "\nSSLProtocol All -SSLv2 -SSLv3" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nSSLHonorCipherOrder On" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf '\nHeader always set Strict-Transport-Security: "max-age=63072000; includeSubdomains; preload"' >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nHeader set X-Frame-Options: SAMEORIGIN" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nHeader set X-Content-Type-Options: nosniff" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nSSLCompression off " >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nSSLSessionTickets Off" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\nSSLUseStapling on" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf '\nSSLStaplingCache "shmcb:logs/stapling-cache(150000)"' >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf "\n" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo printf '\nSSLOpenSSLConfCmd DHParameters "/etc/ssl/certs/dhparam.pem"' >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
			sudo chmod 644 /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: Setting file permisions failed."
		fi

		# sets initial ssl site configuration
		filestoreplace[$filecount]=/etc/apache2/sites-available/default-ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/ssl-cert-snakeoil.pem/$clientcertificate/" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/ssl-cert-snakeoil.key/$clientkey/" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/\# BrowserMatch "MSIE \[2-6]" \\/BrowserMatch "MSIE [2-6]" \\/' /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/\#\t\tnokeepalive ssl-unclean-shutdown \\/\t\tnokeepalive ssl-unclean-shutdown \\/' /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/\#\t\tdowngrade-1.0 force-response-1.0/\t\tdowngrade-1.0 force-response-1.0/' /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# enables new SSL parameters
		sudo a2enconf ssl-params || error_exit "$LINENO: Configuration activation failed."
		wait

		# enables SSL site
		sudo a2ensite default-ssl || error_exit "$LINENO: Site activation failed."
		wait

		# configures security options
		filestoreplace[$filecount]=/etc/apache2/conf-available/security.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/ServerTokens OS/ServerTokens Prod/" /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/ServerSignature On/ServerSignature Off/" /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i '/#Header set X-Frame-Options: "sameorigin"/ a Header always unset X-Powered-By' /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# sets allowed SSL protocol levels
		filestoreplace[$filecount]=/etc/apache2/mods-available/ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/SSLProtocol all -SSLv3/SSLProtocol all -SSLv2 -SSLv3/" /etc/apache2/mods-available/ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# install mod evasive
		sudo apt-get install -y libapache2-mod-evasive || error_exit "$LINENO: Installation failed."
		wait

		# configure mod evasive to be... somewhat less evasive
		if [ ! -e /var/log/mod_evasive ]; then
			sudo mkdir /var/log/mod_evasive || error_exit "$LINENO: Directory creation failed."
		fi
		sudo chown www-data:www-data /var/log/mod_evasive/ || error_exit "$LINENO: Setting file permisions failed."
		sudo echo "<ifmodule mod_evasive20.c>" | sudo tee /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File creation failed."
   		sudo chmod 777 /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo echo ' ' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSHashTableSize 6194' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSPageCount  10' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSSiteCount  100' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSPageInterval 1' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSSiteInterval  1' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSBlockingPeriod  30' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSLogDir   /var/log/mod_evasive' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSWhitelist   127.0.0.1' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo '</ifmodule>' >> /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/mods-available/mod-evasive.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo cp /etc/apache2/mods-available/evasive.conf /etc/apache2/mods-available/evasive.conf.bak || error_exit "$LINENO: File copy failed."
		sudo cp /etc/apache2/mods-available/mod-evasive.conf /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File copy failed."

		# add or toggle fail2ban apache rules
		fail2banChange;

		# restart apache2 with new configurations in place
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/secureApache.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi
}
