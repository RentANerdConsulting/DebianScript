# Function to determine if server will use port forwarding and default ports
getHTTPPorts()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getHTTPPorts.txt ]; then
		echo "0" > $PWD/flags/getHTTPPorts.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getHTTPPorts.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		local forwarding=""

		# Ask if port forwarding will be used to access the server
		correct="n"
		until [ "$correct" == "y" ] ; do
			echo " "
			read -p "Will you be using NAT port forwarding to allow internet access to this server? y/n :" correct
			if [ "$correct" == "y" ]; then
				forwarding=1
			elif [ "$correct" == "n" ]; then
				forwarding=0
				correct="y"
			else
				errorTracking;
			fi
		done

		# Determine if default ports will be used for port forwarding
		if [ "$forwarding" == 1 ]; then
			correct="n"
			until [ "$correct" == "y" ] ; do
				echo " "
				echo " "
				echo "Default HTTP port: 80"
				echo " "
				echo "Default HTTPS port: 443"
				echo " "
				echo " "
				echo "Typical configuration involves setting external ports that the router"
				echo "forwards to these default ports on the server."
				echo " "
				echo "Example using default ports:"
				echo "The router would be set to forward port 80 from the router to port 80 on the server,"
				echo "and port 443 on the router to port 443 on the server."
				echo " "
				echo "     Internet         Router                  Server     "
				echo "                  --------------          -------------- "
				echo "  Sees Port 80    |    Port 80 | -------> | Port 80    | "
				echo "  --------------> |            |          |            | "
				echo "  Sees Port 443   |   Port 443 | -------> | Port 443   | "
				echo "                  --------------          -------------- "
				echo " "
				read -p "Will you be using different ports for your routers external ports? y/n :" correct
				if [ "$correct" == "y" ]; then
					correct="n"
					until [ "$correct" == "y" ] ; do

						# Prompt for router/external port info
						echo " "
						echo " "
						read -p "Please enter your router external port for HTTP traffic: " exthttpport
						echo " "
						read -p "Please enter your router external port for HTTPS traffic: " exthttpsport
						echo " "
						echo " "
						echo "Router external HTTP port: $exthttpport"
						echo " "
						echo "Router external HTTPS port: $exthttpsport"
						echo " "
						read -p "Is this correct? y/n :" correct
						if [ "$correct" == "y" ]; then
							echo " "
							echo "Excellent!"
						elif [ "$correct" == "n" ]; then
							errorTracking;
						fi
					done

				elif [ "$correct" == "n" ]; then
					correct="y"

					# Set default router/external port info
					exthttpport="80"
					exthttpsport="443"
				else
					errorTracking;
				fi
			done

		elif [ "$forwarding" == 0 ]; then

			# Set default router/external port info
			exthttpport="80"
			exthttpsport="443"
		fi

		# Set default server/internal port info
		inthttpport="80"
		inthttpsport="443"

		# Display port info in case needed for DNS configuration
		echo " "
		echo " "
		echo "Router HTTP port: $exthttpport"
		echo " "
		echo "Router HTTPS port: $exthttpsport"
		echo " "
		echo "Server HTTP port: $inthttpport"
		echo " "
		echo "Server HTTPS port: $inthttpsport"
		echo " "
		echo " "
		echo "If you need to specify your ports in DNS for access outside your local network,"
		echo "make sure to use the ports listed above as Router HTTP and HTTPS."
		echo " "
		read -p "Press enter to continue: "

		beenrun=1

		# Store port info to flags
		echo $beenrun > $PWD/flags/getHTTPPorts.txt || error_exit "$LINENO: File edit failed."
		echo $exthttpport > $PWD/flags/exthttpport.txt || error_exit "$LINENO: File creation failed."
		echo $exthttpsport > $PWD/flags/exthttpsport.txt || error_exit "$LINENO: File creation failed."
		echo $inthttpport > $PWD/flags/inthttpport.txt || error_exit "$LINENO: File creation failed."
		echo $inthttpsport > $PWD/flags/inthttpsport.txt || error_exit "$LINENO: File creation failed."
	else
		return
	fi

	return
}


# Function to install Apache2
installApache()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installApache.txt ]; then
		echo "0" > $PWD/flags/installApache.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installApache.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Installing Apache2 ############"
		echo "############################################"
		echo " "

		# tick vhost count
		

		# install apache2
		sudo apt-get update && sudo apt-get -y install apache2 apache2-doc apache2-utils php7.0 php7.0-common libapache2-mod-php php7.0-gd php7.0-mysql php7.0-imap php-pear php-auth php7.0-mcrypt mcrypt mariadb-server libnet-ssleay-perl libauthen-pam-perl libio-pty-perl || error_exit "$LINENO: Installation failed."
		wait

		# rebuild kernel images
		sudo update-initramfs -c -k all || error_exit "$LINENO: kernel image update failed."
		wait

		# update boot menu for new kernel images
		sudo update-grub || error_exit "$LINENO: grub update failed."
		wait

		# enable mods for apache2 security and required features
		sudo a2enmod ssl rewrite setenvif headers env dir mime || error_exit "$LINENO: Module activation failed."

		# restart apache2 with new mods and features enabled
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."

		# configure initial http site
		filestoreplace[$filecount]=/etc/apache2/sites-available/000-default.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/\#ServerName www.example.com/ServerName $fqdn/" /etc/apache2/sites-available/000-default.conf || error_exit "$LINENO: File edit failed."
		if [ "$exthttpsport" != "$inthttpsport" ]; then
			sudo sed -i "/\/html/ a \\\tRedirect permanent \"/\" \"https://$fqdn:$exthttpsport/\"" /etc/apache2/sites-available/000-default.conf || error_exit "$LINENO: File edit failed."
		elif [ "$exthttpsport" == "$inthttpsport" ]; then
			sudo sed -i "/\/html/ a \\\tRedirect permanent \"/\" \"https://$fqdn/\"" /etc/apache2/sites-available/000-default.conf || error_exit "$LINENO: File edit failed."
		fi
		filecount=$((filecount+1))

		# configure initial https site
		filestoreplace[$filecount]=/etc/apache2/sites-available/default-ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "/ServerAdmin webmaster@localhost/ a \\\t\tServerName $fqdn" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# rename initial http site 
		sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/0-default.conf
		sudo a2dissite 000-default
		sudo rm /etc/apache2/sites-available/000-default.conf
		sudo a2ensite 0-default

		# rename initial https site 
		sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/1-default-ssl.conf
		sudo a2dissite default-ssl
		sudo rm /etc/apache2/sites-available/default-ssl.conf
		sudo a2ensite 1-default-ssl

		# create a catchall virtualhost configuation
		sudo echo '<VirtualHost *:80>' | sudo tee /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo printf '<VirtualHost *:80>' >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerName null" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAlias *" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tRedirect 404 /" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n<VirtualHost *:443>" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerName null" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAlias *" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tRedirect 404 /" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/sites-available/99-catchall.conf || error_exit "$LINENO: Setting file permisions failed."

		# restart apache2 with new mods and features enabled
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."

		beenrun=1
		echo $beenrun > $PWD/flags/installApache.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


# Function to add or toggle Apache fail2ban rules
fail2banChange()
{
	# Verify Fail2ban is installed
	if [ -e /etc/fail2ban/jail.conf ]; then
        	local line1=""
        	local line2=""
        	local textcomp=""

		# Check if Apache is installed. If it is, parse jail.conf and enable Apache rules
		if [ -e $PWD/flags/installApache.txt ]; then
			# determine line number of apache-badbots heading
			line1=$(sed -n '/\[apache-badbots]/=' /etc/fail2ban/jail.conf)

			# determine line number following heading
			line2=$(($line1+1))

			# read line after heading
			textcomp=$(sed -n "$line2"p /etc/fail2ban/jail.conf)

			# if line entry to enable apache-badbots does not exist, insert it
			if [ "$textcomp" != "enabled = true" ] && [ "$textcomp" != "#enabled = true" ]; then
				sudo sed -i "${line1} a\enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."

			# if line entry is commented out, uncomment it
			elif [ "$textcomp" == "#enabled = true" ]; then
				sudo sed -i "${line2} c\enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."
			fi


			# determine line number of apache-auth heading
			line1=$(sed -n '/\[apache-auth]/=' /etc/fail2ban/jail.conf)

			# determine line number following heading
			line2=$(($line1+1))

			# read line after heading
			textcomp=$(sed -n "$line2"p /etc/fail2ban/jail.conf)

			# if line entry to enable apache-auth does not exist, insert it
			if [ "$textcomp" != "enabled = true" ] && [ "$textcomp" != "#enabled = true" ]; then
				sudo sed -i "${line1} a\enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."

			# if line entry is commented out, uncomment it
			elif [ "$textcomp" == "#enabled = true" ]; then
				sudo sed -i "${line2} c\enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."
			fi

		# Check if Apache is installed. If it is not, parse jail.conf and disable Apache rules
		elif [ ! -e $PWD/flags/installApache.txt ]; then
			# determine line number of apache-badbots heading
			line1=$(sed -n '/\[apache-badbots]/=' /etc/fail2ban/jail.conf)

			# determine line number following heading
			line2=$(($line1+1))

			# read line after heading
			textcomp=$(sed -n "$line2"p /etc/fail2ban/jail.conf)

			# if line entry to enable apache-badbots exists, comment it out
			if [ "$textcomp" == "enabled = true" ]; then
				sudo sed -i "${line2} c\\#enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."
			fi


			# determine line number of apache-auth heading
			line1=$(sed -n '/\[apache-auth]/=' /etc/fail2ban/jail.conf)

			# determine line number following heading
			line2=$(($line1+1))

			# read line after heading
			textcomp=$(sed -n "$line2"p /etc/fail2ban/jail.conf)

			# if line entry to enable apache-auth exists, comment it out
			if [ "$textcomp" == "enabled = true" ]; then
				sudo sed -i "${line2} c\\#enabled = true" /etc/fail2ban/jail.conf || error_exit "$LINENO: File edit failed."
			fi
		fi

		# restart fail2ban
		sudo service fail2ban restart || error_exit "$LINENO: Service restart failed."
		wait

	else
		return
	fi

	return
}


# Function to configure SSL and Apache
secureApache()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/secureApache.txt ]; then
		echo "0" > $PWD/flags/secureApache.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/secureApache.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Securing Apache2 webserver and configuring SSL ############"
		echo "########################################################################"

		# Configure standard SSL settings to be used across all enabled sites
		sudo echo "SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH" | sudo tee /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\nSSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSSLHonorCipherOrder On" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nHeader always set Strict-Transport-Security: \"max-age=63072000; includeSubdomains; preload\"" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nHeader set X-Frame-Options: SAMEORIGIN" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nHeader set X-Content-Type-Options: nosniff" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSSLCompression off " >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSSLSessionTickets Off" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSSLUseStapling on" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\nSSLStaplingCache \"shmcb:logs/stapling-cache(150000)\"" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nSSLOpenSSLConfCmd DHParameters \"/etc/ssl/certs/dhparam.pem\"" >> /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/conf-available/ssl-params.conf || error_exit "$LINENO: Setting file permisions failed."

		# sets initial ssl site configuration
		filestoreplace[$filecount]=/etc/apache2/sites-available/1-default-ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/ssl-cert-snakeoil.pem/$clientcertificate/" /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/ssl-cert-snakeoil.key/$clientkey/" /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			sudo sed -i "s/#SSLCertificateChainFile \/etc\/apache2\/ssl.crt\/server-ca.crt/SSLCertificateChainFile\\\t\\\t\/etc\/ssl\/certs\/$clientcachain/" /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo sed -i 's/\# BrowserMatch "MSIE \[2-6]" \\/BrowserMatch "MSIE [2-6]" \\/' /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/\#\t\tnokeepalive ssl-unclean-shutdown \\/\t\tnokeepalive ssl-unclean-shutdown \\/' /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/\#\t\tdowngrade-1.0 force-response-1.0/\t\tdowngrade-1.0 force-response-1.0/' /etc/apache2/sites-available/1-default-ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# enables new SSL parameters
		sudo a2enconf ssl-params || error_exit "$LINENO: Configuration activation failed."
		wait 

		# enables SSL site
		sudo a2ensite 1-default-ssl || error_exit "$LINENO: Site activation failed."
		wait

		# configures security options
		filestoreplace[$filecount]=/etc/apache2/conf-available/security.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/ServerTokens OS/ServerTokens Prod/" /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/ServerSignature On/ServerSignature Off/" /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i '/#Header set X-Frame-Options: "sameorigin"/ a Header always unset X-Powered-By' /etc/apache2/conf-available/security.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# sets allowed SSL protocol levels
		filestoreplace[$filecount]=/etc/apache2/mods-available/ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/SSLProtocol all -SSLv3/SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1/" /etc/apache2/mods-available/ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/SSLCipherSuite HIGH:\!aNULL/SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH/" /etc/apache2/mods-available/ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# install mod evasive
		sudo apt-get install -y libapache2-mod-evasive || error_exit "$LINENO: Installation failed."
		wait

		# Prepare log folder
		if [ ! -e /var/log/mod_evasive ]; then
			sudo mkdir /var/log/mod_evasive || error_exit "$LINENO: Directory creation failed."
		fi
		sudo chown www-data:www-data /var/log/mod_evasive/ || error_exit "$LINENO: Setting file permisions failed."

		# configure mod evasive to be... somewhat less evasive
		filestoreplace[$filecount]=/etc/apache2/mods-available/evasive.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo truncate -s 0 /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: truncate file failed."
		sudo chmod 777 /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo echo '<ifmodule mod_evasive20.c>' > /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo ' ' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSHashTableSize 6194' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSPageCount  10' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSSiteCount  100' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSPageInterval 1' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSSiteInterval  1' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSBlockingPeriod  30' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSLogDir   /var/log/mod_evasive' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo 'DOSWhitelist   127.0.0.1' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		if [ "$hostedserver" == "0" ]; then
			if [ "$netclassipv4" == "c" ]; then
				sudo echo "DOSWhitelist   $baseip.*" >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
			elif [ "$netclassipv4" == "b" ]; then
				sudo echo "DOSWhitelist   $baseip.*.*" >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
			elif [ "$netclassipv4" == "a" ]; then
				sudo echo "DOSWhitelist   $baseip.*.*.*" >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
			fi
		fi
		sudo echo "DOSSystemCommand \"echo 'mod_evasive HTTP Blacklisted %s on $fqdn' | mail -s 'Blocked IP by mod_evasive' root@localhost\"" >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo echo '</ifmodule>' >> /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/mods-available/evasive.conf || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# add or toggle fail2ban apache rules
		fail2banChange;

		# set php memory limits and remove insecure features
		filestoreplace[$filecount]=/etc/php/7.0/apache2/php.ini
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/disable_functions = pcntl_alarm/disable_functions = system,passthru,pcntl_alarm/" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "/pcntl_setpriority,/ a register_globals = Off" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/html_errors = On/html_errors = Off/" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "/html_errors = Off/ a magic_quotes_gpc = Off" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/mail.add_x_header = On/mail.add_x_header = Off/" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/upload_max_filesize = 2M/upload_max_filesize = $maxuploadMBtemp\M/" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/post_max_size = 8M/post_max_size = $maxuploadMBtemp\M/" /etc/php/7.0/apache2/php.ini || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# restart apache2 with new configurations in place
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/secureApache.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}
