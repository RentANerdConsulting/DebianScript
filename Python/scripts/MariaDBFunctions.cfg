# Function to input clients generated secure passwords for MariaDB and ownCloud
getMariaDBData()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getMariaDBData.txt ]; then
		echo "0" > $PWD/flags/getMariaDBData.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getMariaDBData.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input MariaDB data ############"
			echo "############################################"
			echo " "
			echo "Generate random password for mariaDB root using Keepass2"
			echo " "
			echo "Log this password as $clientname -> $hostname -> mariadb_root, as it may be needed later for maintenance."
			echo " "
			read -p "Enter mariaDB root password: " mdbrootpass 
			echo " "
			echo "mariaDB root password: $mdbrootpass"
			echo " "
			read -p "Is this correct? y/n: " correct
			if [ "$correct" != "y" ]; then
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getMariaDBData.txt || error_exit "$LINENO: File edit failed."
		echo $mdbrootpass > $PWD/flags/mdbrootpass.txt || error_exit "$LINENO: File edit failed."
	elif
		if ([ ! -e $PWD/flags/mdbrootpass.txt ] && [ ! -e $PWD/flags/secureMariaDB.txt ]) || ([ ! -e $PWD/flags/mdbrootpass.txt ] && [ -e $PWD/flags/secureMariaDB.txt ] && [ ! -e $PWD/flags/phpMyAdminDBConfig.txt ]); then
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "############ Input MariaDB data ############"
				echo "############################################"
				echo " "
				echo "Open Keepass2 and enter the password for $clientname -> $hostname -> mariadb_root."
				echo " "
				read -p "Enter mariaDB root password: " mdbrootpass 
				echo " "
				echo "mariaDB root password: $mdbrootpass"
				echo " "
				read -p "Is this correct? y/n: " correct
				if [ "$correct" != "y" ]; then
					errorTracking;
				fi
			done

			echo $mdbrootpass > $PWD/flags/mdbrootpass.txt || error_exit "$LINENO: File edit failed."
		fi

	fi

	return
}


# Function to create MariaDB security script
createMariaDBExpectScript()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/createMariaDBExpectScript.txt ]; then
		echo "0" > $PWD/flags/createMariaDBExpectScript.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/createMariaDBExpectScript.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Installing script generation prerequisites ############"
		echo "####################################################################"

		# install expect, used for scripting prompts
		sudo apt-get -y install expect || error_exit "$LINENO: Installation failed."
		wait

		echo " "
		echo "############ Generating MariaDB security configuration scripts ############"
		echo "###########################################################################"

		# Create Expect script used to secure MariaDB
		echo '#!/usr/bin/expect' | tee $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File creation failed."
		echo ' ' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'spawn sudo mysql_secure_installation' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Enter current password for root (enter for none): "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Set root password? \\\[Y/n] "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "y\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "New password: "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "mdbrootpass\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Re-enter new password: "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "mdbrootpass\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Remove anonymous users? \\\[Y/n] "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "y\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Disallow root login remotely? \\\[Y/n] "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "n\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Remove test database and access to it? \\\[Y/n] "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "y\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "Reload privilege tables now? \\\[Y/n] "' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		echo 'send "y\r"' >> $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."
		sudo chmod +x $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: Setting file permisions failed."

		beenrun=1
		echo $beenrun > $PWD/flags/createMariaDBExpectScript.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to secure MariaDB
secureMariaDB()
{
 	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/secureMariaDB.txt ]; then
		echo "0" > $PWD/flags/secureMariaDB.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/secureMariaDB.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Securing MariaDB ############"
		echo "##########################################"
		echo " "

		# insert mariaDB root password into expect script
		sudo sed -i "s:mdbrootpass:${mdbrootpass}:" $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: File edit failed."

		# run expect script to secure mariaDB
		sudo $PWD/scripts/mariaDBSecure.sh || error_exit "$LINENO: mariadb lockdown failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/secureMariaDB.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to configure PHPMyAdmin user and password
phpMyAdminDBConfig()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/phpMyAdminDBConfig.txt ]; then
		echo "0" > $PWD/flags/phpMyAdminDBConfig.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/phpMyAdminDBConfig.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Configuring user access to MariaDB for phpMyAdmin ############"
		echo "###########################################################################"
        	echo " "

		# insert phpmyadmin passwords into expect script
		sudo sed -i "s/admin/${phpmaadmin}/" $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/password/${phpmapass}/" $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		sudo chmod +x $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: Setting file permisions failed."

		# run expect script to configure phpmyadmin access
		sudo $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: mariadb configuration failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/phpMyAdminDBConfig.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to create PHPMyAdmin script
createPHPMyAdminExpectScript()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/createPHPMyAdminExpectScript.txt ]; then
		echo "0" > $PWD/flags/createPHPMyAdminExpectScript.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/createPHPMyAdminExpectScript.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		echo " "
		echo "############ Generating phpmyadmin configuration scripts ############"
		echo "#####################################################################"

		# Create Expect script used to setup phpmyadmin
		echo '#!/usr/bin/expect' | tee $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File creation failed."
		echo ' ' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'spawn sudo mysql -u root' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "MariaDB \\\[(none)]>"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'send "CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';\r"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "MariaDB \\\[(none)]>"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'send "GRANT ALL PRIVILEGES ON *.* to 'admin'@'localhost' WITH GRANT OPTION;\r"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "MariaDB \\\[(none)]>"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'send "FLUSH PRIVILEGES;\r"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'expect "MariaDB \\\[(none)]>"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		echo 'send "exit\r"' >> $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		sudo sed -i "s:admin@localhost:'admin'@'localhost':" $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		sudo sed -i "s:password:'password':" $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: File edit failed."
		sudo chmod +x $PWD/scripts/mariaDBphpmyadmin.sh || error_exit "$LINENO: Setting file permisions failed."

		beenrun=1
		echo $beenrun > $PWD/flags/createPHPMyAdminExpectScript.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to install PHPMyAdmin
installPHPMyAdmin()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installPHPMyAdmin.txt ]; then
		echo "0" > $PWD/flags/installPHPMyAdmin.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installPHPMyAdmin.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		echo " "
		echo "############ Installing phpMyAdmin ############"
		echo "###############################################"
        	echo " "
		# prompt for phpmyadmin non-root admin username, and describe install config
		correct="n"
		until [ "$correct" == "y" ]; do
			echo "############ Create PHPMyAdmin non-root user ############"
			echo "#########################################################"
			echo " "
			echo " "
			echo "You need to create a non-root admin user for MariaDB, for remote management."
			echo " "
			echo "Name the account client-nameadmin, ${clientname}admin, for example,"
			echo "or whatever you'd like. Don't use an existing username."
			echo " "
			echo "This will be the only user allowed remote admin access to MariaDB, and"
			echo "will also be the username used to log into the PHPMyAdmin application."
			echo " "
			echo " "
			read -p "Enter the user name here: " phpmaadmin
			echo " "
			read -p "Is this correct? $phpmaadmin   y/n: " correct
			if [ "$correct" == "y" ]; then
				echo "Next..."
			fi
		done

		# have user generate non-root admin login password
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo " "
			echo "Generate random password for non-root admin $phpmaadmin for PHPMyAdmin using Keepass2"
			echo " "
			echo "Log this password as $clientname -> $hostname -> PHPMyAdmin -> $phpmaadmin."
			echo " "
			echo " "
			read -p "Copy and paste the password here: " phpmapass
			echo " "
			read -p "Is this correct? $phpmapass   y/n: " correct
			if [ "$correct" == "y" ]; then
				echo "Continuing installation..."
			fi
		done

		# install packages
		sudo apt-get update && sudo apt-get install -y phpmyadmin php-mbstring php-gettext || error_exit "$LINENO: Installation failed."
		wait

		# enable phpmods
		sudo phpenmod mcrypt || error_exit "$LINENO: php mod enable failed."
		sudo phpenmod mbstring || error_exit "$LINENO: php mod enable failed."

		echo $phpmaadmin > $PWD/flags/phpmaadmin.txt || error_exit "$LINENO: File edit failed."
		echo $phpmapass > $PWD/flags/phpmapass.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/installPHPMyAdmin.txt || error_exit "$LINENO: File edit failed."

	else
		return
	fi

	return
}


# Function to configure PHPMyAdmin website
phpMyAdminWebConfig()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/phpMyAdminWebConfig.txt ]; then
		echo "0" > $PWD/flags/phpMyAdminWebConfig.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/phpMyAdminWebConfig.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# disable default site configs
		sudo a2dissite 0-default || error_exit "$LINENO: Site deactivation failed."
		sudo a2dissite 1-default-ssl || error_exit "$LINENO: Site deactivation failed."

		# disable and remove previous site config
		sudo a2disconf phpmyadmin || error_exit "$LINENO: Site deactivation failed."
		sudo rm /etc/apache2/conf-available/phpmyadmin.conf

		# create phpmyadmin website configuation
		sudo echo '<VirtualHost *:80>' | sudo tee /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\n\tServerName $phpmahostname.$domainname" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /usr/share/phpmyadmin" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ "$exthttpsport" != "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpmahostname.$domainname:$exthttpsport/\"" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		elif [ "$exthttpsport" == "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpmahostname.$domainname/\"" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpmyadmin-error.log" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpmyadmin-access.log combined" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n<VirtualHost *:443>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerName $phpmahostname.$domainname" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /usr/share/phpmyadmin" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpmyadmin-error.log" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpmyadmin-access.log combined" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tSSLEngine on" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateFile\t\t/etc/ssl/certs/$clientcertificate" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateKeyFile\t\t/etc/ssl/private/$clientkey" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			sudo printf "\n\tSSLCertificateChainFile\t\t/etc/ssl/certs/$clientcachain" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\t<Location />" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthType Basic" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthName \"Protected site\"" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthUserFile /etc/apache2/phpmyadmin/.htpasswd" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tRequire valid-user" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tOrder deny,allow" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAllow from all" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Location>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."		
		sudo printf "\n\n\t<Directory />" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tOptions FollowSymLinks" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tDirectoryIndex index.php" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t\t<IfModule mod_php.c>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t<IfModule mod_mime.c>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t\tAddType application/x-httpd-php .php" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t</IfModule>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t<FilesMatch \".+\.php$\">" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t\tSetHandler application/x-httpd-php" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t</FilesMatch>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t\t\tphp_flag magic_quotes_gpc Off" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_flag track_vars On" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_flag register_globals Off" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_admin_flag allow_url_fopen On" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_value include_path ." >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_admin_value upload_tmp_dir /var/lib/phpmyadmin/tmp" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tphp_admin_value open_basedir /usr/share/phpmyadmin/:/etc/phpmyadmin/:/var/lib/phpmyadmin/:/usr/share/php/php-gettext/:/usr/share/javascript/:/usr/share/php/tcpdf/:/usr/share/doc/phpmyadmin/:/usr/share/php/phpseclib/" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t</IfModule>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /setup>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t<IfModule mod_authz_core.c>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t<IfModule mod_authn_file.c>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t\tAuthType Basic" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t\tAuthName \"phpMyAdmin Setup\"" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t\tAuthUserFile /etc/phpmyadmin/htpasswd.setup" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\t</IfModule>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t\tRequire valid-user" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t</IfModule>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /libraries>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tRequire all denied" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /setup/lib>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tRequire all denied" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<FilesMatch \"\.(cgi|shtml|phtml|php)$\">" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</FilesMatch>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /usr/lib/cgi-bin>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tBrowserMatch \"MSIE [2-6]\" \\" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tnokeepalive ssl-unclean-shutdown \\" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tdowngrade-1.0 force-response-1.0" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/sites-available/5-phpmyadmin-ssl.conf || error_exit "$LINENO: Setting file permisions failed."
		filecount=$((filecount+1))

		# enable new phpmyadmin site
		sudo a2ensite 5-phpmyadmin-ssl || error_exit "$LINENO: Site activation failed."

		# prompt for user to enable for site
		correct="n"
		until [ "$correct" == "y" ]; do
			local phpmyadminuser=""
			echo " "
			echo "############ Create PHPMyAdmin website user login and password ############"
			echo "########################################################################"
			echo " "
			read -p "Will this username and password be for the current user? y/n " phpmyadminuser

			# If current user, proceed
			if [ "$phpmyadminuser" == "y" ]; then
				phpmyadminuser="$currentuser"
				correct="y"

			# Begin checks for user
			elif [ "$phpmyadminuser" == "n" ]; then
				local anykey=""
				echo " "
				echo " "
				read -p "Please enter the username of the user this is for: " anykey
				anykey="$(translateToLowerCase $anykey)"

				# Verify other admin is supposed to have access
				if [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" == 0 ]; then
					echo " "
					echo " "
					echo "This login and password will be for the user $anykey."
					echo " "
					read -p "Is this correct? y/n " correct
					if [ "$correct" == "y" ]; then
						phpmyadminuser="$anykey"
					else
						errorTracking;
					fi

				# Make sure non admin user is correctly being given access
				elif [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" != 0 ]; then
					echo "$anykey is not an administrator."
					echo " "
					read -p "Are you certain you want to give them access? y/n: " correct
					if [ "$correct" == "y" ]; then
						phpmyadminuser="$anykey"
					else
						errorTracking;
					fi

				# Fix non existent user situation
				elif [ "$(userExists $anykey)" != 0]; then
					echo "$anykey is not a valid user on this system."
					echo " "
					echo "If you would like to create a standard user for $anykey, type user at the prompt."
					echo " "
					echo "If you would like to create an administrator user for $anykey, type admin at the prompt."
					echo " "
					echo "If you made a mistake and want to try again, type oops at the prompt."
					echo " "
					echo "Please enter your selection. user/admin/oops: " correct
					case $correct in

						# Create standard user and return to initial prompt
						user ) addAdditionalUsers
							correct="n";;

						# Create admin user and return to initial prompt
						admin ) addAdditionalAdmins
							correct="n";;

						# Return to initial prompt
						oops ) correct="n"
							errorTracking;;

						# Return to initial prompt, because someone isn't awake today
						* ) correct="n"
							errorTracking;;
					esac
				fi
			fi
		done

		# Restart services
		sudo systemctl restart apache2.service || error_exit "$LINENO: Service restart failed."

		# have user generate personal login password
		echo " "
		echo " "
		echo "Generate random password for $phpmyadminuser to log into the PHPMyAdmin site using Keepass2"
		echo " "
		echo "Log this password as $clientname -> $hostname -> PHPMyAdmin -> $phpmyadminuser."
		echo " "
		echo " "
		echo "You will be prompted for this password shortly."
		echo " "
		echo "Please be ready to type it in, or copy and paste it from keepass into PuTTY."
		echo " "
		read -p "Press the enter key when ready to continue: "

		sudo mkdir -p /etc/apache2/phpmyadmin || error_exit "$LINENO: Folder creation failed."

		# set password for login
		sudo htpasswd -c /etc/apache2/phpmyadmin/.htpasswd $phpmyadminuser || error_exit "$LINENO: Password creation failed."

		beenrun=1
		echo $beenrun > $PWD/flags/phpMyAdminWebConfig.txt || error_exit "$LINENO: File edit failed."

	else
		return
	fi

	return
}


# Function to add new users to access the PHPMyAdmin website
addPHPMyAdminSiteUser()
{
	# prompt for user to add
	correct="n"
	until [ "$correct" == "y" ]; do
		local phpmyadminuser=""
		echo " "
		echo "############ Add PHPMyAdmin site login and password ############"
		echo "################################################################"
		echo " "
		read -p "Will this username and password be for the current user? y/n " phpmyadminuser

		# If current user, proceed
		if [ "$phpmyadminuser" == "y" ]; then
			phpmyadminuser="$currentuser"
			correct="y"

		# Begin checks for user
		elif [ "$phpmyadminuser" == "n" ]; then
			local anykey=""
			echo " "
			echo " "
			read -p "Please enter the username of the user this is for: " anykey
			anykey="$(translateToLowerCase $anykey)"

			# Verify other admin is supposed to have access
			if [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" == 0 ]; then
				echo " "
				echo " "
				echo "This login and password will be for the user $anykey."
				echo " "
				read -p "Is this correct? y/n " correct
				if [ "$correct" == "y" ]; then
					phpmyadminuser="$anykey"
				else
					errorTracking;
				fi

			# Make sure non admin user is correctly being given access
			elif [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" != 0 ]; then
				echo "$anykey is not an administrator."
				echo " "
				read -p "Are you certain you want to give them access? y/n: " correct
				if [ "$correct" == "y" ]; then
					phpmyadminuser="$anykey"
				else
					errorTracking;
				fi

			# Fix non existent user situation
			elif [ "$(userExists $anykey)" != 0]; then
				echo "$anykey is not a valid user on this system."
				echo " "
				echo "If you would like to create a standard user for $anykey, type user at the prompt."
				echo " "
				echo "If you would like to create an administrator user for $anykey, type admin at the prompt."
				echo " "
				echo "If you made a mistake and want to try again, type oops at the prompt."
				echo " "
				echo "Please enter your selection. user/admin/oops: " correct
				case $correct in

					# Create standard user and return to initial prompt
					user ) addAdditionalUsers
						correct="n";;

					# Create admin user and return to initial prompt
					admin ) addAdditionalAdmins
						correct="n";;

					# Return to initial prompt
					oops ) errorTracking
						correct="n";;

					# Return to initial prompt, because someone isn't awake today
					* ) correct="n"
						errorTracking;;
				esac
			fi
		fi
	done

	# have user generate login password
	echo " "
	echo " "
	echo "Generate random password for $phpmyadminuser to log into the PHPMyAdmin site using Keepass2"
	echo " "
	echo "Log this password as $clientname -> $hostname -> PHPMyAdmin -> $phpmyadminuser."
	echo " "
	echo "You will be prompted for this password shortly."
	echo " "
	echo "Please be ready to type it in, or copy and paste it from keepass into PuTTY."
	echo " "
	read -p "Press the enter key when ready to continue: "

	# set password for login
	sudo htpasswd /etc/apache2/phpmyadmin/.htpasswd $phpmyadminuser || error_exit "$LINENO: Password creation failed."
}
