# Function to update Tripwire database
updateTripwire()
{
	local anykey=0
	echo "############################################"
	echo "#######  Updating Tripwire database  #######"
	echo " "
	echo "Tripwire will run and open a report of all changed files."
	echo " "
	echo "If it all seems good, leave the boxes checked and press ctrl+c"
	echo " "
	echo "Tripwire will update it's database with the changes,"
	echo "then you should return to the utilities menu."
	echo " "
	read -p "Press enter to continue. " anykey
	sudo tripwire --check --interactive
}


# Function to upgrade ownCloud install after package update
ownCloudUpgrade()
{
	if [ -e $PWD/flags/ownCloud.txt ]; then
		correct=n
		echo " "
		echo "############ Upgrading ownCloud ############"
		echo "############################################"
		echo " "
		echo "!!!!!!!! System clean up will be run automatically after upgrade !!!!!!!!"
		echo " "
		read -p "Type continue to upgrade ownCloud. Anything else will return you to the menu. : " correct
		if [ "$correct" == "continue" ]; then

			# Run script to change file permissions for owncloud folders and files to prevent permisions issues during update or upgrade
			sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
			wait

			# Upgrade ownCloud
			sudo -u www-data php /var/www/owncloud/occ upgrade || error_exit "$LINENO: ownCloud upgrade failed."
			wait

			# Turn off maintenance mode
			sudo -u www-data php /var/www/owncloud/occ maintenance:mode --off || error_exit "$LINENO: Setting ownCloud maintenance mode to off failed."

			# Run script to reapply secure settings for owncloud folders and files
			sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
			wait

			# Restart Apache2
			sudo service apache2 restart || error_exit "$LINENO: service restart failed."

			# Remove old packages
			systemCleanUp;
			wait
		else
			errorTracking;
		fi
	else
		echo " "
		echo "ownCloud is not installed on this system."
		echo " "
		errorTracking;
	fi
}


# Function to update software
systemUpdateAndUpgrade()
{
	if [ ! -e $PWD/flags/ownCloud.txt ] && [ ! -e $PWD/flags/plex.txt ] && [ ! -e $PWD/flags/samba.txt ]; then

		# Update Clean install
		sudo apt-get update && sudo apt-get -y dist-upgrade || error_exit "$LINENO: update failed."
		wait

		# Restart LXD container service to prevent error message
		sudo service lxd restart || error_exit "$LINENO: service restart failed."
		wait
	elif [ -e $PWD/flags/ownCloud.txt ] || [ -e $PWD/flags/plex.txt ] || [ -e $PWD/flags/samba.txt ]; then
		correct=n
		echo " "
		echo "############ Updating system ############"
		echo "#########################################"
		echo " "
		echo "!!!!!!!! System will reboot after updates !!!!!!!!"
		echo " "
		echo "!!!!!!!! Please run system clean up after reboot !!!!!!!!"
		echo " "
		read -p "Type continue to update system. Anything else will return you to the menu. : " correct
		if [ "$correct" == "continue" ]; then

			# Run script to change file permissions for owncloud folders and files to prevent permisions issues during update or upgrade
			if [ -e $PWD/flags/ownCloud.txt ]; then
				sudo $PWD/scripts/ownCloudPermissionsUnlock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
				wait
			fi

			# Update existing and in use system
			sudo apt-get update && sudo apt-get -y dist-upgrade || error_exit "$LINENO: update failed."
			wait

			# Restart LXD container service to prevent error message
			sudo service lxd restart || error_exit "$LINENO: service restart failed."
			wait

			# Run script to reapply secure settings for owncloud folders and files
			if [ -e $PWD/flags/ownCloud.txt ]; then
				sudo $PWD/scripts/ownCloudPermissionsLock.sh || error_exit "$LINENO: ownCloud permissions operation failed."
				wait
			fi

			# Reboot to apply changes
			sudo reboot
		else
			errorTracking;
		fi
	fi
}


# Function to clean out old software and packages
systemCleanUp()
{
	echo " "
	echo "############ Removing obsolete files and software ############"
	echo "##############################################################"
	echo " "

	# Search for out of date kernels and headers, then purge if they exist
	dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p' | xargs sudo apt-get -y purge || error_exit "$LINENO: search for outdated kernels failed."

	# Update info. Purge and remove out of date packages and settings files
	sudo apt-get update && sudo apt-get -y --purge autoremove || error_exit "$LINENO: autoremove operation failed."
	wait

	# Attempt to find and remove anything left behind by previous commands
	sudo apt-get autoclean || error_exit "$LINENO: cleaning operation failed."
	wait

	# Ditto
	sudo apt-get clean || error_exit "$LINENO: cleaning operation failed."
	wait

	# Rebuild kernel images with new info and remove links to old images
	sudo update-initramfs -c -k all || error_exit "$LINENO: image update failed."
	wait

	# Update boot menu to reflect new kernel images
	sudo update-grub || error_exit "$LINENO: grub update failed."
	wait
}


# Function to exit and reboot
exitAndReboot()
{
	correct="n"
	read -p "Are you certain you wish to exit this program and reboot the system? y/n: " correct
	if [ "$correct" == "y" ]; then
		sudo reboot
	else
		return
	fi
}


# Function to add additional administrators
addAdditionalAdmins()
{
	local anykey=0
	correct="y"
	local sudousername=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add aditional administrator accounts ############"
		echo "##############################################################"
		echo " "
		read -p "Would you like to add another administrator account? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " sudousername
			echo " "
			read -p "Is this correct? $sudousername y/n: " correct
			if [ "$correct" == "y" ] && [ "$sudousername" != "$currentuser" ]; then
				echo " "
				echo "Generate random password for the new administrator account using Keepass2."
       				echo " "
       				echo "Log this password as $clientname -> $hostname -> $sudousername, with user name $sudousername, as it may be needed later for maintenance."
				echo " "
				read -p "When the password is saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					lastuser="$sudousername"

					# create user
					sudo adduser $sudousername || error_exit "$LINENO: adduser failed."

					# add user to sudo group
					sudo adduser $sudousername sudo || error_exit "$LINENO: adduser sudo failed."

					# adduser to Admin group
					sudo usermod -a -G admin $sudousername || error_exit "$LINENO: adduser admin failed."
					lastuser=""
				else
					errorTracking;
				fi
			elif [ "$correct" == "y" ] && [ "$sudousername" == "$currentuser" ]; then
				errorTracking;
				echo " "
				echo "The account you're attempting to add is the account you're currently"
				echo "using, and is already an administrator account."
				echo " "
				read -p "Take a moment to think that over, and press enter when you're ready to try again. " anykey
			else
				correct="y"
				errorTracking;
			fi
		fi
	done
}


# Function to add additional users
addAdditionalUsers()
{
	local anykey=0
	correct="y"
	local user=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add additional user accounts ############"
		echo "######################################################"
		echo " "
		read -p "Would you like to add another user account? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " user
			echo " "
			read -p "Is this correct? $user y/n: " correct
			if [ "$correct" == "y" ] && [ "$createsambauser" != 1 ]; then
				echo " "
				echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
        			echo " "
        			echo "Log this password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				read -p "When the password is saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					lastuser="$user"
					if [ "$user" != "$currentuser" ]; then

						# create user
						sudo adduser $user || error_exit "$LINENO: adduser failed."
						lastuser=""
					elif [ "$user" == "$currentuser" ]; then

						# tell user they are having a bad day
						errorTracking;
						echo " "
						echo "$user is the account you're using currently."
						echo " "
						read -p "Please press enter to return to the add user prompt. " anykey
						lastuser=""
					fi
				else
					errorTracking;
				fi
			elif [ "$correct" == "y" ] && [ "$createsambauser" == 1 ]; then
				echo " "
				echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
				echo " "
				echo "Generate random password for the new Samba user account, or save the one supplied by the user, using Keepass2."
				echo " "
				echo "Log the user password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
        			echo " "
        			echo "Log the Samba user password as $clientname -> $hostname -> Samba -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				echo "The user will be created first, then the Samba user. Please copy and paste the appropriate passwords when prompted."
				echo " "
				read -p "When the passwords are saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					local sambadirectory=""
					lastuser="$user"
					
					if [ "$user" != "$currentuser" ]; then

						# create user
						sudo adduser $user || error_exit "$LINENO: adduser failed."
						lastuser=""
					elif [ "$user" == "$currentuser" ]; then

						# make sure user isn't having a bad day
						echo " "
						echo "$user is the account you're using currently."
						echo " "
						echo "Are you certain that your account, $user, isn't already configured to use Samba?"
						echo "Enter 'addme' to add yourself to the Samba group,"
						read -p "anything else will return you to the initial prompt. " anykey
						if [ "$anykey" != "addme"]; then
							lastuser=""
							return
						fi
					fi

					# Add user to samba group
					sudo adduser $user smbgrp || error_exit "$LINENO: adduser failed."

					# create samba password for user
					sudo smbpasswd -a $user || error_exit "$LINENO: Setting Samba password failed."
					lastuser=""
					echo " "
					echo "Please enter the parent directory structure to create for the new Samba user, starting from root,"
					echo "ie: /StorageArray/SambaShares"
					echo " "
					echo "This would create directory /StorageArray/SambaShares/$user and apply permissions."
					echo " "
					read -p "Please enter the parent directory structure: " sambadirectory
					echo " "
					read -p "Is this correct? $sambadirectory/$user y/n: " correct
					if [ "$correct" == "y" ]; then

						# Create Samba parent and user folders
						sudo mkdir -p $sambadirectory/$user || error_exit "$LINENO: Folder creation failed ."

						# Apply file and folder permissions
						sudo chmod -R 755 $sambadirectory/$user || error_exit "$LINENO: Setting folder permisions failed."

						# Apply file and folder ownership
						sudo chown $user:smbgrp $sambadirectory/$user || error_exit "$LINENO: Setting folder ownership failed."

						# backup samba conf file, then append user and share info to the end of the file
						filestoreplace[$filecount]=/etc/samba/smb.conf
						sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
						sudo chmod 777 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
						sudo printf "\n\n[$user]" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\npath = $sambadirectory/$user" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nvalid users = $user @smbgrp" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nguest ok = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nread only = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nbrowsable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nwritable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo chmod 644 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
						filecount=$((filecount+1))
					else
						errorTracking;
					fi

					# Remove backed up file before moving on
					cleanUpSuccessful;
					wait
				else
					errorTracking;
				fi
			else
				correct="y"
				errorTracking;
			fi
		fi
	done
	useraddoops=0
}


# Function to show configured cron jobs of users in /etc/passwd
showCron()
{
	sudo $PWD/showcron.sh || error_exit "$LINENO: Cron display failed."
	wait
}
