# Function to verify Guest Additions ISO is inserted, and install it
installGuestAdditions()
{
	correct="n"
	until [ "$correct" == "y" ] ; do
		local inserted="n"
		echo " "
		echo "Insert the Guest Additions ISO into the VM CD-ROM drive."
		echo " "
		echo "Do this by using the menus on the active VirtualBox VM window."
		echo " "
		echo "Select 'Devices' -> 'Insert Guest Additions CD Image'."
		echo " "
		echo "OR, 'Machine' -> 'Settings' -> 'Storage', then selecting the empty optical drive."
		echo "Under attributes, click the image of a CD next to the listing of the optical drive."
		echo "Use VBoxGuestAdditions.iso if this is available. If it is not, you'll need to select"
		echo "Choose Virtual Optical Disc Image, and browse to the VirtualBox installation folder"
		echo "where the iso is located."
		echo " "
		read -p "Is the Guest Additions ISO inserted? y/n : " inserted
		if [ "$inserted" == "y" ]; then
			correct="y"

			# Mounting VirtualBox Guest Additions ISO
			sudo mount /dev/cdrom /mnt || error_exit "$LINENO: mount failed."
			wait

			# Installing VirtualBox Guest Additions
			sudo /mnt/VBoxLinuxAdditions.run || error_exit "$LINENO: install failed."
			wait
		else
			errorTracking;
		fi
	done

	return
}


# Function to check if being installed on a VirtualBox VM
checkIfVirtualBox()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/checkIfVirtualBoxVM.txt ] && [ "$physicalsystem" == "0" ]; then
		echo "0" > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
		beenrun=0

		# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
		read beenrun < $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: Read failed."
		if [ "$beenrun" != 1 ]; then
			correct="n"
			until [ "$correct" == "y" ] ; do
				local vbox=""
				echo " "
				read -p "Is this OS installed on a VirtualBox VM? y/n : " vbox
				if [ "$vbox" == "y" ]; then
					correct="y"
					virtualbox="1"

					# Call function to install VirtualBox Guest Additions if installed on VirtualBox hosted VM
					installGuestAdditions;
					wait
				elif [ "$vbox" == "n" ]; then
					correct="y"
					virtualbox="0"
				else
					errorTracking;
				fi
			done

			beenrun=1
			echo $beenrun > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
			echo $virtualbox > $PWD/flags/virtualboxvm.txt || error_exit "$LINENO: File creation failed."
		fi
	elif [ ! -e $PWD/flags/checkIfVirtualBoxVM.txt ] && [ "$physicalsystem" == "1" ]; then
		echo "1" > $PWD/flags/checkIfVirtualBoxVM.txt || error_exit "$LINENO: File creation failed."
		echo "0" > $PWD/flags/virtualboxvm.txt || error_exit "$LINENO: File creation failed."		
	else
		return
	fi

	return
}


# Function to install VirtualBox and PHPVirtualBox
installVirtualBox()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/installVirtualBox.txt ]; then
		echo "0" > $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Make directory for VMs
		if [ ! -e $PWD/flags/vmdir.txt ]; then
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "Please enter the parent directory structure to create for the new Samba user, starting from root,"
				echo "ie: /VMs"
				echo " "
				echo "This would create directory /VMs and apply permissions."
				echo " "
				echo "You could then create all virtual machines and their virtual drives under this parent directory."
				echo " "
				read -p "Please enter the parent directory structure: " vmdir
				echo " "
				read -p "Is this correct? $vmdir y/n: " correct
				if [ "$correct" == "y" ]; then
					echo "$vmdir" > $PWD/flags/vmdir.txt || error_exit "$LINENO: File creation failed."
				else
					errorTracking;
				fi
			done
		fi

		# Create Samba parent and user folders
		sudo mkdir -p $vmdir || error_exit "$LINENO: Folder creation failed ."

		# Install VirtualBox
		sudo apt-get update && sudo apt-get -y install virtualbox virtualbox-guest-additions-iso php7.0-soap php-pear || error_exit "$LINENO: Installation failed."

		# restart apache2 with new mods and features enabled
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."

		# download current extension pack
		sudo wget -P /tmp/ http://download.virtualbox.org/virtualbox/5.0.32/Oracle_VM_VirtualBox_Extension_Pack-5.0.32-112930.vbox-extpack || error_exit "$LINENO: Download failed."

		# install extension pack
		sudo VBoxManage extpack install /tmp/Oracle_VM_VirtualBox_Extension_Pack-5.0.32-112930.vbox-extpack || error_exit "$LINENO: Installation failed."

		# remove unecessary ext pack files
		sudo rm /tmp/Oracle_VM_VirtualBox_Extension_Pack-5.0.32-112930.vbox-extpack

		# Apply file and folder permissions
		sudo chmod -R 770 $vmdir || error_exit "$LINENO: Setting folder permisions failed."
		sudo chown -R root:vboxusers $vmdir || error_exit "$LINENO: Setting folder ownership failed."

		# add current user to vboxusers
		sudo adduser $currentuser vboxusers || error_exit "$LINENO: User group add failed."

		# add vbox user to vboxusers
		sudo useradd vbox || error_exit "$LINENO: User group add failed."
		sudo usermod -a -G vboxusers vbox || error_exit "$LINENO: User group add failed."

		# add vbox to cdrom group for loading guest additions to vms
		sudo usermod -a -G cdrom vbox || error_exit "$LINENO: User group add failed."

		# set vbox account password
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Create vbox user password ############"
			echo "###################################################"
			echo " "
			echo "Generate random password for VirtualBox user vbox using Keepass2"
			echo " "
			echo "Log this password as $clientname -> $hostname -> VirtualBox -> vbox, with user name vbox, as it may be needed later for maintenance."
			echo " "
			echo " "
			echo "You will be prompted to enter this password three times."
			echo "Once, just below, to store temporarily to enter for the site configuration,"
			echo "and twice when setting it for the vbox user account."
			echo " "
			echo "You may copy and paste it into the PuTTY window from Keepass."
			echo " "
			read -p "Enter VirtualBox user vbox password: " vboxuserpass 
			echo " "
			echo "VirtualBox user vbox password: $vboxuserpass"
			echo " "
			read -p "Is this correct? y/n: " correct
			if [ "$correct" != "y" ]; then
				errorTracking;
			else
				echo $vboxuserpass > $PWD/flags/vboxuserpass.txt || error_exit "$LINENO: File edit failed."
			fi
		done

		sudo passwd vbox || error_exit "$LINENO: Password creation failed."

		# Edit VirtualBox service configuration
		filestoreplace[$filecount]=/etc/default/virtualbox
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i '0,/SHUTDOWN_USERS=""/s//SHUTDOWN_USERS="all"/' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '0,/SHUTDOWN=poweroff/s//SHUTDOWN=acpibutton/' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		sudo sed -i '/SHUTDOWN=acpibutton/aVBOXWEB_USER=vbox' /etc/default/virtualbox || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Enable vboxweb service
		sudo systemctl enable vboxweb.service || error_exit "$LINENO: Service registry failed."

		# Start vboxweb service
		sudo systemctl start vboxweb.service || error_exit "$LINENO: Service restart failed."

		# Download phpvirtualbox
		sudo wget -P /tmp/ http://downloads.sourceforge.net/project/phpvirtualbox/phpvirtualbox-5.0-5.zip || error_exit "$LINENO: File download failed."

		# Extract phpvirtualbox
		sudo unzip /tmp/phpvirtualbox-5.0-5.zip -d /tmp/ || error_exit "$LINENO: File decompression failed."

		# Move phpvirtualbox to it's install path
		sudo mv /tmp/phpvirtualbox-5.0-5 /var/www/html/phpvirtualbox || error_exit "$LINENO: Folder move failed."

		# Remove download file
		sudo rm /tmp/phpvirtualbox-5.0-5.zip

		# Copy configuration example file to config file
		sudo cp /var/www/html/phpvirtualbox/config.php-example /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File copy failed." 

		# Edit phpvb configuration file
		filestoreplace[$filecount]=/var/www/html/phpvirtualbox/config.php
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/var \$password = 'pass';/var \$password = '$vboxuserpass';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/var \$location = 'http:\/\/127.0.0.1:18083\/';/var \$location = 'http:\/\/localhost:18083\/';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/var \$vrdeports = '9000-9100';/var \$vrdeports = '9000-9020';/" /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $enableGuestAdditionsVersionDisplay = true;/var $enableGuestAdditionsVersionDisplay = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $enableAdvancedConfig = true;/var $enableAdvancedConfig = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $vmMemoryStartLimitWarn = true;/var $vmMemoryStartLimitWarn = true;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		sudo sed -i 's/#var $vmMemoryOffset = 100;/var $vmMemoryOffset = 100;/' /var/www/html/phpvirtualbox/config.php || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/installVirtualBox.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


# Function to configure phpvb website
phpvbWebConfig()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/phpvbWebConfig.txt ]; then
		echo "0" > $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# disable default site configs
		sudo a2dissite 0-default
		sudo a2dissite 1-default-ssl

		# create phpvb website configuation
		sudo echo '<VirtualHost *:80>' | sudo tee /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\n\tServerName $phpvbhostname.$domainname" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /var/www/html/phpvirtualbox" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ "$exthttpsport" != "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpvbhostname.$domainname:$exthttpsport/\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		elif [ "$exthttpsport" == "$inthttpsport" ]; then
			sudo printf "\n\n\tRedirect permanent \"/\" \"https://$phpvbhostname.$domainname/\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpvb-error.log" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpvb-access.log combined" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n<VirtualHost *:443>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerName $phpvbhostname.$domainname" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tServerAdmin $smtplogin" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tDocumentRoot /var/www/html/phpvirtualbox" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tErrorLog \${APACHE_LOG_DIR}/phpvb-error.log" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tCustomLog \${APACHE_LOG_DIR}/phpvb-access.log combined" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tSSLEngine on" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateFile\t\t/etc/ssl/certs/$clientcertificate" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tSSLCertificateKeyFile\t\t/etc/ssl/private/$clientkey" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			sudo printf "\n\tSSLCertificateChainFile\t\t/etc/ssl/certs/$clientcachain" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		fi
		sudo printf "\n\n\t<FilesMatch \"\.(cgi|shtml|phtml|php)$\">" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Location />" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthType Basic" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthName \"Protected site\"" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAuthUserFile /etc/apache2/phpvirtualbox/.htpasswd" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tRequire valid-user" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tOrder deny,allow" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tAllow from all" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Location>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</FilesMatch>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t<Directory /usr/lib/cgi-bin>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tSSLOptions +StdEnvVars" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t</Directory>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tBrowserMatch \"MSIE [2-6]\" \\" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tnokeepalive ssl-unclean-shutdown \\" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\tdowngrade-1.0 force-response-1.0" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo printf "\n</VirtualHost>" >> /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/apache2/sites-available/4-phpvirtualbox-ssl.conf || error_exit "$LINENO: Setting file permisions failed."

		# enable new phpvirtualbox site
		sudo a2ensite 4-phpvirtualbox-ssl || error_exit "$LINENO: Site activation failed."

		# prompt for user to enable for site
		correct="n"
		until [ "$correct" == "y" ]; do
			local phpvirtualboxuser=""
			echo " "
			echo "############ Create PHPVirtualBox login and password ############"
			echo "#################################################################"
			echo " "
			read -p "Will this username and password be for the current user? y/n " phpvirtualboxuser

			# If current user, proceed
			if [ "$phpvirtualboxuser" == "y" ]; then
				phpvirtualboxuser="$currentuser"
				correct="y"

			# Begin checks for user
			elif [ "$phpvirtualboxuser" == "n" ]; then
				local anykey=""
				echo " "
				echo " "
				read -p "Please enter the username of the user this is for: " anykey
				anykey="$(translateToLowerCase $anykey)"

				# Verify other admin is supposed to have access
				if [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" == 0 ]; then
					echo " "
					echo " "
					echo "This login and password will be for the user $anykey."
					echo " "
					read -p "Is this correct? y/n " correct
					if [ "$correct" == "y" ]; then
						phpvirtualboxuser="$anykey"
					else
						errorTracking;
					fi

				# Make sure non admin user is correctly being given access
				elif [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" != 0 ]; then
					echo "$anykey is not an administrator."
					echo " "
					read -p "Are you certain you want to give them access? y/n: " correct
					if [ "$correct" == "y" ]; then
						phpvirtualboxuser="$anykey"
					else
						errorTracking;
					fi

				# Fix non existent user situation
				elif [ "$(userExists $anykey)" != 0]; then
					echo "$anykey is not a valid user on this system."
					echo " "
					echo "If you would like to create a standard user for $anykey, type user at the prompt."
					echo " "
					echo "If you would like to create an administrator user for $anykey, type admin at the prompt."
					echo " "
					echo "If you made a mistake and want to try again, type oops at the prompt."
					echo " "
					echo "Please enter your selection. user/admin/oops: " correct
					case $correct in

						# Create standard user and return to initial prompt
						user ) addAdditionalUsers
							correct="n";;

						# Create admin user and return to initial prompt
						admin ) addAdditionalAdmins
							correct="n";;

						# Return to initial prompt
						oops ) errorTracking
							correct="n";;

						# Return to initial prompt, because someone isn't awake today
						* ) correct="n"
							errorTracking;;
					esac
				fi
			fi
		done

		# Restart services
		sudo systemctl restart apache2.service && sudo systemctl restart vboxweb.service || error_exit "$LINENO: Services restart failed."

		# have user generate login password
		echo " "
		echo " "
		echo "Generate random password for $phpvirtualboxuser to log into the PHPVirtualBox site using Keepass2"
		echo " "
		echo "Log this password as $clientname -> $hostname -> PHPVirtualBox -> $phpvirtualboxuser."
		echo " "
		echo " "
		echo "You will be prompted for this password shortly."
		echo " "
		echo "Please be ready to type it in, or copy and paste it from keepass into PuTTY."
		echo " "
		read -p "Press the enter key when ready to continue: "
		
		sudo mkdir -p /etc/apache2/phpvirtualbox || error_exit "$LINENO: Folder creation failed."

		# set password for login
		sudo htpasswd -c /etc/apache2/phpvirtualbox/.htpasswd $phpvirtualboxuser || error_exit "$LINENO: Password creation failed."

		echo " "
		echo "When you first log into your PHPVirtualBox website, you will be prompted for your username"
		echo "and password that you just created. You may add more users later. The default login to the"
		echo "actual application served by the site will be username: admin and password: admin."
		echo " "
		echo "Immediately after you first login using the admin username and password combo, go to"
		echo "File -> Preferences -> Users and add a new administrator."
		echo "Name the account client-nameadmin, ${clientname}admin, for example, or whatever you'd like."
		echo "Make sure the account is an administrator account, specified by (Admin user) beside the name."
		echo " "
		echo "Generate random password for this administrator account to log into the PHPVirtualBox site using Keepass2"
		echo " "
		echo "Log this password as $clientname -> $hostname -> PHPVirtualBox -> the name you chose."
		echo " "
		echo "Then go to File -> Log out. Log back in with your new administrator account, and remove the"
		echo "default admin account entirely. Don't change the password, just remove the account."
		echo " "
		read -p "When this is done, press enter to continue: "

		beenrun=1
		echo $beenrun > $PWD/flags/phpvbWebConfig.txt || error_exit "$LINENO: File edit failed."

	else
		return
	fi

	return
}


# Function to add new users to access the PHPVirtualBox website
addPHPVirtualBoxSiteUser()
{
	# prompt for user to enable for site
	correct="n"
	until [ "$correct" == "y" ]; do
		local phpvirtualboxuser=""
		echo " "
		echo "############ Create PHPVirtualBox login and password ############"
		echo "#################################################################"
		echo " "
		read -p "Will this username and password be for the current user? y/n " phpvirtualboxuser

		# If current user, proceed
		if [ "$phpvirtualboxuser" == "y" ]; then
			phpvirtualboxuser="$currentuser"
			correct="y"

		# Begin checks for user
		elif [ "$phpvirtualboxuser" == "n" ]; then
			local anykey=""
			echo " "
			echo " "
			read -p "Please enter the username of the user this is for: " anykey
			anykey="$(translateToLowerCase $anykey)"

			# Verify other admin is supposed to have access
			if [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" == 0 ]; then
				echo " "
				echo " "
				echo "This login and password will be for the user $anykey."
				echo " "
				read -p "Is this correct? y/n " correct
				if [ "$correct" == "y" ]; then
					phpvirtualboxuser="$anykey"
				else
					errorTracking;
				fi

			# Make sure non admin user is correctly being given access
			elif [ "$(userExists $anykey)" == 0 ] && [ "$(verifyMemberofGroup $anykey admin)" != 0 ]; then
				echo "$anykey is not an administrator."
				echo " "
				read -p "Are you certain you want to give them access? y/n: " correct
				if [ "$correct" == "y" ]; then
					phpvirtualboxuser="$anykey"
				else
					errorTracking;
				fi

			# Fix non existent user situation
			elif [ "$(userExists $anykey)" != 0]; then
				echo "$anykey is not a valid user on this system."
				echo " "
				echo "If you would like to create a standard user for $anykey, type user at the prompt."
				echo " "
				echo "If you would like to create an administrator user for $anykey, type admin at the prompt."
				echo " "
				echo "If you made a mistake and want to try again, type oops at the prompt."
				echo " "
				echo "Please enter your selection. user/admin/oops: " correct
				case $correct in

					# Create standard user and return to initial prompt
					user ) addAdditionalUsers
						correct="n";;

					# Create admin user and return to initial prompt
					admin ) addAdditionalAdmins
						correct="n";;

					# Return to initial prompt
					oops ) errorTracking
						correct="n";;

					# Return to initial prompt, because someone isn't awake today
					* ) correct="n"
						errorTracking;;
				esac
			fi
		fi
	done

	# have user generate login password
	echo " "
	echo " "
	echo "Generate random password for $phpvirtualboxuser to log into the PHPVirtualBox site using Keepass2"
	echo " "
	echo "Log this password as $clientname -> $hostname -> PHPVirtualBox -> $phpvirtualboxuser."
	echo " "
	echo "You will be prompted for this password shortly."
	echo " "
	echo "Please be ready to type it in, or copy and paste it from keepass into PuTTY."
	echo " "
	read -p "Press the enter key when ready to continue: "

	# set password for login
	sudo htpasswd /etc/apache2/phpvirtualbox/.htpasswd $phpvirtualboxuser || error_exit "$LINENO: Password creation failed."
}


# Function to create the AutoStart VirtualBox script
makeVMAutoStartScript()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/makeVMAutoStartScript.txt ]; then
		echo "0" > $PWD/flags/makeVMAutoStartScript.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/makeVMAutoStartScript.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		# Create script file
		sudo echo '#!/bin/bash' | sudo tee /etc/init.d/StartVMs || error_exit "$LINENO: File creation failed."
		sudo chmod 777 /etc/init.d/StartVMs || error_exit "$LINENO: Setting file permisions failed."
		sudo printf "\n\n### BEGIN INIT INFO" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Provides:        StartVMs" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Required-Start:    \$local_fs \$network \$named \$time \$syslog" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Required-Stop:    \$local_fs \$network \$named \$time \$syslog" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Default-Start:    2 3 4 5" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Default-Stop:        0 1 6" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n# Description:        Starts all VMs" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n### END INIT INFO" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nVMUSER=\"vbox\"" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\ncase \"\$1\" in" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\tstart) echo \"Starting VM's\"" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t# Repeat the next Line for each VM" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t#startvmshere" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t;;" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\tstop) echo \"Shutting Down VM's\"" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t# Repeat the next Line for each VM" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t#stopvmshere" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t;;" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\n\t*) echo \"Usage: /etc/init.d/StartVMs {start|stop}\"" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\texit 1" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\t\t;;" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\nesac" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo printf "\n\nexit 0" >> /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
		sudo chmod 644 /etc/init.d/StartVMs || error_exit "$LINENO: Setting file permisions failed."

		# Set script as executable
		sudo chmod +x /etc/init.d/StartVMs || error_exit "$LINENO: Setting file permisions failed."

		# Set script to start VMs last during boot and stop them first during shutdown
		sudo update-rc.d StartVMs defaults 99 01

		beenrun=1
		echo $beenrun > $PWD/flags/makeVMAutoStartScript.txt || error_exit "$LINENO: File edit failed."

	else
		return
	fi

	return
}


# List existing VMs
vmList()
{
	echo " "
	echo "List of existing VMs:"
	echo " "
	echo "Press page up or down to scroll through the entries, then q to exit."
	echo " "
	read -p "Press enter when ready: "

	# List, sort, and print out list of VMs in VM directory
	sudo ls "$1" | sort | less

	return
}


# Function to add VM to AutoStart script
addAutoStartVM()
{
	if [ -e /etc/init.d/StartVMs ]; then
		
		# prompt for VM name
		correct=""
		until [ "$correct" == "n" ]; do
			local vmname=""
			echo " "
			echo "############ Select virtual machine to start at system boot ############"
			echo "########################################################################"
			echo " "
			read -p "Would you like to add an existing virtual machine to the AutoStart script? y/n: " correct
			if [ "$correct" == "y" ]; then
				echo " "
				echo "A list of existing VMs in the directory you specified at installation will be displayed."
				echo " "
				echo "Copy the name of the VM you wish to have start at system boot, and paste it at the prompt."
				echo " "
				read -p "Press enter when ready: "
				vmList $vmdir;
				echo ""
				read -p "Please enter the name of the VM: " vmname
				echo " "
				read -p "Is $vmname correct? y/n: " correct
				if [ "$correct" == "y" ]; then

					echo " "
					echo "Adding $vmname to AutoStart script"
					echo " "

					# Add vm to list in script
					filestoreplace[$filecount]=/etc/init.d/StartVMs
					sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
					sudo sed -i "/\\#startvmshere/a\\\t\tsudo \-b \-u \$VMUSER VBoxHeadless \-\-startvm \"$vmname\"" /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
					sudo sed -i "/\\#stopvmshere/a\\\t\tsudo \-b \-u \$VMUSER VBoxManage controlvm \"$vmname\" acpishutdown" /etc/init.d/StartVMs || error_exit "$LINENO: File edit failed."
					filecount=$((filecount+1))

					# Remove backed up files after complete
					cleanUpSuccessful;
					wait

				else
					errorTracking;
				fi
			fi
		done
	else
		echo " "
		echo "AutoStart script is not configured."
		echo " " 
	fi

	return
}
