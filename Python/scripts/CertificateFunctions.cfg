# Function to import client certificates or generate new self-signed certificates
getCertificateData()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getCertificateData.txt ]; then
		echo "0" > $PWD/flags/getCertificateData.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getCertificateData.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############### Input SSL certificate info ################"
			echo "###########################################################"
			echo " "
			echo "Enter the filename of the SSL certificate, including file extension."
			read -p "Type none to generate a self-signed certificate: " clientcertificate
			echo " "
			echo "Enter the filename of the SSL key, including file extension."
			read -p "Type none to generate a self-signed key: " clientkey
			echo " "
			echo " "
			echo "SSL certificate filename: $clientcertificate"
			echo " "
			echo "SSL key filename: $clientkey"
			echo " "
			read -p "Is this correct? y/n: " correct
			if [ "$correct" == "y" ]; then
				if [ "$clientcertificate" == "none" ] && [ "$clientkey" == "none" ]; then

					# ssl key generation menu, allows user to select self-signed or verified letsencrypt. Letsencrypt requires proper dns or ddns service.
					generatecertificate=1
					until [ "$menuselection" = "0" ]; do
						echo " "
						echo "###### Please select a SSL Certificate solution from the list below: ######"
						echo "###########################################################################"
						echo " "
						echo "${certificatemenu[0]}"
						echo " "
						echo "${certificatemenu[1]}"
						echo " "
						echo " "
						read -p "Enter your selection here: " menuselection
						echo " "
						case $menuselection in

							# sets options for self-signed certs and sets filenames
							1 ) letsencrypt=0
								clientcertificate="apache-selfsigned.crt"
								clientkey="apache-selfsigned.key"
								menuselection=0;;

							# sets options for letsencrypt verified certs, and sets filenames
							2 ) letsencrypt=1
								combinedcert=1
								clientcertificate="fullchain.pem"
								clientkey="privkey.pem"
								clientcachain="chain.pem"
								echo $clientcachain > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
								menuselection=0;;
							* ) errorTracking
								menuselection=1;;
						esac
					done
				elif [ "$clientcertificate" != "none" ] && [ "$clientkey" != "none" ]; then
					correct="n"
					generatecertificate=0

					# Prompts user to copy and paste contents of paid SSL certs into new files on the system.
					local anykey
					echo "###########   READ THIS CAREFULLY AND FOLLOW THE INSTRUCTIONS!!!   ##########"
					echo " "
					echo "You will be prompted to paste the contents of your SSL certificate and your private key, in that order."
					echo " "
					echo "Simply open your certificate in any text editor (notepad, gedit), and copy and paste the contents"
					echo "into the new empty files. After you've copied and pasted your certificate info into the new file,"
					echo "Press ctrl+x to save, y at the prompt to save the changes, and enter to finally save. A new window"
					echo "will open for your private key. Repeat the process that you used for the certificate."
					echo " "
					read -p "Press enter to continue: " anykey
					sudo nano /etc/ssl/certs/$clientcertificate || error_exit "$LINENO: File creation failed."
					sudo nano /etc/ssl/private/$clientkey || error_exit "$LINENO: File creation failed."
					local combo="n"
					until [ "$combo" == "y" ]; do

						# prompts to ask user if CA Chain is included in the certificate
						echo " "
						read -p "Are the CA Chain and Certificate combined into a single PEM file? y/n: " combo
						if [ "$combo" == "y" ]; then
							combinedcert=1
							echo $clientcertificate > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
						else
							until [ "$correct" == "y" ]; do

								# create CA Chain file if necessary
								echo " "
								read -p "Enter the filename of the SSL certificate chain file, including file extension." clientcachain
								echo " "
								echo "SSL certificate chain filename: $clientcachain"
								echo " "
								read -p "Is this correct? y/n: " correct
								if [ "$correct" == "y" ]; then
									sudo nano /etc/ssl/certs/$clientcachain || error_exit "$LINENO: File creation failed."
									combo="y"
									echo $clientcachain > $PWD/flags/cachainname.txt || error_exit "$LINENO: File creation failed."
								else
									errorTracking;
								fi
							done
						fi
					done
				else
					errorTracking;
					correct="n"
				fi
			else
				errorTracking;
			fi
		done

		echo $generatecertificate > $PWD/flags/generatecertificate.txt || error_exit "$LINENO: File creation failed."
		echo $clientcertificate > $PWD/flags/certname.txt || error_exit "$LINENO: File creation failed."
		echo $clientkey > $PWD/flags/keyname.txt || error_exit "$LINENO: File creation failed."
		echo $combinedcert > $PWD/flags/combinedcert.txt || error_exit "$LINENO: File creation failed."
		echo $letsencrypt > $PWD/flags/letsencrypt.txt || error_exit "$LINENO: File creation failed."

		menuselection=1
		beenrun=1
		echo $beenrun > $PWD/flags/getCertificateData.txt || error_exit "$LINENO: File edit failed."
	else
		read combinedcert < $PWD/flags/combinedcert.txt || error_exit "$LINENO: File creation failed."
		read letsencrypt < $PWD/flags/letsencrypt.txt || error_exit "$LINENO: File creation failed."
		read generatecertificate < $PWD/flags/generatecertificate.txt || error_exit "$LINENO: Read failed."
		read clientcertificate < $PWD/flags/certname.txt || error_exit "$LINENO: Read failed."
		read clientkey < $PWD/flags/keyname.txt || error_exit "$LINENO: Read failed."
		if [ -e $PWD/flags/cachainname.txt ]; then
			read clientcachain < $PWD/flags/cachainname.txt || error_exit "$LINENO: Read failed."
		fi
	fi
}


# Generate self signed certificates
generateSelfSignedCert()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/generateSelfSignedCert.txt ]; then
		echo "0" > $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		if [ "$generatecertificate" == 1 ] && [ "$letsencrypt" == 0 ]; then

			# prompts user to start self-signed certificate generation process
			correct="n"
			until [ "$correct" == "y" ]; do
				echo " "
				echo "############### Generating temporary SSL certificates ################"
				echo "######################################################################"
				echo " "
				echo "Please answer all questions CAREFULLY in the following prompts."
				echo " "
				read -p "Are you ready to begin certificate generation? y/n: " correct
				if [ "$correct" == "y" ]; then

					# generates a certificate good for one year, RSA2048
					sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt || error_exit "$LINENO: certificate creation failed."
					wait
				else
					errorTracking;
				fi
			done
		elif [ "$generatecertificate" == 1 ] && [ "$letsencrypt" == 1 ]; then

			# begins process to apply for a fast verified certificate from lets-encrypt
			local anykey=0
			echo " "
			echo "Ready to begin Let'sEncrypt installation and configuration."
			echo " "
			read -p "Press enter to proceed: " anykey

			# installs letsencrypt package, and verification and update tools
			sudo apt-get update && sudo apt-get install -y python-letsencrypt-apache || error_exit "$LINENO: Installation failed."
			wait

			# applies for certificate, without attempting to install it. Certificate requires stapling, which is enabled in this configuration.
			sudo letsencrypt --apache certonly --hsts || error_exit "$LINENO: certificate application failed."
			wait

			# links standard cert/key locations to folder where letsencrypt stores certs and keys
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientcertificate /etc/ssl/certs/$clientcertificate || error_exit "$LINENO: link creation failed."
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientkey /etc/ssl/private/$clientkey || error_exit "$LINENO: link creation failed."
			sudo ln -s /etc/letsencrypt/live/$fqdn/$clientcachain /etc/ssl/certs/$clientcachain || error_exit "$LINENO: link creation failed."
		else
			echo " "
			echo "Skipping self signed certificate generation."
		fi

		# generates del...delete... DH Group file
		sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 || error_exit "$LINENO: File creation failed."
		wait

		beenrun=1
		echo $beenrun > $PWD/flags/generateSelfSignedCert.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi
}


# Function to begin change of certificates
changeCerts()
{
	# create local variables to store old configuration
	local oldcombinedcert=""
	local oldletsencrypt=""
	local oldgeneratecertificate=""
	local oldcert=""
	local oldkey=""
	local oldcachain=""

	#read current certificate info
	read oldcombinedcert < $PWD/flags/combinedcert.txt || error_exit "$LINENO: Read failed."
	read oldletsencrypt < $PWD/flags/letsencrypt.txt || error_exit "$LINENO: Read failed."
	read oldgeneratecertificate < $PWD/flags/generatecertificate.txt || error_exit "$LINENO: Read failed."
	read oldcert < $PWD/flags/certname.txt || error_exit "$LINENO: Read failed."
	read oldkey < $PWD/flags/keyname.txt || error_exit "$LINENO: Read failed."
	if [ -e $PWD/flags/cachainname.txt ]; then
		read oldcachain < $PWD/flags/cachainname.txt || error_exit "$LINENO: Read failed."
	fi

	# revoke letsencrypt certificates if necessary
	if [ "$oldletsencrypt" == 1 ]; then

		# Remove Lets Encrypt and settings
		sudo apt-get -y --purge autoremove python-letsencrypt-apache
		sudo rm -R /etc/ssl/certs/$oldcert
		sudo rm -R /etc/ssl/private/$oldkey
		sudo rm -R /etc/ssl/certs/$oldcachain

	# remove old configuration files
	rm $PWD/flags/combinedcert.txt
	rm $PWD/flags/letsencrypt.txt
	rm $PWD/flags/generatecertificate.txt
	rm $PWD/flags/certname.txt
	rm $PWD/flags/keyname.txt
	rm $PWD/flags/cachainname.txt
	rm $PWD/flags/generateSelfSignedCert.txt
	rm $PWD/flags/getCertificateData.txt

	# Generate or install new certificates
	getCertificateData;
	generateSelfSignedCert;

	# Fix Apache certificate info if necessary
	if [ -e $PWD/flags/installApache.txt ]; then

		# change default ssl site configuration
		filestoreplace[$filecount]=/etc/apache2/sites-available/default-ssl.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldcert/$clientcertificate/" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/$oldkey/$clientkey/" /etc/apache2/sites-available/default-ssl.conf || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# restart apache2 with new configurations in place
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."
		wait

	fi

	# Fix ownCloud certificate info if necessary
	if [ -e $PWD/flags/installOwnCloud.txt ]; then

		# if ssl cert was generated locally, insert into owncloud
		if [ "$combinedcert" != 1 ]; then
			sudo -u www-data php /var/www/owncloud/occ security:certificates:import /etc/ssl/certs/$clientcertificate || error_exit "$LINENO: Certificate import failed."
		fi

		# update owncloud website configuation
		filestoreplace[$filecount]=/etc/apache2/sites-available/owncloud.conf
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldcert/$clientcertificate/" >> /etc/apache2/sites-available/owncloud.conf || error_exit "$LINENO: File edit failed."
		sudo sed -i "s/$oldkey/$clientkey/" >> /etc/apache2/sites-available/owncloud.conf || error_exit "$LINENO: File edit failed."
		if [ "$generatecertificate" == 0 ] && [ "$combinedcert" == 0 ]; then
			sudo sed -i "s/$oldcachain/$clientcachain" >> /etc/apache2/sites-available/owncloud.conf || error_exit "$LINENO: File edit failed."
		fi
		filecount=$((filecount+1))

		# update .htaccess with new info
		sudo -u www-data php /var/www/owncloud/occ maintenance:update:htaccess || error_exit "$LINENO: .htaccess update failed."

		# restart apache2 with updated owncloud config
		sudo systemctl restart apache2 || error_exit "$LINENO: Apache restart failed."
		wait
	fi

	# Fix email settings by replacing previous certificate info
	filestoreplace[$filecount]=/etc/postfix/main.cf
	sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
	sudo chmod 777 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
	sudo sed -i "s/$oldcert/$clientcertificate/" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
	sudo sed -i "s/$oldkey/$clientkey/" /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
	if [ "$combinedcert" == "1" ] && [ "$oldcombinedcert" == "1" ]; then
		sudo sed -i "s/smtpd_tls_CAfile = \\/etc\\/ssl\\/certs\\/$oldcachain/smtpd_tls_CAfile = \\/etc\\/ssl\\/certs\\/$clientcachain/" >> /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
	elif [ "$combinedcert" == "0" ] && [ "$oldcombinedcert" == "1" ]; then
		sudo sed -i "s/smtpd_tls_CAfile = \\/etc\\/ssl\\/certs\\/$oldcachain/\\#smtpd_tls_CAfile = \\/etc\\/ssl\\/certs\\/$oldcachain/" >> /etc/postfix/main.cf || error_exit "$LINENO: File edit failed."
	fi
	sudo chmod 644 /etc/postfix/main.cf || error_exit "$LINENO: Setting file permisions failed."
	filecount=$((filecount+1))
			
	# restart postfix service
	sudo systemctl restart postfix.service || error_exit "$LINENO: Postfix restart failed."
	wait

	# test new email settings
	sudo logwatch --detail Low --mailto $smtplogin --service all --range today || error_exit "$LINENO: email test failed."

	# Remove backed up files after complete
	cleanUpSuccessful;
	wait
}


# Function to install new Certificate Authority
addNewCertAuth()
{
	return
} 
