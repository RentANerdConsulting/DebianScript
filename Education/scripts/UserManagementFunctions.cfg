# Function to add additional administrators
addAdditionalAdmins()
{
	local anykey=0
	correct="y"
	local sudousername=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add aditional administrator accounts ############"
		echo "##############################################################"
		echo " "
		read -p "Would you like to add another administrator account? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " sudousername
			echo " "
			read -p "Is this correct? $sudousername y/n: " correct
			if [ "$correct" == "y" ] && [ "$sudousername" != "$currentuser" ]; then
				echo " "
				echo "Generate random password for the new administrator account using Keepass2."
       				echo " "
       				echo "Log this password as $clientname -> $hostname -> $sudousername, with user name $sudousername, as it may be needed later for maintenance."
				echo " "
				read -p "When the password is saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					lastuser="$sudousername"

					# create user
					sudo adduser $sudousername || error_exit "$LINENO: adduser failed."

					# add user to sudo group
					sudo adduser $sudousername sudo || error_exit "$LINENO: adduser sudo failed."

					# adduser to Admin group
					sudo usermod -a -G admin $sudousername || error_exit "$LINENO: adduser admin failed."
					lastuser=""
				else
					errorTracking;
				fi
			elif [ "$correct" == "y" ] && [ "$sudousername" == "$currentuser" ]; then
				errorTracking;
				echo " "
				echo "The account you're attempting to add is the account you're currently"
				echo "using, and is already an administrator account."
				echo " "
				read -p "Take a moment to think that over, and press enter when you're ready to try again. " anykey
			else
				correct="y"
				errorTracking;
			fi
		fi
	done
}


# Function to add additional users
addAdditionalUsers()
{
	local anykey=0
	correct="y"
	local user=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Add additional user accounts ############"
		echo "######################################################"
		echo " "
		read -p "Would you like to add another user account? y/n: " correct
		if [ "$correct" == "y" ]; then
			echo " "
			read -p "Please enter the name for the account of the new user, in lowercase: " user
			echo " "
			read -p "Is this correct? $user y/n: " correct
			if [ "$correct" == "y" ] && [ "$createsambauser" != 1 ]; then
				echo " "
				echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
        			echo " "
        			echo "Log this password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				read -p "When the password is saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					lastuser="$user"
					if [ "$user" != "$currentuser" ]; then

						# create user
						sudo adduser $user || error_exit "$LINENO: adduser failed."
						lastuser=""
					elif [ "$user" == "$currentuser" ]; then

						# tell user they are having a bad day
						errorTracking;
						echo " "
						echo "$user is the account you're using currently."
						echo " "
						read -p "Please press enter to return to the add user prompt. " anykey
						lastuser=""
					fi
				else
					errorTracking;
				fi
			elif [ "$correct" == "y" ] && [ "$createsambauser" == 1 ]; then
				echo " "
				echo "Generate random password for the new user account, or save the one supplied by the user, using Keepass2."
				echo " "
				echo "Generate random password for the new Samba user account, or save the one supplied by the user, using Keepass2."
				echo " "
				echo "Log the user password as $clientname -> $hostname -> $user, with user name $user, as it may be needed later for maintenance."
        			echo " "
        			echo "Log the Samba user password as $clientname -> $hostname -> Samba -> $user, with user name $user, as it may be needed later for maintenance."
				echo " "
				echo "The user will be created first, then the Samba user. Please copy and paste the appropriate passwords when prompted."
				echo " "
				read -p "When the passwords are saved in the database, type continue to proceed: " correct
				if [ "$correct" == "continue" ]; then
					local sambadirectory=""
					lastuser="$user"
					
					if [ "$user" != "$currentuser" ]; then

						# create user
						sudo adduser $user || error_exit "$LINENO: adduser failed."
						lastuser=""
					elif [ "$user" == "$currentuser" ]; then

						# make sure user isn't having a bad day
						echo " "
						echo "$user is the account you're using currently."
						echo " "
						echo "Are you certain that your account, $user, isn't already configured to use Samba?"
						echo "Enter 'addme' to add yourself to the Samba group,"
						read -p "anything else will return you to the initial prompt. " anykey
						if [ "$anykey" != "addme"]; then
							lastuser=""
							return
						fi
					fi

					# Add user to samba group
					sudo adduser $user smbgrp || error_exit "$LINENO: adduser failed."

					# create samba password for user
					sudo smbpasswd -a $user || error_exit "$LINENO: Setting Samba password failed."
					lastuser=""
					echo " "
					echo "Please enter the parent directory structure to create for the new Samba user, starting from root,"
					echo "ie: /StorageArray/SambaShares"
					echo " "
					echo "This would create directory /StorageArray/SambaShares/$user and apply permissions."
					echo " "
					read -p "Please enter the parent directory structure: " sambadirectory
					echo " "
					read -p "Is this correct? $sambadirectory/$user y/n: " correct
					if [ "$correct" == "y" ]; then

						# Create Samba parent and user folders
						sudo mkdir -p $sambadirectory/$user || error_exit "$LINENO: Folder creation failed ."

						# Apply file and folder permissions
						sudo chmod -R 755 $sambadirectory/$user || error_exit "$LINENO: Setting folder permisions failed."

						# Apply file and folder ownership
						sudo chown $user:smbgrp $sambadirectory/$user || error_exit "$LINENO: Setting folder ownership failed."

						# backup samba conf file, then append user and share info to the end of the file
						filestoreplace[$filecount]=/etc/samba/smb.conf
						sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
						sudo chmod 777 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
						sudo printf "\n\n[$user]" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\npath = $sambadirectory/$user" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nvalid users = $user @smbgrp" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nguest ok = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nread only = no" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nbrowsable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo printf "\nwritable = yes" >> /etc/samba/smb.conf || error_exit "$LINENO: File edit failed."
						sudo chmod 644 /etc/samba/smb.conf || error_exit "$LINENO: Setting file permisions failed."
						filecount=$((filecount+1))
					else
						errorTracking;
					fi

					# Remove backed up file before moving on
					cleanUpSuccessful;
					wait
				else
					errorTracking;
				fi
			else
				correct="y"
				errorTracking;
			fi
		fi
	done
	useraddoops=0
}


# Function to display users
showUsers()
{
	local anykey=0
	case $userchoice in
		user-full ) echo " "
				echo "##### Displaying non system user accounts - full detail #####"
				echo "#############################################################"
				echo " "
				awk -F: '($3>=1000)&&($1!="nobody")' /etc/passwd;;

		user-name ) echo " "
				echo "##### Displaying non system user accounts - name only #####"
				echo "###########################################################"
				echo " "
				awk -F: '($3>=1000)&&($1!="nobody"){print $1}' /etc/passwd;;

		system-full ) echo " "
				echo "##### Displaying system user accounts - full detail #####"
				echo "#########################################################"
				echo " "
				awk -F: '($3<1000)' /etc/passwd;;

		system-name ) echo " "
				echo "##### Displaying system user accounts - name only #####"
				echo "#######################################################"
				echo " "
				awk -F: '($3<1000){print $1}' /etc/passwd;;

	esac

	# prevent immediate drop back to menu
	read -p "Press any key when ready to return to the previous menu: " anykey

	userchoice=""
	return
}


# Function to display groups
showGroups()
{
	local anykey=0
	case $userchoice in
		group-full ) echo " "
				echo "##### Displaying groups - full detail #####"
				echo "###########################################"
				echo " "
				cat /etc/group;;

		group-name ) echo " "
				echo "##### Displaying groups - name only #####"
				echo "#########################################"
				echo " "
				cut -d : -f 1 /etc/group;;

	esac

	# prevent immediate drop back to menu
	read -p "Press any key when ready to return to the previous menu: " anykey

	userchoice=""
	return
}


# Function to remove users
removeUser()
{
	correct="y"
	imsure=""
	local user=""
	echo " "
	until [ "$correct" == "n" ]; do
		echo " "
		echo "############ Remove user account ############"
		echo "#############################################"
		echo " "
		read -p "Would you like to remove a user account? y/n: " correct
		if [ "$correct" == "y" ]; then

			# Determine user to remove
			echo " "
			read -p "Please enter the user you wish to remove: " user
			echo " "
			read -p "Is this correct? $user y/n: " correct
			if [ "$correct" == "y" ] && [ "$user" != "$currentuser" ]; then

				# Derp detection
				echo " "
				echo "Are you absolutely sure you want to remove this user?"
				echo " "
				echo "Doing this will remove all files, home folders, etc for $user"
				echo " "
				read -p "If you're sure you want to delete $user's account, type imsure: " imsure
				if [ "$imsure" == "imsure" ]; then
					sudo deluser --remove-home $user
				else
					errorTracking;
					echo " "
					echo "Whew! Close call."
				fi

				# Dumb admin detection
			elif [ "$correct" == "y" ] && [ "$user" == "$currentuser" ]; then
				echo " "
				echo "No can do, Buckaroo."
				echo " "
				echo "You're not ghosting yourself on my watch."
				errorTracking;
			else
				correct="y"
				errorTracking;
			fi
		fi
	done
}
