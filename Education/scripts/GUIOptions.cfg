# Function to determine if server or desktop system
serverOrDesktop()
{
	#### Placeholder until functions are finished and desktops fully supported

	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/serverOrDesktop.txt ]; then
		echo "0" > $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		guiorcli="cli"
		servordesk="server"

		# set command line as default interface for server without gui
		sudo systemctl set-default multi-user.target || error_exit "$LINENO: Multi-user default setting failed."

		echo $guiorcli > $PWD/flags/guiorcli.txt || error_exit "$LINENO: File edit failed."
		echo $servordesk > $PWD/flags/servordesk.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: File edit failed."
		echo $beenrun > $PWD/flags/guiOrCliPresent.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return



	#### Work in progress

	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/serverOrDesktop.txt ]; then
		echo "0" > $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo " "
			echo "Will this system be used primarily as a server, or as a daily use desktop PC?"
			echo " "
			echo "NOTE: You can run server functions on a server or desktop."
			echo " "
			read -p "Type server or desktop to select the primary function of this system: " servordesk
			if [ "$servordesk" == "desktop" ]; then
				correct="y"
				echo "1" > $PWD/flags/guiOrCliPresent.txt || error_exit "$LINENO: File edit failed."
				echo "gui" > $PWD/flags/guiorcli.txt || error_exit "$LINENO: File edit failed."

			elif [ "$servordesk" == "server" ]; then
				correct="y"

			else
				errorTracking;
			fi
		done

		echo $servordesk > $PWD/flags/servordesk.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/serverOrDesktop.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}


guiOrCliPresent()
{
	#### Work in progress, currently set in server or desktop function

	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/guiOrCliPresent.txt ]; then
		echo "0" > $PWD/flags/guiOrCliPresent.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/guiOrCliPresent.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then

		echo $guiorcli > $PWD/flags/guiorcli.txt || error_exit "$LINENO: File edit failed."

		beenrun=1
		echo $beenrun > $PWD/flags/guiOrCliPresent.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files after complete
		cleanUpSuccessful;
		wait
	else
		return
	fi

	return
}
