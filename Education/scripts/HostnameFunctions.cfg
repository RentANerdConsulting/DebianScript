# Function to input new hostname
getNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNewHostname.txt ]; then
		echo "0" > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input new hostname ############"
			echo "############################################"
			echo " "
			echo "Please choose a new appropriate hostname for the system."
			echo "It may be no more than 15 characters long, with letters, numbers,"
			echo "and no special characters except - or _ in order to be compatible"
			echo "with NetBios naming schemes. It must be all lowercase."
			echo " "
			echo "Create a new group in KeePass in the systems primary group,"
			echo "using this format: $clientname -> name_of_system, so name_of_system matches this hostname."
			echo "All password entries for this system will be placed inside this group."
			echo " "
			read -p "Enter new hostname, ie: ubuntu-server: " hostname
			# Translate user input to all lower case to prevent ID10T errors
			hostname="$(translateToLowerCase $hostname)"
			echo " "
			read -p "Is this correct? $hostname y/n: " correct
			if [ "$correct" == "y" ]; then

				# Store translated hostname
				echo $hostname > $PWD/flags/hostname.txt  || error_exit "$LINENO: File creation failed."
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File edit failed."
	else
		# Check to see if file exists. If not, create it.
		if [ ! -e $PWD/flags/readHostName.txt ]; then
			echo "0" > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi

		beenrun=0

		# Read beenrun file. Run update cleanup if not run before, skip if it has been run already.
		read beenrun < $PWD/flags/readHostName.txt || error_exit "$LINENO: Read failed."
		if [ "$beenrun" != 1 ]; then
			systemCleanUp;
			wait

			beenrun=1
			echo $beenrun > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi
	fi

	return
}


# Function to set new hostname
setNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/setNewHostname.txt ]; then
		echo "0" > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0
	local oldhostname=""
	local anykey

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/setNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Setting new hostname ############"
		echo "##############################################"
		echo " "
		read oldhostname < /etc/hostname || error_exit "$LINENO: Read failed."

		# Update system hostname file
		filestoreplace[$filecount]=/etc/hostname
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hostname || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Update hosts file with new hostname
		filestoreplace[$filecount]=/etc/hosts
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hosts || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files if completed succesfully
		cleanUpSuccessful;
		wait
		read -p "Reboot is required. Press enter to continue." anykey
		sudo reboot
	else
		return
	fi

	return
}


# function to display currently enabled hostnames
displayHostnames()
{
	grep -w 127.0.1.1 /etc/hosts | cut -d ' ' -f 2
}


# Function to check if site hostnames are already used
checkSiteHostnames()
{
	local exists=""
	# Verify Apache is installed
	if [ -e $PWD/flags/installApache.txt ]; then
		exists="$(grep -w $1 /etc/hosts | cut -d ' ' -f 2)"
	fi

	echo "$exists"
}


# Function to set site hostnames
setSiteHostnames()
{
	# Verify Apache is installed
	if [ -e $PWD/flags/installApache.txt ] && [ "$(checkSiteHostnames $1)" != "$1" ]; then
        	local textcomp="0"
        	local runtimes=0
        	local line1=""
        	local line2=""
        	until [ "$textcomp" == "" ]; do
                	runtimes=$(($runtimes+1))

                	# determine line number of localhost entry (this should always be the first entry)
                	line1=$(sed -n "/127.0.0.1/=" /etc/hosts)

			# determine next cumulative line number
			line2=$(($line1+$runtimes))

                	# read total lines after localhost
                	textcomp=$(sed -n "$line2"p /etc/hosts)

                	if [ "$textcomp" == "" ]; then
				sudo sed -i "${runtimes} a\127.0.1.1    $1.$2 $1" /etc/hosts
			fi
		done

	else
		return
	fi

	return
}


# Function to get hostname for ownCloud virtualhost
getOwnCloudHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getOwnCloudHostname.txt ]; then
		echo "0" > $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input ownCloud hostname ############"
			echo "#################################################"
			echo " "
			echo "Please choose a new appropriate hostname for the ownCloud website."
			echo "It must be all lowercase, and not listed below."
			echo " "
			displayHostnames;
			echo " "
			echo "It will be used and displayed in reference to the site, and to access it."
			echo "EG, owncloud.$domainname"
			echo " "
			echo " "
			read -p "Enter new hostname, ie: owncloud: " ochostname
			# Translate user input to all lower case to prevent ID10T errors
			ochostname="$(translateToLowerCase $ochostname)"
			echo " "
			read -p "Is this correct? $ochostname y/n: " correct
			if [ "$correct" == "y" ]; then

				# make sure the hostname isn't already in use
				if [ "$(checkSiteHostnames $ochostname)" != "$ochostname" ]; then
					# Store translated hostname if not already in use
					echo $ochostname > $PWD/flags/ochostname.txt  || error_exit "$LINENO: File creation failed."
				else
					errorTracking;
					correct="n"
					echo "$ochostname is already in use. Please select another hostname."
				fi
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getOwnCloudHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get hostname for phpvirtualbox virtualhost
getphpvbHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getphpvbHostname.txt ]; then
		echo "0" > $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input phpvirtualbox hostname ############"
			echo "######################################################"
			echo " "
			echo "Please choose a new appropriate hostname for the phpvirtualbox website."
			echo "It must be all lowercase, and not listed below."
			echo " "
			displayHostnames;
			echo " "
			echo "It will be used and displayed in reference to the site, and to access it."
			echo "EG, phpvirtualbox.$domainname"
			echo " "
			echo " "
			read -p "Enter new hostname, ie: phpvirtualbox: " phpvbhostname
			# Translate user input to all lower case to prevent ID10T errors
			phpvbhostname="$(translateToLowerCase $phpvbhostname)"
			echo " "
			read -p "Is this correct? $phpvbhostname y/n: " correct
			if [ "$correct" == "y" ]; then

				# make sure the hostname isn't already in use
				if [ "$(checkSiteHostnames $phpvbhostname)" != "$phpvbhostname" ]; then
					# Store translated hostname if not already in use
					echo $phpvbhostname > $PWD/flags/phpvbhostname.txt  || error_exit "$LINENO: File creation failed."
				else
					errorTracking;
					correct="n"
					echo "$phpvbhostname is already in use. Please select another hostname."
				fi
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getphpvbHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get/set hostname for Netdata virtualhost
getNetdataHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNetdataHostname.txt ]; then
		echo "0" > $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input Netdata hostname ############"
			echo "################################################"
			echo " "
			echo "Please choose a new appropriate hostname for the Netdata website."
			echo "It must be all lowercase, and not listed below."
			echo " "
			displayHostnames;
			echo " "
			echo "It will be used and displayed in reference to the site, and to access it."
			echo "EG, netdata.$domainname"
			echo " "
			echo " "
			read -p "Enter new hostname, ie: netdata: " ndhostname
			# Translate user input to all lower case to prevent ID10T errors
			ndhostname="$(translateToLowerCase $ndhostname)"
			echo " "
			read -p "Is this correct? $ndhostname y/n: " correct
			if [ "$correct" == "y" ]; then

				# make sure the hostname isn't already in use
				if [ "$(checkSiteHostnames $ndhostname)" != "$ndhostname" ]; then
					# Store translated hostname if not already in use
					echo $ndhostname > $PWD/flags/ndhostname.txt  || error_exit "$LINENO: File creation failed."
				else
					errorTracking;
					correct="n"
					echo "$ndhostname is already in use. Please select another hostname."
				fi
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getNetdataHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}


# Function to get/set hostname for PHPMyAdmin virtualhost
getPHPMyAdminHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getPHPMyAdminHostname.txt ]; then
		echo "0" > $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input PHPMyAdmin hostname ############"
			echo "###################################################"
			echo " "
			echo "Please choose a new appropriate hostname for the PHPMyAdmin website."
			echo "It must be all lowercase, and not listed below."
			echo " "
			displayHostnames;
			echo " "
			echo "It will be used and displayed in reference to the site, and to access it."
			echo "EG, phpmyadmin.$domainname"
			echo " "
			echo " "
			read -p "Enter new hostname, ie: phpmyadmin: " phpmahostname
			# Translate user input to all lower case to prevent ID10T errors
			phpmahostname="$(translateToLowerCase $phpmahostname)"
			echo " "
			read -p "Is this correct? $phpmahostname y/n: " correct
			if [ "$correct" == "y" ]; then

				# make sure the hostname isn't already in use
				if [ "$(checkSiteHostnames $phpmahostname)" != "$phpmahostname" ]; then
					# Store translated hostname if not already in use
					echo $phpmahostname > $PWD/flags/phpmahostname.txt  || error_exit "$LINENO: File creation failed."
				else
					errorTracking;
					correct="n"
					echo "$phpmahostname is already in use. Please select another hostname."
				fi
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getPHPMyAdminHostname.txt || error_exit "$LINENO: File edit failed."
	else
		return
	fi

	return
}
