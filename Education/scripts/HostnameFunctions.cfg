# Function to input new hostname
getNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/getNewHostname.txt ]; then
		echo "0" > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/getNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		correct="n"
		local hostnametemp=""
		until [ "$correct" == "y" ]; do
			echo " "
			echo "############ Input new hostname ############"
			echo "############################################"
			echo " "
			echo "Please choose a new appropriate hostname for the system."
			echo "It may be no more than 15 characters long, with letters, numbers,"
			echo "and no special characters except - or _ in order to be compatible"
			echo "with NetBios naming schemes. It must be all lowercase."
			echo " "
			echo "Create a new group in KeePass in the systems primary group,"
			echo "using this format: $clientname -> name_of_vm, so name_of_vm matches this hostname."
			echo "All password entries for this system will be placed inside this group."
			echo " "
			read -p "Enter new hostname, ie: ownCloud-VM: " hostnametemp
			echo " "
			read -p "Is this correct? $hostnametemp y/n: " correct
			if [ "$correct" == "y" ]; then

				# Translate user input to all lower case to prevent ID10T errors
				hostname="$(echo $hostnametemp | tr '[:upper:]' '[:lower:]')"

				# Store translated hostname
				echo $hostname > $PWD/flags/hostname.txt  || error_exit "$LINENO: File creation failed."
			else
				errorTracking;
			fi
		done

		beenrun=1
		echo $beenrun > $PWD/flags/getNewHostname.txt || error_exit "$LINENO: File edit failed."
	else
		# Check to see if file exists. If not, create it.
		if [ ! -e $PWD/flags/readHostName.txt ]; then
			echo "0" > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi

		beenrun=0

		# Read beenrun file. Run update cleanup if not run before, skip if it has been run already.
		read beenrun < $PWD/flags/readHostName.txt || error_exit "$LINENO: Read failed."
		if [ "$beenrun" != 1 ]; then
			systemCleanUp;
			wait

			beenrun=1
			echo $beenrun > $PWD/flags/readHostName.txt || error_exit "$LINENO: File creation failed."
		fi
	fi

	return
}


# Function to set new hostname
setNewHostname()
{
	# Check to see if beenrun file exists. If not, create it.
	if [ ! -e $PWD/flags/setNewHostname.txt ]; then
		echo "0" > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File creation failed."
	fi
	beenrun=0
	local oldhostname=""
	local anykey

	# Read beenrun file. Run primary function if not run before, skip to else if it has been run already.
	read beenrun < $PWD/flags/setNewHostname.txt || error_exit "$LINENO: Read failed."
	if [ "$beenrun" != 1 ]; then
		echo " "
		echo "############ Setting new hostname ############"
		echo "##############################################"
		echo " "
		read oldhostname < /etc/hostname || error_exit "$LINENO: Read failed."

		# Update system hostname file
		filestoreplace[$filecount]=/etc/hostname
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hostname || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		# Update hosts file with new hostname
		filestoreplace[$filecount]=/etc/hosts
		sudo cp ${filestoreplace[$filecount]} ${filestoreplace[$filecount]}.back || error_exit "$LINENO: File backup failed."
		sudo sed -i "s/$oldhostname/$hostname/" /etc/hosts || error_exit "$LINENO: File edit failed."
		filecount=$((filecount+1))

		beenrun=1
		echo $beenrun > $PWD/flags/setNewHostname.txt || error_exit "$LINENO: File edit failed."

		# Remove backed up files if completed succesfully
		cleanUpSuccessful;
		wait
		read -p "Reboot is required. Press enter to continue." anykey
		sudo reboot
	else
		return
	fi

	return
}
